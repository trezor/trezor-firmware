# Automatically generated by pb2py
# fmt: off
import protobuf as p

if __debug__:
    try:
        from typing import Dict, List, Optional  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
        EnumTypeSafetyCheckLevel = Literal[0, 1, 2]
    except ImportError:
        pass


class ApplySettings(p.MessageType):
    MESSAGE_WIRE_TYPE = 25

    def __init__(
        self,
        *,
        language: Optional[str] = None,
        label: Optional[str] = None,
        use_passphrase: Optional[bool] = None,
        homescreen: Optional[bytes] = None,
        auto_lock_delay_ms: Optional[int] = None,
        display_rotation: Optional[int] = None,
        passphrase_always_on_device: Optional[bool] = None,
        safety_checks: Optional[EnumTypeSafetyCheckLevel] = None,
        experimental_features: Optional[bool] = None,
    ) -> None:
        self.language = language
        self.label = label
        self.use_passphrase = use_passphrase
        self.homescreen = homescreen
        self.auto_lock_delay_ms = auto_lock_delay_ms
        self.display_rotation = display_rotation
        self.passphrase_always_on_device = passphrase_always_on_device
        self.safety_checks = safety_checks
        self.experimental_features = experimental_features

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('language', p.UnicodeType, None),
            2: ('label', p.UnicodeType, None),
            3: ('use_passphrase', p.BoolType, None),
            4: ('homescreen', p.BytesType, None),
            6: ('auto_lock_delay_ms', p.UVarintType, None),
            7: ('display_rotation', p.UVarintType, None),
            8: ('passphrase_always_on_device', p.BoolType, None),
            9: ('safety_checks', p.EnumType("SafetyCheckLevel", (0, 1, 2)), None),
            10: ('experimental_features', p.BoolType, None),
        }
