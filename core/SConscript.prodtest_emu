# pylint: disable=E0602

import os
import shlex
import tools, models, ui

TREZOR_MODEL = ARGUMENTS.get('TREZOR_MODEL', 'T2T1')
CMAKELISTS = int(ARGUMENTS.get('CMAKELISTS', 0))
HW_REVISION = 'emulator'

FEATURE_FLAGS = {
    "AES_GCM": True,
}

if not models.has_emulator(TREZOR_MODEL):
    # skip prodtest build
    env = Environment()
    def build_prodtest(target,source,env):
        print(f'prodtest: nothing to build for Model {TREZOR_MODEL}')
    program_bin = env.Command(
                 target='prodtest.elf',
                 source=None,
                 action=build_prodtest
             )
    Return()

FEATURES_WANTED = ["input", "rgb_led", "display", "tropic",  "sd_card", "usb"]

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_MOD = [
    'KERNEL_MODE',
    'AES_128',
    'USE_INSECURE_PRNG',
]
SOURCE_MOD = []
SOURCE_MOD_CRYPTO = []
CPPDEFINES_HAL = []
SOURCE_HAL = []
PATH_HAL = []
RUST_UI_FEATURES = []

# modtrezorcrypto
CPPPATH_MOD += [
    'vendor/trezor-crypto',
    'vendor/trezor-storage',
]
SOURCE_MOD += [
    'vendor/trezor-storage/flash_area.c',
]
SOURCE_MOD_CRYPTO += [
    'vendor/trezor-crypto/aes/aes_modes.c',
    'vendor/trezor-crypto/aes/aesccm.c',
    'vendor/trezor-crypto/aes/aescrypt.c',
    'vendor/trezor-crypto/aes/aeskey.c',
    'vendor/trezor-crypto/aes/aestab.c',
    'vendor/trezor-crypto/bignum.c',
    'vendor/trezor-crypto/blake256.c',
    'vendor/trezor-crypto/blake2b.c',
    'vendor/trezor-crypto/buffer.c',
    'vendor/trezor-crypto/chacha_drbg.c',
    'vendor/trezor-crypto/chacha20poly1305/chacha_merged.c',
    'vendor/trezor-crypto/der.c',
    'vendor/trezor-crypto/ecdsa.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-32bit.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-helpers.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-scalarmult-base.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-32bit-tables.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-basepoint-table.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-impl-base.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-keccak.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-sha3.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519.c',
    'vendor/trezor-crypto/ed25519-donna/modm-donna-32bit.c',
    'vendor/trezor-crypto/groestl.c',
    'vendor/trezor-crypto/hasher.c',
    'vendor/trezor-crypto/hmac.c',
    'vendor/trezor-crypto/hmac_drbg.c',
    'vendor/trezor-crypto/memzero.c',
    'vendor/trezor-crypto/nist256p1.c',
    'vendor/trezor-crypto/rand.c',
    'vendor/trezor-crypto/ripemd160.c',
    'vendor/trezor-crypto/rfc6979.c',
    'vendor/trezor-crypto/secp256k1.c',
    'vendor/trezor-crypto/sha2.c',
    'vendor/trezor-crypto/sha3.c',
    'vendor/trezor-crypto/tls_prf.c',
]

# AES-GCM
if FEATURE_FLAGS["AES_GCM"]:
    CPPDEFINES_MOD += [
        'USE_AES_GCM',
        'AES_VAR',
    ]
    SOURCE_MOD_CRYPTO += [
        'vendor/trezor-crypto/aes/gf128mul.c',
        'vendor/trezor-crypto/aes/aesgcm.c',
    ]


# modtrezorui
CPPPATH_MOD += [
        'vendor/micropython/lib/uzlib'
]

SOURCE_MOD += [
    'embed/gfx/bitblt/gfx_bitblt.c',
    'embed/gfx/bitblt/gfx_bitblt_rgb565.c',
    'embed/gfx/bitblt/gfx_bitblt_rgba8888.c',
    'embed/gfx/bitblt/gfx_bitblt_mono8.c',
    'embed/gfx/fonts/font_bitmap.c',
    'embed/gfx/gfx_color.c',
    'embed/gfx/gfx_draw.c',
    'embed/gfx/terminal.c',
    'embed/io/display/display_utils.c',
    'embed/util/image/image.c',
    'embed/util/rsod/rsod.c',
    'embed/util/scm_revision/scm_revision.c',
    'embed/rtl/cli.c',
    'embed/rtl/error_handling.c',
    'embed/rtl/mini_printf.c',
    'embed/rtl/strutils.c',
    'embed/rtl/unit_test.c',
    'vendor/micropython/lib/uzlib/adler32.c',
    'vendor/micropython/lib/uzlib/crc32.c',
    'vendor/micropython/lib/uzlib/tinflate.c',
]

ui.init_ui(TREZOR_MODEL, "prodtest", RUST_UI_FEATURES)

env = Environment(
    ENV=os.environ,
    CFLAGS=ARGUMENTS.get('CFLAGS', '') + f" -DCONFIDENTIAL= -DPRODUCTION={ARGUMENTS.get('PRODUCTION', '0')}",
    CPPDEFPREFIX="-D'",
    CPPDEFSUFFIX="'",
)

FEATURES_AVAILABLE = models.configure_board(TREZOR_MODEL, HW_REVISION, FEATURES_WANTED, env, CPPDEFINES_HAL, SOURCE_HAL, PATH_HAL)

SOURCE_PRODTEST = [
    'embed/projects/prodtest/main.c',
    'embed/projects/prodtest/commands.c',
    'embed/projects/prodtest/cmd/common.c',
    'embed/projects/prodtest/cmd/prodtest_boardloader.c',
    'embed/projects/prodtest/cmd/prodtest_ble.c',
    'embed/projects/prodtest/cmd/prodtest_bootloader.c',
    'embed/projects/prodtest/cmd/prodtest_button.c',
    'embed/projects/prodtest/cmd/prodtest_display.c',
    'embed/projects/prodtest/cmd/prodtest_prodtest.c',
    'embed/projects/prodtest/cmd/prodtest_backup_ram.c',
    'embed/projects/prodtest/cmd/prodtest_get_cpuid.c',
    'embed/projects/prodtest/cmd/prodtest_haptic.c',
    'embed/projects/prodtest/cmd/prodtest_help.c',
    'embed/projects/prodtest/cmd/prodtest_hw_revision.c',
    'embed/projects/prodtest/cmd/prodtest_nfc.c',
    'embed/projects/prodtest/cmd/prodtest_nrf.c',
    'embed/projects/prodtest/cmd/prodtest_optiga.c',
    'embed/projects/prodtest/cmd/prodtest_otp_batch.c',
    'embed/projects/prodtest/cmd/prodtest_otp_variant.c',
    'embed/projects/prodtest/cmd/prodtest_ping.c',
    'embed/projects/prodtest/cmd/prodtest_reboot.c',
    'embed/projects/prodtest/cmd/prodtest_rgbled.c',
    'embed/projects/prodtest/cmd/prodtest_sdcard.c',
    'embed/projects/prodtest/cmd/prodtest_tamper.c',
    'embed/projects/prodtest/cmd/prodtest_sbu.c',
    'embed/projects/prodtest/cmd/prodtest_touch.c',
    'embed/projects/prodtest/cmd/prodtest_tropic.c',
    'embed/projects/prodtest/emulator.c',
]

SOURCE_HAL += [
    'embed/projects/unix/profile.c',
]

env.Replace(
    CAT='cat',
    CP='cp',
    AS='as',
    AR='ar',
    CC='gcc',
    LINK='ld',
    SIZE='size',
    STRIP='strip',
    OBJCOPY='objcopy',
    PYTHON='python',
    MAKECMAKELISTS='$PYTHON tools/make_cmakelists.py', )

MODEL_AS_NUMBER = str(models.get_hw_model_as_number(TREZOR_MODEL))

ALLPATHS = ['embed/rust',
           'embed/projects/prodtest',
           'embed/rtl/inc',
           'embed/models',
           'embed/projects/unix',
           'embed/gfx/inc',
           'embed/util/image/inc',
           'embed/util/rsod/inc',
           'embed/util/scm_revision/inc',
           'embed/util/translations/inc',
       ] + CPPPATH_MOD + PATH_HAL

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g '
    '-nostdlib '
    '-std=gnu11 -Wall -Werror -Wpointer-arith -Wno-missing-braces -fno-common '
    '-fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-all '
    + CCFLAGS_MOD,
    LINKFLAGS='',
    CPPPATH=ALLPATHS,
    CPPDEFINES=[
        'TREZOR_PRODTEST',
        'TREZOR_EMULATOR',
        'TREZOR_MODEL_'+TREZOR_MODEL,
    ] + CPPDEFINES_MOD + CPPDEFINES_HAL,
    ASPPFLAGS='$CFLAGS $CCFLAGS', )

try:
    env.ParseConfig('pkg-config --cflags --libs libjpeg')
except OSError:
    print("libjpeg not installed, Emulator build is not possible")

try:
    env.ParseConfig('pkg-config --cflags --libs sdl2 SDL2_image')
except OSError:
    print("SDL2 not installed, Emulator build is not possible")


env.Replace(
    ALLSOURCES=SOURCE_MOD + SOURCE_MOD_CRYPTO + SOURCE_PRODTEST + SOURCE_HAL,
    ALLDEFS=tools.get_defs_for_cmake(env['CPPDEFINES']))

cmake_gen = env.Command(
    target='CMakeLists.txt',
    source='',
    action='$MAKECMAKELISTS --sources $ALLSOURCES --dirs $CPPPATH --defs $ALLDEFS',
)

#
# Rust library
#
env.get("ENV")["RUST_TARGET"] = os.popen("rustc -vV | sed -n 's/host: //p'").read().strip()
features = ['prodtest',] + FEATURES_AVAILABLE + RUST_UI_FEATURES
if ARGUMENTS.get('TREZOR_EMULATOR_DEBUGGABLE', '0') == '1':
    profile = 'dev'
else:
    profile = 'release'

rust = tools.add_rust_lib(
    env=env,
    build='prodtest_emu',
    profile=profile,
    features=features,
    all_paths=ALLPATHS,
    build_dir=str(Dir('.').abspath),
)

env.Append(LINKFLAGS=['-lm'])

if env['PLATFORM'] == 'darwin':
    env.Append(LINKFLAGS=['-Wl,-dead_strip'])
else:
    env.Append(LINKFLAGS=['-Wl,--gc-sections'])

#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_MOD_CRYPTO, CCFLAGS='$CCFLAGS -ftrivial-auto-var-init=zero')
obj_program += env.Object(source=SOURCE_PRODTEST)
obj_program += env.Object(source=SOURCE_HAL)

program_elf = env.Command(
    target='prodtest.elf',
    source=obj_program,
    action=
    '$CC -o $TARGET $SOURCES $_LIBDIRFLAGS $_LIBFLAGS $LINKFLAGS')

env.Depends(program_elf, rust)

if CMAKELISTS != 0:
    env.Depends(program_elf, cmake_gen)
