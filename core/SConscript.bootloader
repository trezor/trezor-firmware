# pylint: disable=E0602

import os
import shlex
import tools, models, ui

TREZOR_MODEL = ARGUMENTS.get('TREZOR_MODEL', 'T2T1')
CMAKELISTS = int(ARGUMENTS.get('CMAKELISTS', 0))
BOOTLOADER_QA = ARGUMENTS.get('BOOTLOADER_QA', '0') == '1'
BOOTLOADER_DEVEL = ARGUMENTS.get('BOOTLOADER_DEVEL', '0') == '1'
PRODUCTION = 0 if BOOTLOADER_QA else ARGUMENTS.get('PRODUCTION', '0') == '1'
HW_REVISION = ARGUMENTS.get('HW_REVISION', None)
UI_PERFORMANCE_OVERLAY = ARGUMENTS.get('UI_PERFORMANCE_OVERLAY', '0') == '1'
DBG_CONSOLE = ARGUMENTS.get('DBG_CONSOLE', '')

FEATURES_WANTED = [
    "ble",
    "boot_ucb",
    "consumption_mask",
    "display",
    "dma2d",
    "input",
    "iwdg",
    "kernel_mode",
    "power_manager",
    "rgb_led",
    "rtc",
    "secure_domain",
    "secure_mode",
    "suspend",
    "usb",
    "usb_iface_wire",
    ]

if TREZOR_MODEL in ('T3W1', ):
    FEATURES_WANTED += ["haptic"]

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_MOD = []
SOURCE_MOD = []
SOURCE_MOD_CRYPTO = []
CPPDEFINES_HAL = []
SOURCE_HAL = []
PATH_HAL = []
RUST_UI_FEATURES = []

if DBG_CONSOLE != "":
    FEATURES_WANTED += ["dbg_console"]

env = Environment(
    ENV=os.environ,
    CFLAGS=f"{ARGUMENTS.get('CFLAGS', '')} -DPRODUCTION={int(PRODUCTION)} -DBOOTLOADER_QA={int(BOOTLOADER_QA)} -DBOOTLOADER_DEVEL={int(BOOTLOADER_DEVEL)}",
    CPPDEFINES_IMPLICIT=[],
    CPPDEFPREFIX="-D'",
    CPPDEFSUFFIX="'",
    DBG_CONSOLE=DBG_CONSOLE,
    )

FEATURES_AVAILABLE = models.configure_board(TREZOR_MODEL, HW_REVISION, FEATURES_WANTED, env, CPPDEFINES_HAL, SOURCE_HAL, PATH_HAL)


# modtrezorcrypto
CCFLAGS_MOD += '-Wno-sequence-point '
CPPPATH_MOD += [
    'vendor/trezor-crypto',
]
CPPDEFINES_MOD += [
    'AES_128',
    'AES_192',
    'USE_KECCAK',
    'ED25519_NO_PRECOMP',
    'FANCY_FATAL_ERROR',
]

SOURCE_MOD_CRYPTO = [
    'vendor/trezor-crypto/blake2s.c',
    'vendor/trezor-crypto/chacha_drbg.c',
    'vendor/trezor-crypto/chacha20poly1305/chacha_merged.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-32bit.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-helpers.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-32bit-tables.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-impl-base.c',
    'vendor/trezor-crypto/ed25519-donna/modm-donna-32bit.c',
    'vendor/trezor-crypto/memzero.c',
    'vendor/trezor-crypto/rand.c',
    'vendor/trezor-crypto/sha2.c',
]

if 'boot_ucb' in FEATURES_AVAILABLE:
    PQ_SIGNATURE_PATH = 'vendor/sphincsplus/ref/'
    CCFLAGS_MOD += '-DPARAMS=sphincs-sha2-128s '
    PQ_SIGNATURE_SOURCE = [
        'vendor/sphincsplus/ref/address.c',
        'vendor/sphincsplus/ref/fors.c',
        'vendor/sphincsplus/ref/hash_sha2.c',
        'vendor/sphincsplus/ref/sha2.c',
        'vendor/sphincsplus/ref/sign.c',
        'vendor/sphincsplus/ref/thash_sha2_simple.c',
        'vendor/sphincsplus/ref/utils.c',
        'vendor/sphincsplus/ref/wots.c',
    ]

# modtrezorui
CPPPATH_MOD += [
        'vendor/micropython/lib/uzlib',
]

SOURCE_MOD += [
    'embed/upymod/modtrezorcrypto/rand.c',
    'embed/gfx/bitblt/gfx_bitblt.c',
    'embed/gfx/bitblt/gfx_bitblt_mono8.c',
    'embed/gfx/bitblt/gfx_bitblt_rgb565.c',
    'embed/gfx/bitblt/gfx_bitblt_rgba8888.c',
    'embed/gfx/fonts/font_bitmap.c',
    'embed/gfx/gfx_color.c',
    'embed/gfx/gfx_draw.c',
    'embed/gfx/terminal.c',
    'embed/io/display/display_utils.c',
    'embed/util/flash/flash_utils.c',
    'embed/util/image/image.c',
    'embed/util/rsod/rsod.c',
    'embed/util/scm_revision/scm_revision.c',
    'embed/rtl/error_handling.c',
    'embed/rtl/mini_printf.c',
    'vendor/micropython/lib/uzlib/adler32.c',
    'vendor/micropython/lib/uzlib/crc32.c',
    'vendor/micropython/lib/uzlib/tinflate.c',
]

SOURCE_NANOPB = [
    'vendor/nanopb/pb_common.c',
    'vendor/nanopb/pb_decode.c',
    'vendor/nanopb/pb_encode.c',
]

ui.init_ui(TREZOR_MODEL, "bootloader", RUST_UI_FEATURES)

SOURCE_BOOTLOADER = [
    'embed/projects/bootloader/bootui.c',
    'embed/projects/bootloader/main.c',
    'embed/projects/bootloader/workflow/wf_firmware_update.c',
    'embed/projects/bootloader/workflow/wf_wipe_device.c',
    'embed/projects/bootloader/workflow/wf_get_features.c',
    'embed/projects/bootloader/workflow/wf_initialize.c',
    'embed/projects/bootloader/workflow/wf_ping.c',
    'embed/projects/bootloader/workflow/wf_bootloader.c',
    'embed/projects/bootloader/workflow/wf_empty_device.c',
    'embed/projects/bootloader/workflow/wf_auto_update.c',
    'embed/projects/bootloader/workflow/wf_host_control.c',
    'embed/projects/bootloader/workflow/wf_ble_pairing_request.c',
    'embed/projects/bootloader/wire/codec_v1.c',
    'embed/projects/bootloader/wire/wire_iface_usb.c',
    'embed/projects/bootloader/wire/wire_iface_ble.c',
    'embed/projects/bootloader/protob/protob.c',
    'embed/projects/bootloader/protob/pb/messages.pb.c',
    'embed/projects/bootloader/version_check.c',
]

if "boot_ucb" in FEATURES_AVAILABLE:
    env.Replace(
        HEADERTOOL='headertool_pq',
    )
else:
    SOURCE_BOOTLOADER += [
        'embed/projects/bootloader/header.S',
    ]
    env.Replace(
        HEADERTOOL='headertool',
    )


if ('LOCKABLE_BOOTLOADER', '1') in CPPDEFINES_HAL:
    SOURCE_BOOTLOADER += [
        'embed/projects/bootloader/workflow/wf_unlock_bootloader.c',
    ]


env.Replace(
    CAT='cat',
    CP='cp',
    AS='arm-none-eabi-as',
    AR='arm-none-eabi-ar',
    CC='arm-none-eabi-gcc',
    LINK='arm-none-eabi-gcc',
    SIZE='arm-none-eabi-size',
    STRIP='arm-none-eabi-strip',
    OBJCOPY='arm-none-eabi-objcopy',
    PYTHON='python',
    MAKECMAKELISTS='$PYTHON tools/make_cmakelists.py', )

env.Replace(
    TREZOR_MODEL=TREZOR_MODEL, )

ALLPATHS = [
        'embed/rust',
        'embed/projects/bootloader',
        'embed/projects/bootloader/nanopb',
        'embed/projects/bootloader/protob',
        'embed/rtl/inc',
        'embed/models',
        'embed/sys/bsp/inc',
        'embed/gfx/inc',
        'embed/util/translations/inc',
        'embed/util/image/inc',
        'embed/util/rsod/inc',
        'embed/util/scm_revision/inc',
        'embed/upymod/modtrezorui',
        'vendor/nanopb',
    ] + CPPPATH_MOD + PATH_HAL

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g3 '
    '-nostdlib '
    '-std=gnu11 -Wall -Werror -Wdouble-promotion -Wpointer-arith -Wno-missing-braces -fno-common '
    '-fsingle-precision-constant -fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-strong '
    +  env.get('ENV')["CPU_CCFLAGS"] + CCFLAGS_MOD,
    CCFLAGS_QSTR='-DNO_QSTR -DN_X64 -DN_X86 -DN_THUMB',
    LINKFLAGS=['-Tbuild/bootloader/memory.ld', '-Wl,--gc-sections', '-Wl,-Map=build/bootloader/bootloader.map', '-Wl,--warn-common', '-Wl,--print-memory-usage', '-Wl,--undefined=__errno'],
    CPPPATH=ALLPATHS,
    CPPDEFINES=[
        'BOOTLOADER',
        'TREZOR_MODEL_'+TREZOR_MODEL,
        'USE_HAL_DRIVER',
        'PB_FIELD_16BIT',
        'PB_ENCODE_ARRAYS_UNPACKED',
        'PB_VALIDATE_UTF8',
    ] + CPPDEFINES_MOD + CPPDEFINES_HAL,
    ASFLAGS=env.get('ENV')['CPU_ASFLAGS'],
    ASPPFLAGS='$CFLAGS $CCFLAGS',
    )

env.Replace(
    ALLSOURCES=SOURCE_MOD + SOURCE_MOD_CRYPTO + SOURCE_BOOTLOADER + SOURCE_NANOPB + SOURCE_HAL,
    ALLDEFS=tools.get_defs_for_cmake(env['CPPDEFINES'] + env['CPPDEFINES_IMPLICIT'] + [f"PRODUCTION={int(PRODUCTION)}", f"BOOTLOADER_QA={int(BOOTLOADER_QA)}"]))

cmake_gen = env.Command(
    target='CMakeLists.txt',
    source='',
    action='$MAKECMAKELISTS --sources $ALLSOURCES --dirs $CPPPATH --defs $ALLDEFS',
)

#
# Rust library
#
features = ['bootloader',] + FEATURES_AVAILABLE + RUST_UI_FEATURES

if UI_PERFORMANCE_OVERLAY:
    features.append('ui_performance_overlay')

rust = tools.add_rust_lib(
    env=env,
    build='bootloader',
    profile='release',
    features=features,
    all_paths=ALLPATHS,
    build_dir=str(Dir('.').abspath),
)


#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_MOD_CRYPTO, CCFLAGS='$CCFLAGS -ftrivial-auto-var-init=zero')
obj_program += env.Object(source=SOURCE_BOOTLOADER)
obj_program += env.Object(source=SOURCE_NANOPB)
obj_program += env.Object(source=SOURCE_HAL)

if 'boot_ucb' in FEATURES_AVAILABLE:
    obj_program += env.Object(
        source=PQ_SIGNATURE_SOURCE, CCFLAGS="$CCFLAGS -Wno-incompatible-pointer-types"
    )


linkerscript_gen = env.Command(
    target='memory.ld',
    source=[f'embed/models/{TREZOR_MODEL}/memory.ld', env.get('ENV')['LINKER_SCRIPT'].format(target='bootloader')],
    action='$CAT $SOURCES > $TARGET',
)

program_elf = env.Command(
    target='bootloader.elf',
    source=obj_program,
    action=
    '$LINK -o $TARGET $CCFLAGS $CFLAGS $SOURCES $LINKFLAGS -lc_nano -lm -lgcc',
)

env.Depends(program_elf, linkerscript_gen)
env.Depends(program_elf, rust)

SUFFIX = '_qa' if BOOTLOADER_QA else ''

BINARY_NAME = f"build/bootloader/bootloader-{TREZOR_MODEL}{SUFFIX}"
BINARY_NAME += "-" + tools.get_version('embed/projects/bootloader/version.h')
BINARY_NAME += "-" + tools.get_git_revision_short_hash()
BINARY_NAME += "-dirty" if tools.get_git_modified() else ""
BINARY_NAME += ".bin"

if CMAKELISTS != 0:
    env.Depends(program_elf, cmake_gen)

program_bin = env.Command(
    target='bootloader.bin',
    source=program_elf,
    action=[
        '$OBJCOPY -O binary -j .header -j .flash -j .data -j .confidential $SOURCE $TARGET',
        '$HEADERTOOL $TARGET ' + ('-D' if BOOTLOADER_DEVEL else ''),
        '$CP $TARGET ' + BINARY_NAME,
    ], )
