# pylint: disable=E0602

import os
import tools, models

TREZOR_MODEL = ARGUMENTS.get('TREZOR_MODEL', 'T')
CMAKELISTS = int(ARGUMENTS.get('CMAKELISTS', 0))
HW_REVISION = 'emulator'
NEW_RENDERING = ARGUMENTS.get('NEW_RENDERING', '1') == '1' or TREZOR_MODEL in ('T3T1',)

if TREZOR_MODEL in ('1', 'DISC1', 'DISC2'):
    # skip bootloader build
    env = Environment()
    def build_bootloader(target,source,env):
        print(f'Bootloader: nothing to build for Model {TREZOR_MODEL}')
    program_bin = env.Command(
                 target='bootloader.elf',
                 source=None,
                 action=build_bootloader
             )
    Return()

FEATURES_WANTED = ["input", "rgb_led", "dma2d", "optiga_hal"]

if NEW_RENDERING:
    FEATURES_WANTED.append("new_rendering")

CCFLAGS_MOD = ''
CPPPATH_MOD = []
CPPDEFINES_HAL = []
PATH_HAL = []
CPPDEFINES_MOD = []
SOURCE_MOD = []
SOURCE_MOD_CRYPTO = []

if TREZOR_MODEL in ('1', 'R', 'T3B1'):
    FONT_NORMAL='Font_PixelOperator_Regular_8'
    FONT_DEMIBOLD='Font_PixelOperator_Regular_8'
    FONT_BOLD='Font_PixelOperator_Bold_8'
    FONT_MONO='Font_PixelOperator_Regular_8'
    FONT_BIG='Font_PixelOperator_Regular_8'
    FONT_NORMAL_UPPER='Font_PixelOperator_Regular_8_upper'
    FONT_BOLD_UPPER=None
    FONT_SUB=None
elif TREZOR_MODEL in ('T', 'DISC2'):
    FONT_NORMAL='Font_TTHoves_Regular_21'
    FONT_DEMIBOLD=None
    FONT_BOLD=None
    FONT_MONO=None
    FONT_BIG=None
    FONT_NORMAL_UPPER=None
    FONT_BOLD_UPPER='Font_TTHoves_Bold_17_upper'
    FONT_SUB=None
elif TREZOR_MODEL in ('T3T1',):
    FONT_NORMAL='Font_TTSatoshi_DemiBold_21'
    FONT_DEMIBOLD='Font_TTSatoshi_DemiBold_21'
    FONT_BOLD=None
    FONT_MONO='Font_TTSatoshi_DemiBold_21'
    FONT_BIG=None
    FONT_NORMAL_UPPER=None
    FONT_BOLD_UPPER='Font_TTHoves_Bold_17_upper'
    FONT_SUB=None

# modtrezorcrypto
CCFLAGS_MOD += '-Wno-sequence-point '
CPPPATH_MOD += [
    'vendor/trezor-crypto',
    'vendor/trezor-storage',
]
CPPDEFINES_MOD += [
    'AES_128',
    'AES_192',
    'USE_KECCAK',
    'ED25519_NO_PRECOMP',
    'TREZOR_UI2',
    'FANCY_FATAL_ERROR'
]
SOURCE_MOD_CRYPTO += [
    'vendor/trezor-crypto/blake2s.c',
    'vendor/trezor-crypto/chacha_drbg.c',
    'vendor/trezor-crypto/chacha20poly1305/chacha_merged.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-32bit.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-helpers.c',
    'vendor/trezor-crypto/ed25519-donna/curve25519-donna-scalarmult-base.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-32bit-tables.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-basepoint-table.c',
    'vendor/trezor-crypto/ed25519-donna/ed25519-donna-impl-base.c',
    'vendor/trezor-crypto/ed25519-donna/modm-donna-32bit.c',
    'vendor/trezor-crypto/memzero.c',
    'vendor/trezor-crypto/rand.c',
    'vendor/trezor-crypto/sha2.c',
]

# modtrezorui
CPPPATH_MOD += [
        'vendor/micropython/lib/uzlib',
]

SOURCE_MOD += [
    'embed/extmod/modtrezorcrypto/rand.c',
    'embed/lib/buffers.c',
    'embed/lib/colors.c',
    'embed/lib/display_utils.c',
    'embed/lib/error_handling.c',
    'embed/lib/fonts/font_bitmap.c',
    'embed/lib/fonts/fonts.c',
    'embed/lib/gfx_color.c',
    'embed/lib/gfx_bitblt_mono8.c',
    'embed/lib/gfx_bitblt_rgb565.c',
    'embed/lib/gfx_bitblt_rgba8888.c',
    'embed/lib/image.c',
    'embed/lib/mini_printf.c',
    'embed/lib/terminal.c',
    'embed/lib/unit_variant.c',
    'vendor/micropython/lib/uzlib/adler32.c',
    'vendor/micropython/lib/uzlib/crc32.c',
    'vendor/micropython/lib/uzlib/tinflate.c',
    'vendor/trezor-storage/flash_area.c',
]

if NEW_RENDERING:
    CPPDEFINES_MOD += ['NEW_RENDERING']
    SOURCE_MOD += [
        'embed/lib/gfx_draw.c',
    ]
else:
    SOURCE_MOD += [
        'embed/lib/display_draw.c',
]

SOURCE_NANOPB = [
    'vendor/nanopb/pb_common.c',
    'vendor/nanopb/pb_decode.c',
    'vendor/nanopb/pb_encode.c',
]

SOURCE_BOOTLOADER = [
    'embed/bootloader/bootui.c',
    'embed/bootloader/main.c',
    'embed/bootloader/messages.c',
    'embed/bootloader/emulator.c',
    'embed/bootloader/version_check.c',
    'embed/bootloader/protob/messages.pb.c',
]

SOURCE_TREZORHAL = [
    'embed/trezorhal/unix/bootutils.c',
    'embed/trezorhal/unix/common.c',
    'embed/trezorhal/unix/fault_handlers.c',
    'embed/trezorhal/unix/flash.c',
    'embed/trezorhal/unix/flash_otp.c',
    'embed/trezorhal/unix/monoctr.c',
    'embed/trezorhal/unix/random_delays.c',
    'embed/trezorhal/unix/rng.c',
    'embed/trezorhal/unix/secret.c',
    'embed/trezorhal/unix/systick.c',
    'embed/trezorhal/unix/systimer.c',
    'embed/trezorhal/unix/usb.c',
]

if NEW_RENDERING:
    SOURCE_TREZORHAL += [
        'embed/trezorhal/unix/display_driver.c',
        'embed/trezorhal/xdisplay_legacy.c',
    ]
else:
    SOURCE_TREZORHAL += [
        'embed/trezorhal/unix/display-unix.c',
    ]

SOURCE_UNIX = [
    'embed/unix/profile.c',
]



# fonts
tools.add_font('NORMAL', FONT_NORMAL, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('BOLD', FONT_BOLD, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('DEMIBOLD', FONT_DEMIBOLD, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('MONO', FONT_MONO, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('BIG', FONT_BIG, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('NORMAL_UPPER', FONT_NORMAL_UPPER, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('BOLD_UPPER', FONT_BOLD_UPPER, CPPDEFINES_MOD, SOURCE_MOD)
tools.add_font('SUB', FONT_SUB, CPPDEFINES_MOD, SOURCE_MOD)

env = Environment(ENV=os.environ, CFLAGS='%s -DCONFIDENTIAL= -DPRODUCTION=%s' % (ARGUMENTS.get('CFLAGS', ''), ARGUMENTS.get('PRODUCTION', '0')))

FEATURES_AVAILABLE = models.configure_board(TREZOR_MODEL, HW_REVISION, FEATURES_WANTED, env, CPPDEFINES_HAL, SOURCE_UNIX, PATH_HAL)

env.Replace(
    CP='cp',
    AS='as',
    AR='ar',
    CC='gcc',
    LINK='ld',
    SIZE='size',
    STRIP='strip',
    OBJCOPY='objcopy',
    PYTHON='python',
    MAKECMAKELISTS='$PYTHON tools/make_cmakelists.py', )

MODEL_IDENTIFIER = models.get_model_identifier(TREZOR_MODEL)
MODEL_AS_NUMBER = str(models.get_hw_model_as_number(MODEL_IDENTIFIER))

ALLPATHS = ['embed/rust',
           'embed/bootloader',
           'embed/bootloader/nanopb',
           'embed/bootloader/protob',
           'embed/lib',
           'embed/models',
           'embed/trezorhal',
           'embed/trezorhal/unix',
           'embed/unix',
           'embed/extmod/modtrezorui',
           'vendor/nanopb',
       ] + CPPPATH_MOD + PATH_HAL

env.Replace(
    COPT=env.get('ENV').get('OPTIMIZE', '-Os'),
    CCFLAGS='$COPT '
    '-g3 '
    '-nostdlib '
    '-std=gnu11 -Wall -Werror -Wpointer-arith -Wno-missing-braces -fno-common '
    '-fsingle-precision-constant -fdata-sections -ffunction-sections '
    '-ffreestanding '
    '-fstack-protector-all '
    + CCFLAGS_MOD,
    CPPPATH=ALLPATHS,
    CPPDEFINES=[
        'BOOTLOADER',
        'TREZOR_EMULATOR',
        'TREZOR_MODEL_'+TREZOR_MODEL,
        'PB_FIELD_16BIT',
        'PB_ENCODE_ARRAYS_UNPACKED',
        'PB_VALIDATE_UTF8',
    ] + CPPDEFINES_MOD + CPPDEFINES_HAL,
    ASPPFLAGS='$CFLAGS $CCFLAGS', )

try:
    env.ParseConfig('pkg-config --cflags --libs sdl2 SDL2_image')
except OSError:
    print("SDL2 not installed, Emulator build is not possible")


env.Replace(
    ALLSOURCES=SOURCE_MOD + SOURCE_MOD_CRYPTO + SOURCE_BOOTLOADER + SOURCE_NANOPB + SOURCE_TREZORHAL + SOURCE_UNIX,
    ALLDEFS=tools.get_defs_for_cmake(env['CPPDEFINES']))

cmake_gen = env.Command(
    target='CMakeLists.txt',
    source='',
    action='$MAKECMAKELISTS --sources $ALLSOURCES --dirs $CPPPATH --defs $ALLDEFS',
)


#
# Rust library
#

RUST_TARGET = os.popen("rustc -vV | sed -n 's/host: //p'").read().strip()
RUST_LIB = 'trezor_lib'

if ARGUMENTS.get('TREZOR_EMULATOR_DEBUGGABLE', '0') == '1':
    RUST_PROFILE = 'dev'
    RUST_LIBDIR = f'build/bootloader_emu/rust/{RUST_TARGET}/debug'
else:
    RUST_PROFILE = 'release'
    RUST_LIBDIR = f'build/bootloader_emu/rust/{RUST_TARGET}/release'

RUST_LIBPATH = f'{RUST_LIBDIR}/lib{RUST_LIB}.a'

def cargo_build():
    if TREZOR_MODEL in ("1",):
        features = ["model_t1"]
    elif TREZOR_MODEL in ("R", "T3B1"):
        features = ["model_tr"]
    elif TREZOR_MODEL in ("T3T1",):
        features = ["model_mercury"]
    else:
        features = ["model_tt"]

    if TREZOR_MODEL in ("R",):
        features.append("ui_empty_lock")

    if NEW_RENDERING:
        features.append('new_rendering')

    features.append("ui")
    features.append("bootloader")
    features.extend(FEATURES_AVAILABLE)


    cargo_opts = [
        f'--target={RUST_TARGET}',
        '--target-dir=../../build/bootloader_emu/rust',
        '--no-default-features',
        '--features ' + ','.join(features),
        '-Z build-std=core',
        '-Z build-std-features=panic_immediate_abort',
    ]

    bindgen_macros = tools.get_bindgen_defines(env.get("CPPDEFINES"), ALLPATHS)
    build_dir = str(Dir('.').abspath)

    return f'export BINDGEN_MACROS=\'{bindgen_macros}\'; export BUILD_DIR=\'{build_dir}\'; cd embed/rust; cargo build --profile {RUST_PROFILE} ' + ' '.join(cargo_opts)

rust = env.Command(
    target=RUST_LIBPATH,
    source='',
    action=cargo_build(), )

env.Append(LINKFLAGS=f'-L{RUST_LIBDIR}')
env.Append(LINKFLAGS=f'-l{RUST_LIB}')
env.Append(LINKFLAGS='-lm')

#
# Program objects
#

obj_program = []
obj_program += env.Object(source=SOURCE_MOD)
obj_program += env.Object(source=SOURCE_MOD_CRYPTO, CCFLAGS='$CCFLAGS -ftrivial-auto-var-init=zero')
obj_program += env.Object(source=SOURCE_BOOTLOADER)
obj_program += env.Object(source=SOURCE_NANOPB)
obj_program += env.Object(source=SOURCE_TREZORHAL)
obj_program += env.Object(source=SOURCE_UNIX)

program_elf = env.Command(
    target='bootloader.elf',
    source=obj_program,
    action=
    '$CC -o $TARGET $SOURCES $_LIBDIRFLAGS $_LIBFLAGS $LINKFLAGS', )

env.Depends(program_elf, rust)

if CMAKELISTS != 0:
    env.Depends(program_elf, cmake_gen)
