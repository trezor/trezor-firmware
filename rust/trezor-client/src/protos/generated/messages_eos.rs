// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-eos.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosGetPublicKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosGetPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosGetPublicKey.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosGetPublicKey.show_display)
    pub show_display: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosGetPublicKey.chunkify)
    pub chunkify: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosGetPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosGetPublicKey {
    fn default() -> &'a EosGetPublicKey {
        <EosGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl EosGetPublicKey {
    pub fn new() -> EosGetPublicKey {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    // optional bool chunkify = 3;

    pub fn chunkify(&self) -> bool {
        self.chunkify.unwrap_or(false)
    }

    pub fn clear_chunkify(&mut self) {
        self.chunkify = ::std::option::Option::None;
    }

    pub fn has_chunkify(&self) -> bool {
        self.chunkify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunkify(&mut self, v: bool) {
        self.chunkify = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &EosGetPublicKey| { &m.address_n },
            |m: &mut EosGetPublicKey| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &EosGetPublicKey| { &m.show_display },
            |m: &mut EosGetPublicKey| { &mut m.show_display },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chunkify",
            |m: &EosGetPublicKey| { &m.chunkify },
            |m: &mut EosGetPublicKey| { &mut m.chunkify },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosGetPublicKey>(
            "EosGetPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosGetPublicKey {
    const NAME: &'static str = "EosGetPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.chunkify = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        if let Some(v) = self.chunkify {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.chunkify {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosGetPublicKey {
        EosGetPublicKey::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.chunkify = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosGetPublicKey {
        static instance: EosGetPublicKey = EosGetPublicKey {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            chunkify: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosGetPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosGetPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosGetPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosPublicKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosPublicKey.wif_public_key)
    pub wif_public_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosPublicKey.raw_public_key)
    pub raw_public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosPublicKey {
    fn default() -> &'a EosPublicKey {
        <EosPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl EosPublicKey {
    pub fn new() -> EosPublicKey {
        ::std::default::Default::default()
    }

    // required string wif_public_key = 1;

    pub fn wif_public_key(&self) -> &str {
        match self.wif_public_key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_wif_public_key(&mut self) {
        self.wif_public_key = ::std::option::Option::None;
    }

    pub fn has_wif_public_key(&self) -> bool {
        self.wif_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wif_public_key(&mut self, v: ::std::string::String) {
        self.wif_public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wif_public_key(&mut self) -> &mut ::std::string::String {
        if self.wif_public_key.is_none() {
            self.wif_public_key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.wif_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_wif_public_key(&mut self) -> ::std::string::String {
        self.wif_public_key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes raw_public_key = 2;

    pub fn raw_public_key(&self) -> &[u8] {
        match self.raw_public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_raw_public_key(&mut self) {
        self.raw_public_key = ::std::option::Option::None;
    }

    pub fn has_raw_public_key(&self) -> bool {
        self.raw_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw_public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.raw_public_key.is_none() {
            self.raw_public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.raw_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_raw_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.raw_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "wif_public_key",
            |m: &EosPublicKey| { &m.wif_public_key },
            |m: &mut EosPublicKey| { &mut m.wif_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_public_key",
            |m: &EosPublicKey| { &m.raw_public_key },
            |m: &mut EosPublicKey| { &mut m.raw_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosPublicKey>(
            "EosPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosPublicKey {
    const NAME: &'static str = "EosPublicKey";

    fn is_initialized(&self) -> bool {
        if self.wif_public_key.is_none() {
            return false;
        }
        if self.raw_public_key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.wif_public_key = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.raw_public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.wif_public_key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.raw_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.wif_public_key.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.raw_public_key.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosPublicKey {
        EosPublicKey::new()
    }

    fn clear(&mut self) {
        self.wif_public_key = ::std::option::Option::None;
        self.raw_public_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosPublicKey {
        static instance: EosPublicKey = EosPublicKey {
            wif_public_key: ::std::option::Option::None,
            raw_public_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosSignTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.chain_id)
    pub chain_id: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.header)
    pub header: ::protobuf::MessageField<eos_sign_tx::EosTxHeader>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.num_actions)
    pub num_actions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.chunkify)
    pub chunkify: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosSignTx {
    fn default() -> &'a EosSignTx {
        <EosSignTx as ::protobuf::Message>::default_instance()
    }
}

impl EosSignTx {
    pub fn new() -> EosSignTx {
        ::std::default::Default::default()
    }

    // required bytes chain_id = 2;

    pub fn chain_id(&self) -> &[u8] {
        match self.chain_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_chain_id(&mut self) {
        self.chain_id = ::std::option::Option::None;
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.chain_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.chain_id.is_none() {
            self.chain_id = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.chain_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::vec::Vec<u8> {
        self.chain_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 num_actions = 4;

    pub fn num_actions(&self) -> u32 {
        self.num_actions.unwrap_or(0)
    }

    pub fn clear_num_actions(&mut self) {
        self.num_actions = ::std::option::Option::None;
    }

    pub fn has_num_actions(&self) -> bool {
        self.num_actions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_actions(&mut self, v: u32) {
        self.num_actions = ::std::option::Option::Some(v);
    }

    // optional bool chunkify = 5;

    pub fn chunkify(&self) -> bool {
        self.chunkify.unwrap_or(false)
    }

    pub fn clear_chunkify(&mut self) {
        self.chunkify = ::std::option::Option::None;
    }

    pub fn has_chunkify(&self) -> bool {
        self.chunkify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunkify(&mut self, v: bool) {
        self.chunkify = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &EosSignTx| { &m.address_n },
            |m: &mut EosSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chain_id",
            |m: &EosSignTx| { &m.chain_id },
            |m: &mut EosSignTx| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_sign_tx::EosTxHeader>(
            "header",
            |m: &EosSignTx| { &m.header },
            |m: &mut EosSignTx| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_actions",
            |m: &EosSignTx| { &m.num_actions },
            |m: &mut EosSignTx| { &mut m.num_actions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chunkify",
            |m: &EosSignTx| { &m.chunkify },
            |m: &mut EosSignTx| { &mut m.chunkify },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosSignTx>(
            "EosSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosSignTx {
    const NAME: &'static str = "EosSignTx";

    fn is_initialized(&self) -> bool {
        if self.chain_id.is_none() {
            return false;
        }
        if self.header.is_none() {
            return false;
        }
        if self.num_actions.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.chain_id = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                32 => {
                    self.num_actions = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.chunkify = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.chain_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.num_actions {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.chunkify {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.chain_id.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.num_actions {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.chunkify {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosSignTx {
        EosSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.chain_id = ::std::option::Option::None;
        self.header.clear();
        self.num_actions = ::std::option::Option::None;
        self.chunkify = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosSignTx {
        static instance: EosSignTx = EosSignTx {
            address_n: ::std::vec::Vec::new(),
            chain_id: ::std::option::Option::None,
            header: ::protobuf::MessageField::none(),
            num_actions: ::std::option::Option::None,
            chunkify: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EosSignTx`
pub mod eos_sign_tx {
    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosTxHeader {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.expiration)
        pub expiration: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.ref_block_num)
        pub ref_block_num: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.ref_block_prefix)
        pub ref_block_prefix: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.max_net_usage_words)
        pub max_net_usage_words: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.max_cpu_usage_ms)
        pub max_cpu_usage_ms: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.delay_sec)
        pub delay_sec: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosSignTx.EosTxHeader.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosTxHeader {
        fn default() -> &'a EosTxHeader {
            <EosTxHeader as ::protobuf::Message>::default_instance()
        }
    }

    impl EosTxHeader {
        pub fn new() -> EosTxHeader {
            ::std::default::Default::default()
        }

        // required uint32 expiration = 1;

        pub fn expiration(&self) -> u32 {
            self.expiration.unwrap_or(0)
        }

        pub fn clear_expiration(&mut self) {
            self.expiration = ::std::option::Option::None;
        }

        pub fn has_expiration(&self) -> bool {
            self.expiration.is_some()
        }

        // Param is passed by value, moved
        pub fn set_expiration(&mut self, v: u32) {
            self.expiration = ::std::option::Option::Some(v);
        }

        // required uint32 ref_block_num = 2;

        pub fn ref_block_num(&self) -> u32 {
            self.ref_block_num.unwrap_or(0)
        }

        pub fn clear_ref_block_num(&mut self) {
            self.ref_block_num = ::std::option::Option::None;
        }

        pub fn has_ref_block_num(&self) -> bool {
            self.ref_block_num.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ref_block_num(&mut self, v: u32) {
            self.ref_block_num = ::std::option::Option::Some(v);
        }

        // required uint32 ref_block_prefix = 3;

        pub fn ref_block_prefix(&self) -> u32 {
            self.ref_block_prefix.unwrap_or(0)
        }

        pub fn clear_ref_block_prefix(&mut self) {
            self.ref_block_prefix = ::std::option::Option::None;
        }

        pub fn has_ref_block_prefix(&self) -> bool {
            self.ref_block_prefix.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ref_block_prefix(&mut self, v: u32) {
            self.ref_block_prefix = ::std::option::Option::Some(v);
        }

        // required uint32 max_net_usage_words = 4;

        pub fn max_net_usage_words(&self) -> u32 {
            self.max_net_usage_words.unwrap_or(0)
        }

        pub fn clear_max_net_usage_words(&mut self) {
            self.max_net_usage_words = ::std::option::Option::None;
        }

        pub fn has_max_net_usage_words(&self) -> bool {
            self.max_net_usage_words.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_net_usage_words(&mut self, v: u32) {
            self.max_net_usage_words = ::std::option::Option::Some(v);
        }

        // required uint32 max_cpu_usage_ms = 5;

        pub fn max_cpu_usage_ms(&self) -> u32 {
            self.max_cpu_usage_ms.unwrap_or(0)
        }

        pub fn clear_max_cpu_usage_ms(&mut self) {
            self.max_cpu_usage_ms = ::std::option::Option::None;
        }

        pub fn has_max_cpu_usage_ms(&self) -> bool {
            self.max_cpu_usage_ms.is_some()
        }

        // Param is passed by value, moved
        pub fn set_max_cpu_usage_ms(&mut self, v: u32) {
            self.max_cpu_usage_ms = ::std::option::Option::Some(v);
        }

        // required uint32 delay_sec = 6;

        pub fn delay_sec(&self) -> u32 {
            self.delay_sec.unwrap_or(0)
        }

        pub fn clear_delay_sec(&mut self) {
            self.delay_sec = ::std::option::Option::None;
        }

        pub fn has_delay_sec(&self) -> bool {
            self.delay_sec.is_some()
        }

        // Param is passed by value, moved
        pub fn set_delay_sec(&mut self, v: u32) {
            self.delay_sec = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "expiration",
                |m: &EosTxHeader| { &m.expiration },
                |m: &mut EosTxHeader| { &mut m.expiration },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ref_block_num",
                |m: &EosTxHeader| { &m.ref_block_num },
                |m: &mut EosTxHeader| { &mut m.ref_block_num },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ref_block_prefix",
                |m: &EosTxHeader| { &m.ref_block_prefix },
                |m: &mut EosTxHeader| { &mut m.ref_block_prefix },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_net_usage_words",
                |m: &EosTxHeader| { &m.max_net_usage_words },
                |m: &mut EosTxHeader| { &mut m.max_net_usage_words },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "max_cpu_usage_ms",
                |m: &EosTxHeader| { &m.max_cpu_usage_ms },
                |m: &mut EosTxHeader| { &mut m.max_cpu_usage_ms },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "delay_sec",
                |m: &EosTxHeader| { &m.delay_sec },
                |m: &mut EosTxHeader| { &mut m.delay_sec },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosTxHeader>(
                "EosSignTx.EosTxHeader",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosTxHeader {
        const NAME: &'static str = "EosTxHeader";

        fn is_initialized(&self) -> bool {
            if self.expiration.is_none() {
                return false;
            }
            if self.ref_block_num.is_none() {
                return false;
            }
            if self.ref_block_prefix.is_none() {
                return false;
            }
            if self.max_net_usage_words.is_none() {
                return false;
            }
            if self.max_cpu_usage_ms.is_none() {
                return false;
            }
            if self.delay_sec.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.expiration = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.ref_block_num = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.ref_block_prefix = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.max_net_usage_words = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.max_cpu_usage_ms = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.delay_sec = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.expiration {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.ref_block_num {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.ref_block_prefix {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.max_net_usage_words {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.max_cpu_usage_ms {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.delay_sec {
                my_size += ::protobuf::rt::uint32_size(6, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.expiration {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.ref_block_num {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.ref_block_prefix {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.max_net_usage_words {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.max_cpu_usage_ms {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.delay_sec {
                os.write_uint32(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosTxHeader {
            EosTxHeader::new()
        }

        fn clear(&mut self) {
            self.expiration = ::std::option::Option::None;
            self.ref_block_num = ::std::option::Option::None;
            self.ref_block_prefix = ::std::option::Option::None;
            self.max_net_usage_words = ::std::option::Option::None;
            self.max_cpu_usage_ms = ::std::option::Option::None;
            self.delay_sec = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosTxHeader {
            static instance: EosTxHeader = EosTxHeader {
                expiration: ::std::option::Option::None,
                ref_block_num: ::std::option::Option::None,
                ref_block_prefix: ::std::option::Option::None,
                max_net_usage_words: ::std::option::Option::None,
                max_cpu_usage_ms: ::std::option::Option::None,
                delay_sec: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosTxHeader {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosSignTx.EosTxHeader").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosTxHeader {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosTxHeader {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosTxActionRequest {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionRequest.data_size)
    pub data_size: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosTxActionRequest {
    fn default() -> &'a EosTxActionRequest {
        <EosTxActionRequest as ::protobuf::Message>::default_instance()
    }
}

impl EosTxActionRequest {
    pub fn new() -> EosTxActionRequest {
        ::std::default::Default::default()
    }

    // optional uint32 data_size = 1;

    pub fn data_size(&self) -> u32 {
        self.data_size.unwrap_or(0)
    }

    pub fn clear_data_size(&mut self) {
        self.data_size = ::std::option::Option::None;
    }

    pub fn has_data_size(&self) -> bool {
        self.data_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_size(&mut self, v: u32) {
        self.data_size = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data_size",
            |m: &EosTxActionRequest| { &m.data_size },
            |m: &mut EosTxActionRequest| { &mut m.data_size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosTxActionRequest>(
            "EosTxActionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosTxActionRequest {
    const NAME: &'static str = "EosTxActionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.data_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data_size {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data_size {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosTxActionRequest {
        EosTxActionRequest::new()
    }

    fn clear(&mut self) {
        self.data_size = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosTxActionRequest {
        static instance: EosTxActionRequest = EosTxActionRequest {
            data_size: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosTxActionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosTxActionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosTxActionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosTxActionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosTxActionAck {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.common)
    pub common: ::protobuf::MessageField<eos_tx_action_ack::EosActionCommon>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.transfer)
    pub transfer: ::protobuf::MessageField<eos_tx_action_ack::EosActionTransfer>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.delegate)
    pub delegate: ::protobuf::MessageField<eos_tx_action_ack::EosActionDelegate>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.undelegate)
    pub undelegate: ::protobuf::MessageField<eos_tx_action_ack::EosActionUndelegate>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.refund)
    pub refund: ::protobuf::MessageField<eos_tx_action_ack::EosActionRefund>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.buy_ram)
    pub buy_ram: ::protobuf::MessageField<eos_tx_action_ack::EosActionBuyRam>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.buy_ram_bytes)
    pub buy_ram_bytes: ::protobuf::MessageField<eos_tx_action_ack::EosActionBuyRamBytes>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.sell_ram)
    pub sell_ram: ::protobuf::MessageField<eos_tx_action_ack::EosActionSellRam>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.vote_producer)
    pub vote_producer: ::protobuf::MessageField<eos_tx_action_ack::EosActionVoteProducer>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.update_auth)
    pub update_auth: ::protobuf::MessageField<eos_tx_action_ack::EosActionUpdateAuth>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.delete_auth)
    pub delete_auth: ::protobuf::MessageField<eos_tx_action_ack::EosActionDeleteAuth>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.link_auth)
    pub link_auth: ::protobuf::MessageField<eos_tx_action_ack::EosActionLinkAuth>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.unlink_auth)
    pub unlink_auth: ::protobuf::MessageField<eos_tx_action_ack::EosActionUnlinkAuth>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.new_account)
    pub new_account: ::protobuf::MessageField<eos_tx_action_ack::EosActionNewAccount>,
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.unknown)
    pub unknown: ::protobuf::MessageField<eos_tx_action_ack::EosActionUnknown>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosTxActionAck {
    fn default() -> &'a EosTxActionAck {
        <EosTxActionAck as ::protobuf::Message>::default_instance()
    }
}

impl EosTxActionAck {
    pub fn new() -> EosTxActionAck {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionCommon>(
            "common",
            |m: &EosTxActionAck| { &m.common },
            |m: &mut EosTxActionAck| { &mut m.common },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionTransfer>(
            "transfer",
            |m: &EosTxActionAck| { &m.transfer },
            |m: &mut EosTxActionAck| { &mut m.transfer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionDelegate>(
            "delegate",
            |m: &EosTxActionAck| { &m.delegate },
            |m: &mut EosTxActionAck| { &mut m.delegate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionUndelegate>(
            "undelegate",
            |m: &EosTxActionAck| { &m.undelegate },
            |m: &mut EosTxActionAck| { &mut m.undelegate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionRefund>(
            "refund",
            |m: &EosTxActionAck| { &m.refund },
            |m: &mut EosTxActionAck| { &mut m.refund },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionBuyRam>(
            "buy_ram",
            |m: &EosTxActionAck| { &m.buy_ram },
            |m: &mut EosTxActionAck| { &mut m.buy_ram },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionBuyRamBytes>(
            "buy_ram_bytes",
            |m: &EosTxActionAck| { &m.buy_ram_bytes },
            |m: &mut EosTxActionAck| { &mut m.buy_ram_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionSellRam>(
            "sell_ram",
            |m: &EosTxActionAck| { &m.sell_ram },
            |m: &mut EosTxActionAck| { &mut m.sell_ram },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionVoteProducer>(
            "vote_producer",
            |m: &EosTxActionAck| { &m.vote_producer },
            |m: &mut EosTxActionAck| { &mut m.vote_producer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionUpdateAuth>(
            "update_auth",
            |m: &EosTxActionAck| { &m.update_auth },
            |m: &mut EosTxActionAck| { &mut m.update_auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionDeleteAuth>(
            "delete_auth",
            |m: &EosTxActionAck| { &m.delete_auth },
            |m: &mut EosTxActionAck| { &mut m.delete_auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionLinkAuth>(
            "link_auth",
            |m: &EosTxActionAck| { &m.link_auth },
            |m: &mut EosTxActionAck| { &mut m.link_auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionUnlinkAuth>(
            "unlink_auth",
            |m: &EosTxActionAck| { &m.unlink_auth },
            |m: &mut EosTxActionAck| { &mut m.unlink_auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionNewAccount>(
            "new_account",
            |m: &EosTxActionAck| { &m.new_account },
            |m: &mut EosTxActionAck| { &mut m.new_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, eos_tx_action_ack::EosActionUnknown>(
            "unknown",
            |m: &EosTxActionAck| { &m.unknown },
            |m: &mut EosTxActionAck| { &mut m.unknown },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosTxActionAck>(
            "EosTxActionAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosTxActionAck {
    const NAME: &'static str = "EosTxActionAck";

    fn is_initialized(&self) -> bool {
        if self.common.is_none() {
            return false;
        }
        for v in &self.common {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transfer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.undelegate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.refund {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buy_ram {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buy_ram_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sell_ram {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vote_producer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_auth {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delete_auth {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.link_auth {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unlink_auth {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.new_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unknown {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.common)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transfer)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delegate)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.undelegate)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.refund)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buy_ram)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buy_ram_bytes)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sell_ram)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote_producer)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.update_auth)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.delete_auth)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.link_auth)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.unlink_auth)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.new_account)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.unknown)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.common.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.transfer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.delegate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.undelegate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.refund.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buy_ram.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buy_ram_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sell_ram.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.vote_producer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.update_auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.delete_auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.link_auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.unlink_auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.new_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.unknown.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.common.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.transfer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.delegate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.undelegate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.refund.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.buy_ram.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.buy_ram_bytes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.sell_ram.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.vote_producer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.update_auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.delete_auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.link_auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.unlink_auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.new_account.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.unknown.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosTxActionAck {
        EosTxActionAck::new()
    }

    fn clear(&mut self) {
        self.common.clear();
        self.transfer.clear();
        self.delegate.clear();
        self.undelegate.clear();
        self.refund.clear();
        self.buy_ram.clear();
        self.buy_ram_bytes.clear();
        self.sell_ram.clear();
        self.vote_producer.clear();
        self.update_auth.clear();
        self.delete_auth.clear();
        self.link_auth.clear();
        self.unlink_auth.clear();
        self.new_account.clear();
        self.unknown.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosTxActionAck {
        static instance: EosTxActionAck = EosTxActionAck {
            common: ::protobuf::MessageField::none(),
            transfer: ::protobuf::MessageField::none(),
            delegate: ::protobuf::MessageField::none(),
            undelegate: ::protobuf::MessageField::none(),
            refund: ::protobuf::MessageField::none(),
            buy_ram: ::protobuf::MessageField::none(),
            buy_ram_bytes: ::protobuf::MessageField::none(),
            sell_ram: ::protobuf::MessageField::none(),
            vote_producer: ::protobuf::MessageField::none(),
            update_auth: ::protobuf::MessageField::none(),
            delete_auth: ::protobuf::MessageField::none(),
            link_auth: ::protobuf::MessageField::none(),
            unlink_auth: ::protobuf::MessageField::none(),
            new_account: ::protobuf::MessageField::none(),
            unknown: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosTxActionAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosTxActionAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosTxActionAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosTxActionAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EosTxActionAck`
pub mod eos_tx_action_ack {
    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosAsset {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAsset.amount)
        pub amount: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAsset.symbol)
        pub symbol: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosAsset.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosAsset {
        fn default() -> &'a EosAsset {
            <EosAsset as ::protobuf::Message>::default_instance()
        }
    }

    impl EosAsset {
        pub fn new() -> EosAsset {
            ::std::default::Default::default()
        }

        // required sint64 amount = 1;

        pub fn amount(&self) -> i64 {
            self.amount.unwrap_or(0)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: i64) {
            self.amount = ::std::option::Option::Some(v);
        }

        // required uint64 symbol = 2;

        pub fn symbol(&self) -> u64 {
            self.symbol.unwrap_or(0)
        }

        pub fn clear_symbol(&mut self) {
            self.symbol = ::std::option::Option::None;
        }

        pub fn has_symbol(&self) -> bool {
            self.symbol.is_some()
        }

        // Param is passed by value, moved
        pub fn set_symbol(&mut self, v: u64) {
            self.symbol = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &EosAsset| { &m.amount },
                |m: &mut EosAsset| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "symbol",
                |m: &EosAsset| { &m.symbol },
                |m: &mut EosAsset| { &mut m.symbol },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosAsset>(
                "EosTxActionAck.EosAsset",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosAsset {
        const NAME: &'static str = "EosAsset";

        fn is_initialized(&self) -> bool {
            if self.amount.is_none() {
                return false;
            }
            if self.symbol.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.amount = ::std::option::Option::Some(is.read_sint64()?);
                    },
                    16 => {
                        self.symbol = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::sint64_size(1, v);
            }
            if let Some(v) = self.symbol {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.amount {
                os.write_sint64(1, v)?;
            }
            if let Some(v) = self.symbol {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosAsset {
            EosAsset::new()
        }

        fn clear(&mut self) {
            self.amount = ::std::option::Option::None;
            self.symbol = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosAsset {
            static instance: EosAsset = EosAsset {
                amount: ::std::option::Option::None,
                symbol: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosAsset {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosAsset").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosAsset {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosAsset {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosPermissionLevel {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel.actor)
        pub actor: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel.permission)
        pub permission: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosPermissionLevel {
        fn default() -> &'a EosPermissionLevel {
            <EosPermissionLevel as ::protobuf::Message>::default_instance()
        }
    }

    impl EosPermissionLevel {
        pub fn new() -> EosPermissionLevel {
            ::std::default::Default::default()
        }

        // required uint64 actor = 1;

        pub fn actor(&self) -> u64 {
            self.actor.unwrap_or(0)
        }

        pub fn clear_actor(&mut self) {
            self.actor = ::std::option::Option::None;
        }

        pub fn has_actor(&self) -> bool {
            self.actor.is_some()
        }

        // Param is passed by value, moved
        pub fn set_actor(&mut self, v: u64) {
            self.actor = ::std::option::Option::Some(v);
        }

        // required uint64 permission = 2;

        pub fn permission(&self) -> u64 {
            self.permission.unwrap_or(0)
        }

        pub fn clear_permission(&mut self) {
            self.permission = ::std::option::Option::None;
        }

        pub fn has_permission(&self) -> bool {
            self.permission.is_some()
        }

        // Param is passed by value, moved
        pub fn set_permission(&mut self, v: u64) {
            self.permission = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "actor",
                |m: &EosPermissionLevel| { &m.actor },
                |m: &mut EosPermissionLevel| { &mut m.actor },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "permission",
                |m: &EosPermissionLevel| { &m.permission },
                |m: &mut EosPermissionLevel| { &mut m.permission },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosPermissionLevel>(
                "EosTxActionAck.EosPermissionLevel",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosPermissionLevel {
        const NAME: &'static str = "EosPermissionLevel";

        fn is_initialized(&self) -> bool {
            if self.actor.is_none() {
                return false;
            }
            if self.permission.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.actor = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.permission = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.actor {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.permission {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.actor {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.permission {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosPermissionLevel {
            EosPermissionLevel::new()
        }

        fn clear(&mut self) {
            self.actor = ::std::option::Option::None;
            self.permission = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosPermissionLevel {
            static instance: EosPermissionLevel = EosPermissionLevel {
                actor: ::std::option::Option::None,
                permission: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosPermissionLevel {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosPermissionLevel").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosPermissionLevel {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosPermissionLevel {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosAuthorizationKey {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey.type)
        pub type_: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey.key)
        pub key: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey.address_n)
        pub address_n: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey.weight)
        pub weight: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosAuthorizationKey {
        fn default() -> &'a EosAuthorizationKey {
            <EosAuthorizationKey as ::protobuf::Message>::default_instance()
        }
    }

    impl EosAuthorizationKey {
        pub fn new() -> EosAuthorizationKey {
            ::std::default::Default::default()
        }

        // required uint32 type = 1;

        pub fn type_(&self) -> u32 {
            self.type_.unwrap_or(0)
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: u32) {
            self.type_ = ::std::option::Option::Some(v);
        }

        // optional bytes key = 2;

        pub fn key(&self) -> &[u8] {
            match self.key.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
            self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // required uint32 weight = 4;

        pub fn weight(&self) -> u32 {
            self.weight.unwrap_or(0)
        }

        pub fn clear_weight(&mut self) {
            self.weight = ::std::option::Option::None;
        }

        pub fn has_weight(&self) -> bool {
            self.weight.is_some()
        }

        // Param is passed by value, moved
        pub fn set_weight(&mut self, v: u32) {
            self.weight = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &EosAuthorizationKey| { &m.type_ },
                |m: &mut EosAuthorizationKey| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &EosAuthorizationKey| { &m.key },
                |m: &mut EosAuthorizationKey| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "address_n",
                |m: &EosAuthorizationKey| { &m.address_n },
                |m: &mut EosAuthorizationKey| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "weight",
                |m: &EosAuthorizationKey| { &m.weight },
                |m: &mut EosAuthorizationKey| { &mut m.weight },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosAuthorizationKey>(
                "EosTxActionAck.EosAuthorizationKey",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosAuthorizationKey {
        const NAME: &'static str = "EosAuthorizationKey";

        fn is_initialized(&self) -> bool {
            if self.type_.is_none() {
                return false;
            }
            if self.weight.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.key = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                    },
                    24 => {
                        self.address_n.push(is.read_uint32()?);
                    },
                    32 => {
                        self.weight = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            for value in &self.address_n {
                my_size += ::protobuf::rt::uint32_size(3, *value);
            };
            if let Some(v) = self.weight {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.key.as_ref() {
                os.write_bytes(2, v)?;
            }
            for v in &self.address_n {
                os.write_uint32(3, *v)?;
            };
            if let Some(v) = self.weight {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosAuthorizationKey {
            EosAuthorizationKey::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.key = ::std::option::Option::None;
            self.address_n.clear();
            self.weight = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosAuthorizationKey {
            static instance: EosAuthorizationKey = EosAuthorizationKey {
                type_: ::std::option::Option::None,
                key: ::std::option::Option::None,
                address_n: ::std::vec::Vec::new(),
                weight: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosAuthorizationKey {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosAuthorizationKey").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosAuthorizationKey {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosAuthorizationKey {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosAuthorizationAccount {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount.account)
        pub account: ::protobuf::MessageField<EosPermissionLevel>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount.weight)
        pub weight: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosAuthorizationAccount {
        fn default() -> &'a EosAuthorizationAccount {
            <EosAuthorizationAccount as ::protobuf::Message>::default_instance()
        }
    }

    impl EosAuthorizationAccount {
        pub fn new() -> EosAuthorizationAccount {
            ::std::default::Default::default()
        }

        // required uint32 weight = 2;

        pub fn weight(&self) -> u32 {
            self.weight.unwrap_or(0)
        }

        pub fn clear_weight(&mut self) {
            self.weight = ::std::option::Option::None;
        }

        pub fn has_weight(&self) -> bool {
            self.weight.is_some()
        }

        // Param is passed by value, moved
        pub fn set_weight(&mut self, v: u32) {
            self.weight = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosPermissionLevel>(
                "account",
                |m: &EosAuthorizationAccount| { &m.account },
                |m: &mut EosAuthorizationAccount| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "weight",
                |m: &EosAuthorizationAccount| { &m.weight },
                |m: &mut EosAuthorizationAccount| { &mut m.weight },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosAuthorizationAccount>(
                "EosTxActionAck.EosAuthorizationAccount",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosAuthorizationAccount {
        const NAME: &'static str = "EosAuthorizationAccount";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.weight.is_none() {
                return false;
            }
            for v in &self.account {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.account)?;
                    },
                    16 => {
                        self.weight = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.weight {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.weight {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosAuthorizationAccount {
            EosAuthorizationAccount::new()
        }

        fn clear(&mut self) {
            self.account.clear();
            self.weight = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosAuthorizationAccount {
            static instance: EosAuthorizationAccount = EosAuthorizationAccount {
                account: ::protobuf::MessageField::none(),
                weight: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosAuthorizationAccount {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosAuthorizationAccount").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosAuthorizationAccount {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosAuthorizationAccount {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosAuthorizationWait {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait.wait_sec)
        pub wait_sec: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait.weight)
        pub weight: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosAuthorizationWait {
        fn default() -> &'a EosAuthorizationWait {
            <EosAuthorizationWait as ::protobuf::Message>::default_instance()
        }
    }

    impl EosAuthorizationWait {
        pub fn new() -> EosAuthorizationWait {
            ::std::default::Default::default()
        }

        // required uint32 wait_sec = 1;

        pub fn wait_sec(&self) -> u32 {
            self.wait_sec.unwrap_or(0)
        }

        pub fn clear_wait_sec(&mut self) {
            self.wait_sec = ::std::option::Option::None;
        }

        pub fn has_wait_sec(&self) -> bool {
            self.wait_sec.is_some()
        }

        // Param is passed by value, moved
        pub fn set_wait_sec(&mut self, v: u32) {
            self.wait_sec = ::std::option::Option::Some(v);
        }

        // required uint32 weight = 2;

        pub fn weight(&self) -> u32 {
            self.weight.unwrap_or(0)
        }

        pub fn clear_weight(&mut self) {
            self.weight = ::std::option::Option::None;
        }

        pub fn has_weight(&self) -> bool {
            self.weight.is_some()
        }

        // Param is passed by value, moved
        pub fn set_weight(&mut self, v: u32) {
            self.weight = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "wait_sec",
                |m: &EosAuthorizationWait| { &m.wait_sec },
                |m: &mut EosAuthorizationWait| { &mut m.wait_sec },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "weight",
                |m: &EosAuthorizationWait| { &m.weight },
                |m: &mut EosAuthorizationWait| { &mut m.weight },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosAuthorizationWait>(
                "EosTxActionAck.EosAuthorizationWait",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosAuthorizationWait {
        const NAME: &'static str = "EosAuthorizationWait";

        fn is_initialized(&self) -> bool {
            if self.wait_sec.is_none() {
                return false;
            }
            if self.weight.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.wait_sec = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.weight = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.wait_sec {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.weight {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.wait_sec {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.weight {
                os.write_uint32(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosAuthorizationWait {
            EosAuthorizationWait::new()
        }

        fn clear(&mut self) {
            self.wait_sec = ::std::option::Option::None;
            self.weight = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosAuthorizationWait {
            static instance: EosAuthorizationWait = EosAuthorizationWait {
                wait_sec: ::std::option::Option::None,
                weight: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosAuthorizationWait {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosAuthorizationWait").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosAuthorizationWait {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosAuthorizationWait {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosAuthorization {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization.threshold)
        pub threshold: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization.keys)
        pub keys: ::std::vec::Vec<EosAuthorizationKey>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization.accounts)
        pub accounts: ::std::vec::Vec<EosAuthorizationAccount>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization.waits)
        pub waits: ::std::vec::Vec<EosAuthorizationWait>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosAuthorization {
        fn default() -> &'a EosAuthorization {
            <EosAuthorization as ::protobuf::Message>::default_instance()
        }
    }

    impl EosAuthorization {
        pub fn new() -> EosAuthorization {
            ::std::default::Default::default()
        }

        // required uint32 threshold = 1;

        pub fn threshold(&self) -> u32 {
            self.threshold.unwrap_or(0)
        }

        pub fn clear_threshold(&mut self) {
            self.threshold = ::std::option::Option::None;
        }

        pub fn has_threshold(&self) -> bool {
            self.threshold.is_some()
        }

        // Param is passed by value, moved
        pub fn set_threshold(&mut self, v: u32) {
            self.threshold = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "threshold",
                |m: &EosAuthorization| { &m.threshold },
                |m: &mut EosAuthorization| { &mut m.threshold },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "keys",
                |m: &EosAuthorization| { &m.keys },
                |m: &mut EosAuthorization| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "accounts",
                |m: &EosAuthorization| { &m.accounts },
                |m: &mut EosAuthorization| { &mut m.accounts },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "waits",
                |m: &EosAuthorization| { &m.waits },
                |m: &mut EosAuthorization| { &mut m.waits },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosAuthorization>(
                "EosTxActionAck.EosAuthorization",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosAuthorization {
        const NAME: &'static str = "EosAuthorization";

        fn is_initialized(&self) -> bool {
            if self.threshold.is_none() {
                return false;
            }
            for v in &self.keys {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.accounts {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.waits {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.threshold = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.keys.push(is.read_message()?);
                    },
                    26 => {
                        self.accounts.push(is.read_message()?);
                    },
                    34 => {
                        self.waits.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.threshold {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            for value in &self.keys {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.accounts {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            for value in &self.waits {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.threshold {
                os.write_uint32(1, v)?;
            }
            for v in &self.keys {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            for v in &self.accounts {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            for v in &self.waits {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosAuthorization {
            EosAuthorization::new()
        }

        fn clear(&mut self) {
            self.threshold = ::std::option::Option::None;
            self.keys.clear();
            self.accounts.clear();
            self.waits.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosAuthorization {
            static instance: EosAuthorization = EosAuthorization {
                threshold: ::std::option::Option::None,
                keys: ::std::vec::Vec::new(),
                accounts: ::std::vec::Vec::new(),
                waits: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosAuthorization {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosAuthorization").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosAuthorization {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosAuthorization {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionCommon {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon.name)
        pub name: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon.authorization)
        pub authorization: ::std::vec::Vec<EosPermissionLevel>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionCommon {
        fn default() -> &'a EosActionCommon {
            <EosActionCommon as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionCommon {
        pub fn new() -> EosActionCommon {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 name = 2;

        pub fn name(&self) -> u64 {
            self.name.unwrap_or(0)
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: u64) {
            self.name = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionCommon| { &m.account },
                |m: &mut EosActionCommon| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &EosActionCommon| { &m.name },
                |m: &mut EosActionCommon| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "authorization",
                |m: &EosActionCommon| { &m.authorization },
                |m: &mut EosActionCommon| { &mut m.authorization },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionCommon>(
                "EosTxActionAck.EosActionCommon",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionCommon {
        const NAME: &'static str = "EosActionCommon";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.name.is_none() {
                return false;
            }
            for v in &self.authorization {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.name = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        self.authorization.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.name {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            for value in &self.authorization {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.name {
                os.write_uint64(2, v)?;
            }
            for v in &self.authorization {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionCommon {
            EosActionCommon::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.authorization.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionCommon {
            static instance: EosActionCommon = EosActionCommon {
                account: ::std::option::Option::None,
                name: ::std::option::Option::None,
                authorization: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionCommon {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionCommon").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionCommon {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionCommon {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionTransfer {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.sender)
        pub sender: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.receiver)
        pub receiver: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.quantity)
        pub quantity: ::protobuf::MessageField<EosAsset>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.memo)
        pub memo: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionTransfer {
        fn default() -> &'a EosActionTransfer {
            <EosActionTransfer as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionTransfer {
        pub fn new() -> EosActionTransfer {
            ::std::default::Default::default()
        }

        // required uint64 sender = 1;

        pub fn sender(&self) -> u64 {
            self.sender.unwrap_or(0)
        }

        pub fn clear_sender(&mut self) {
            self.sender = ::std::option::Option::None;
        }

        pub fn has_sender(&self) -> bool {
            self.sender.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sender(&mut self, v: u64) {
            self.sender = ::std::option::Option::Some(v);
        }

        // required uint64 receiver = 2;

        pub fn receiver(&self) -> u64 {
            self.receiver.unwrap_or(0)
        }

        pub fn clear_receiver(&mut self) {
            self.receiver = ::std::option::Option::None;
        }

        pub fn has_receiver(&self) -> bool {
            self.receiver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_receiver(&mut self, v: u64) {
            self.receiver = ::std::option::Option::Some(v);
        }

        // required string memo = 4;

        pub fn memo(&self) -> &str {
            match self.memo.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_memo(&mut self) {
            self.memo = ::std::option::Option::None;
        }

        pub fn has_memo(&self) -> bool {
            self.memo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_memo(&mut self, v: ::std::string::String) {
            self.memo = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_memo(&mut self) -> &mut ::std::string::String {
            if self.memo.is_none() {
                self.memo = ::std::option::Option::Some(::std::string::String::new());
            }
            self.memo.as_mut().unwrap()
        }

        // Take field
        pub fn take_memo(&mut self) -> ::std::string::String {
            self.memo.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sender",
                |m: &EosActionTransfer| { &m.sender },
                |m: &mut EosActionTransfer| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "receiver",
                |m: &EosActionTransfer| { &m.receiver },
                |m: &mut EosActionTransfer| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "quantity",
                |m: &EosActionTransfer| { &m.quantity },
                |m: &mut EosActionTransfer| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "memo",
                |m: &EosActionTransfer| { &m.memo },
                |m: &mut EosActionTransfer| { &mut m.memo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionTransfer>(
                "EosTxActionAck.EosActionTransfer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionTransfer {
        const NAME: &'static str = "EosActionTransfer";

        fn is_initialized(&self) -> bool {
            if self.sender.is_none() {
                return false;
            }
            if self.receiver.is_none() {
                return false;
            }
            if self.quantity.is_none() {
                return false;
            }
            if self.memo.is_none() {
                return false;
            }
            for v in &self.quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sender = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.receiver = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.quantity)?;
                    },
                    34 => {
                        self.memo = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sender {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.receiver {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.memo.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sender {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.receiver {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.memo.as_ref() {
                os.write_string(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionTransfer {
            EosActionTransfer::new()
        }

        fn clear(&mut self) {
            self.sender = ::std::option::Option::None;
            self.receiver = ::std::option::Option::None;
            self.quantity.clear();
            self.memo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionTransfer {
            static instance: EosActionTransfer = EosActionTransfer {
                sender: ::std::option::Option::None,
                receiver: ::std::option::Option::None,
                quantity: ::protobuf::MessageField::none(),
                memo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionTransfer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionTransfer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionTransfer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionTransfer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionDelegate {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.sender)
        pub sender: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.receiver)
        pub receiver: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.net_quantity)
        pub net_quantity: ::protobuf::MessageField<EosAsset>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.cpu_quantity)
        pub cpu_quantity: ::protobuf::MessageField<EosAsset>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.transfer)
        pub transfer: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionDelegate {
        fn default() -> &'a EosActionDelegate {
            <EosActionDelegate as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionDelegate {
        pub fn new() -> EosActionDelegate {
            ::std::default::Default::default()
        }

        // required uint64 sender = 1;

        pub fn sender(&self) -> u64 {
            self.sender.unwrap_or(0)
        }

        pub fn clear_sender(&mut self) {
            self.sender = ::std::option::Option::None;
        }

        pub fn has_sender(&self) -> bool {
            self.sender.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sender(&mut self, v: u64) {
            self.sender = ::std::option::Option::Some(v);
        }

        // required uint64 receiver = 2;

        pub fn receiver(&self) -> u64 {
            self.receiver.unwrap_or(0)
        }

        pub fn clear_receiver(&mut self) {
            self.receiver = ::std::option::Option::None;
        }

        pub fn has_receiver(&self) -> bool {
            self.receiver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_receiver(&mut self, v: u64) {
            self.receiver = ::std::option::Option::Some(v);
        }

        // required bool transfer = 5;

        pub fn transfer(&self) -> bool {
            self.transfer.unwrap_or(false)
        }

        pub fn clear_transfer(&mut self) {
            self.transfer = ::std::option::Option::None;
        }

        pub fn has_transfer(&self) -> bool {
            self.transfer.is_some()
        }

        // Param is passed by value, moved
        pub fn set_transfer(&mut self, v: bool) {
            self.transfer = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sender",
                |m: &EosActionDelegate| { &m.sender },
                |m: &mut EosActionDelegate| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "receiver",
                |m: &EosActionDelegate| { &m.receiver },
                |m: &mut EosActionDelegate| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "net_quantity",
                |m: &EosActionDelegate| { &m.net_quantity },
                |m: &mut EosActionDelegate| { &mut m.net_quantity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "cpu_quantity",
                |m: &EosActionDelegate| { &m.cpu_quantity },
                |m: &mut EosActionDelegate| { &mut m.cpu_quantity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "transfer",
                |m: &EosActionDelegate| { &m.transfer },
                |m: &mut EosActionDelegate| { &mut m.transfer },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionDelegate>(
                "EosTxActionAck.EosActionDelegate",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionDelegate {
        const NAME: &'static str = "EosActionDelegate";

        fn is_initialized(&self) -> bool {
            if self.sender.is_none() {
                return false;
            }
            if self.receiver.is_none() {
                return false;
            }
            if self.net_quantity.is_none() {
                return false;
            }
            if self.cpu_quantity.is_none() {
                return false;
            }
            if self.transfer.is_none() {
                return false;
            }
            for v in &self.net_quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.cpu_quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sender = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.receiver = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.net_quantity)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.cpu_quantity)?;
                    },
                    40 => {
                        self.transfer = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sender {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.receiver {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.net_quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.cpu_quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.transfer {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sender {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.receiver {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.net_quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.cpu_quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            if let Some(v) = self.transfer {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionDelegate {
            EosActionDelegate::new()
        }

        fn clear(&mut self) {
            self.sender = ::std::option::Option::None;
            self.receiver = ::std::option::Option::None;
            self.net_quantity.clear();
            self.cpu_quantity.clear();
            self.transfer = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionDelegate {
            static instance: EosActionDelegate = EosActionDelegate {
                sender: ::std::option::Option::None,
                receiver: ::std::option::Option::None,
                net_quantity: ::protobuf::MessageField::none(),
                cpu_quantity: ::protobuf::MessageField::none(),
                transfer: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionDelegate {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionDelegate").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionDelegate {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionDelegate {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionUndelegate {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate.sender)
        pub sender: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate.receiver)
        pub receiver: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate.net_quantity)
        pub net_quantity: ::protobuf::MessageField<EosAsset>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate.cpu_quantity)
        pub cpu_quantity: ::protobuf::MessageField<EosAsset>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionUndelegate {
        fn default() -> &'a EosActionUndelegate {
            <EosActionUndelegate as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionUndelegate {
        pub fn new() -> EosActionUndelegate {
            ::std::default::Default::default()
        }

        // required uint64 sender = 1;

        pub fn sender(&self) -> u64 {
            self.sender.unwrap_or(0)
        }

        pub fn clear_sender(&mut self) {
            self.sender = ::std::option::Option::None;
        }

        pub fn has_sender(&self) -> bool {
            self.sender.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sender(&mut self, v: u64) {
            self.sender = ::std::option::Option::Some(v);
        }

        // required uint64 receiver = 2;

        pub fn receiver(&self) -> u64 {
            self.receiver.unwrap_or(0)
        }

        pub fn clear_receiver(&mut self) {
            self.receiver = ::std::option::Option::None;
        }

        pub fn has_receiver(&self) -> bool {
            self.receiver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_receiver(&mut self, v: u64) {
            self.receiver = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sender",
                |m: &EosActionUndelegate| { &m.sender },
                |m: &mut EosActionUndelegate| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "receiver",
                |m: &EosActionUndelegate| { &m.receiver },
                |m: &mut EosActionUndelegate| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "net_quantity",
                |m: &EosActionUndelegate| { &m.net_quantity },
                |m: &mut EosActionUndelegate| { &mut m.net_quantity },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "cpu_quantity",
                |m: &EosActionUndelegate| { &m.cpu_quantity },
                |m: &mut EosActionUndelegate| { &mut m.cpu_quantity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionUndelegate>(
                "EosTxActionAck.EosActionUndelegate",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionUndelegate {
        const NAME: &'static str = "EosActionUndelegate";

        fn is_initialized(&self) -> bool {
            if self.sender.is_none() {
                return false;
            }
            if self.receiver.is_none() {
                return false;
            }
            if self.net_quantity.is_none() {
                return false;
            }
            if self.cpu_quantity.is_none() {
                return false;
            }
            for v in &self.net_quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.cpu_quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.sender = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.receiver = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.net_quantity)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.cpu_quantity)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.sender {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.receiver {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.net_quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.cpu_quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.sender {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.receiver {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.net_quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.cpu_quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionUndelegate {
            EosActionUndelegate::new()
        }

        fn clear(&mut self) {
            self.sender = ::std::option::Option::None;
            self.receiver = ::std::option::Option::None;
            self.net_quantity.clear();
            self.cpu_quantity.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionUndelegate {
            static instance: EosActionUndelegate = EosActionUndelegate {
                sender: ::std::option::Option::None,
                receiver: ::std::option::Option::None,
                net_quantity: ::protobuf::MessageField::none(),
                cpu_quantity: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionUndelegate {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionUndelegate").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionUndelegate {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionUndelegate {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionRefund {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund.owner)
        pub owner: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionRefund {
        fn default() -> &'a EosActionRefund {
            <EosActionRefund as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionRefund {
        pub fn new() -> EosActionRefund {
            ::std::default::Default::default()
        }

        // required uint64 owner = 1;

        pub fn owner(&self) -> u64 {
            self.owner.unwrap_or(0)
        }

        pub fn clear_owner(&mut self) {
            self.owner = ::std::option::Option::None;
        }

        pub fn has_owner(&self) -> bool {
            self.owner.is_some()
        }

        // Param is passed by value, moved
        pub fn set_owner(&mut self, v: u64) {
            self.owner = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "owner",
                |m: &EosActionRefund| { &m.owner },
                |m: &mut EosActionRefund| { &mut m.owner },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionRefund>(
                "EosTxActionAck.EosActionRefund",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionRefund {
        const NAME: &'static str = "EosActionRefund";

        fn is_initialized(&self) -> bool {
            if self.owner.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.owner = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.owner {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.owner {
                os.write_uint64(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionRefund {
            EosActionRefund::new()
        }

        fn clear(&mut self) {
            self.owner = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionRefund {
            static instance: EosActionRefund = EosActionRefund {
                owner: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionRefund {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionRefund").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionRefund {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionRefund {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionBuyRam {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam.payer)
        pub payer: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam.receiver)
        pub receiver: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam.quantity)
        pub quantity: ::protobuf::MessageField<EosAsset>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionBuyRam {
        fn default() -> &'a EosActionBuyRam {
            <EosActionBuyRam as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionBuyRam {
        pub fn new() -> EosActionBuyRam {
            ::std::default::Default::default()
        }

        // required uint64 payer = 1;

        pub fn payer(&self) -> u64 {
            self.payer.unwrap_or(0)
        }

        pub fn clear_payer(&mut self) {
            self.payer = ::std::option::Option::None;
        }

        pub fn has_payer(&self) -> bool {
            self.payer.is_some()
        }

        // Param is passed by value, moved
        pub fn set_payer(&mut self, v: u64) {
            self.payer = ::std::option::Option::Some(v);
        }

        // required uint64 receiver = 2;

        pub fn receiver(&self) -> u64 {
            self.receiver.unwrap_or(0)
        }

        pub fn clear_receiver(&mut self) {
            self.receiver = ::std::option::Option::None;
        }

        pub fn has_receiver(&self) -> bool {
            self.receiver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_receiver(&mut self, v: u64) {
            self.receiver = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "payer",
                |m: &EosActionBuyRam| { &m.payer },
                |m: &mut EosActionBuyRam| { &mut m.payer },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "receiver",
                |m: &EosActionBuyRam| { &m.receiver },
                |m: &mut EosActionBuyRam| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAsset>(
                "quantity",
                |m: &EosActionBuyRam| { &m.quantity },
                |m: &mut EosActionBuyRam| { &mut m.quantity },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionBuyRam>(
                "EosTxActionAck.EosActionBuyRam",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionBuyRam {
        const NAME: &'static str = "EosActionBuyRam";

        fn is_initialized(&self) -> bool {
            if self.payer.is_none() {
                return false;
            }
            if self.receiver.is_none() {
                return false;
            }
            if self.quantity.is_none() {
                return false;
            }
            for v in &self.quantity {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.payer = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.receiver = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.quantity)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.payer {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.receiver {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.quantity.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.payer {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.receiver {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.quantity.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionBuyRam {
            EosActionBuyRam::new()
        }

        fn clear(&mut self) {
            self.payer = ::std::option::Option::None;
            self.receiver = ::std::option::Option::None;
            self.quantity.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionBuyRam {
            static instance: EosActionBuyRam = EosActionBuyRam {
                payer: ::std::option::Option::None,
                receiver: ::std::option::Option::None,
                quantity: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionBuyRam {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionBuyRam").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionBuyRam {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionBuyRam {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionBuyRamBytes {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes.payer)
        pub payer: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes.receiver)
        pub receiver: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes.bytes)
        pub bytes: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionBuyRamBytes {
        fn default() -> &'a EosActionBuyRamBytes {
            <EosActionBuyRamBytes as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionBuyRamBytes {
        pub fn new() -> EosActionBuyRamBytes {
            ::std::default::Default::default()
        }

        // required uint64 payer = 1;

        pub fn payer(&self) -> u64 {
            self.payer.unwrap_or(0)
        }

        pub fn clear_payer(&mut self) {
            self.payer = ::std::option::Option::None;
        }

        pub fn has_payer(&self) -> bool {
            self.payer.is_some()
        }

        // Param is passed by value, moved
        pub fn set_payer(&mut self, v: u64) {
            self.payer = ::std::option::Option::Some(v);
        }

        // required uint64 receiver = 2;

        pub fn receiver(&self) -> u64 {
            self.receiver.unwrap_or(0)
        }

        pub fn clear_receiver(&mut self) {
            self.receiver = ::std::option::Option::None;
        }

        pub fn has_receiver(&self) -> bool {
            self.receiver.is_some()
        }

        // Param is passed by value, moved
        pub fn set_receiver(&mut self, v: u64) {
            self.receiver = ::std::option::Option::Some(v);
        }

        // required uint32 bytes = 3;

        pub fn bytes(&self) -> u32 {
            self.bytes.unwrap_or(0)
        }

        pub fn clear_bytes(&mut self) {
            self.bytes = ::std::option::Option::None;
        }

        pub fn has_bytes(&self) -> bool {
            self.bytes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bytes(&mut self, v: u32) {
            self.bytes = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "payer",
                |m: &EosActionBuyRamBytes| { &m.payer },
                |m: &mut EosActionBuyRamBytes| { &mut m.payer },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "receiver",
                |m: &EosActionBuyRamBytes| { &m.receiver },
                |m: &mut EosActionBuyRamBytes| { &mut m.receiver },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "bytes",
                |m: &EosActionBuyRamBytes| { &m.bytes },
                |m: &mut EosActionBuyRamBytes| { &mut m.bytes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionBuyRamBytes>(
                "EosTxActionAck.EosActionBuyRamBytes",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionBuyRamBytes {
        const NAME: &'static str = "EosActionBuyRamBytes";

        fn is_initialized(&self) -> bool {
            if self.payer.is_none() {
                return false;
            }
            if self.receiver.is_none() {
                return false;
            }
            if self.bytes.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.payer = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.receiver = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.bytes = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.payer {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.receiver {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.bytes {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.payer {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.receiver {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.bytes {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionBuyRamBytes {
            EosActionBuyRamBytes::new()
        }

        fn clear(&mut self) {
            self.payer = ::std::option::Option::None;
            self.receiver = ::std::option::Option::None;
            self.bytes = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionBuyRamBytes {
            static instance: EosActionBuyRamBytes = EosActionBuyRamBytes {
                payer: ::std::option::Option::None,
                receiver: ::std::option::Option::None,
                bytes: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionBuyRamBytes {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionBuyRamBytes").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionBuyRamBytes {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionBuyRamBytes {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionSellRam {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam.bytes)
        pub bytes: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionSellRam {
        fn default() -> &'a EosActionSellRam {
            <EosActionSellRam as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionSellRam {
        pub fn new() -> EosActionSellRam {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 bytes = 2;

        pub fn bytes(&self) -> u64 {
            self.bytes.unwrap_or(0)
        }

        pub fn clear_bytes(&mut self) {
            self.bytes = ::std::option::Option::None;
        }

        pub fn has_bytes(&self) -> bool {
            self.bytes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bytes(&mut self, v: u64) {
            self.bytes = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionSellRam| { &m.account },
                |m: &mut EosActionSellRam| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "bytes",
                |m: &EosActionSellRam| { &m.bytes },
                |m: &mut EosActionSellRam| { &mut m.bytes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionSellRam>(
                "EosTxActionAck.EosActionSellRam",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionSellRam {
        const NAME: &'static str = "EosActionSellRam";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.bytes.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.bytes = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.bytes {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.bytes {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionSellRam {
            EosActionSellRam::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.bytes = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionSellRam {
            static instance: EosActionSellRam = EosActionSellRam {
                account: ::std::option::Option::None,
                bytes: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionSellRam {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionSellRam").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionSellRam {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionSellRam {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionVoteProducer {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer.voter)
        pub voter: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer.proxy)
        pub proxy: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer.producers)
        pub producers: ::std::vec::Vec<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionVoteProducer {
        fn default() -> &'a EosActionVoteProducer {
            <EosActionVoteProducer as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionVoteProducer {
        pub fn new() -> EosActionVoteProducer {
            ::std::default::Default::default()
        }

        // required uint64 voter = 1;

        pub fn voter(&self) -> u64 {
            self.voter.unwrap_or(0)
        }

        pub fn clear_voter(&mut self) {
            self.voter = ::std::option::Option::None;
        }

        pub fn has_voter(&self) -> bool {
            self.voter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_voter(&mut self, v: u64) {
            self.voter = ::std::option::Option::Some(v);
        }

        // required uint64 proxy = 2;

        pub fn proxy(&self) -> u64 {
            self.proxy.unwrap_or(0)
        }

        pub fn clear_proxy(&mut self) {
            self.proxy = ::std::option::Option::None;
        }

        pub fn has_proxy(&self) -> bool {
            self.proxy.is_some()
        }

        // Param is passed by value, moved
        pub fn set_proxy(&mut self, v: u64) {
            self.proxy = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "voter",
                |m: &EosActionVoteProducer| { &m.voter },
                |m: &mut EosActionVoteProducer| { &mut m.voter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "proxy",
                |m: &EosActionVoteProducer| { &m.proxy },
                |m: &mut EosActionVoteProducer| { &mut m.proxy },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "producers",
                |m: &EosActionVoteProducer| { &m.producers },
                |m: &mut EosActionVoteProducer| { &mut m.producers },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionVoteProducer>(
                "EosTxActionAck.EosActionVoteProducer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionVoteProducer {
        const NAME: &'static str = "EosActionVoteProducer";

        fn is_initialized(&self) -> bool {
            if self.voter.is_none() {
                return false;
            }
            if self.proxy.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.voter = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.proxy = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        is.read_repeated_packed_uint64_into(&mut self.producers)?;
                    },
                    24 => {
                        self.producers.push(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.voter {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.proxy {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            for value in &self.producers {
                my_size += ::protobuf::rt::uint64_size(3, *value);
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.voter {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.proxy {
                os.write_uint64(2, v)?;
            }
            for v in &self.producers {
                os.write_uint64(3, *v)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionVoteProducer {
            EosActionVoteProducer::new()
        }

        fn clear(&mut self) {
            self.voter = ::std::option::Option::None;
            self.proxy = ::std::option::Option::None;
            self.producers.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionVoteProducer {
            static instance: EosActionVoteProducer = EosActionVoteProducer {
                voter: ::std::option::Option::None,
                proxy: ::std::option::Option::None,
                producers: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionVoteProducer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionVoteProducer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionVoteProducer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionVoteProducer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionUpdateAuth {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth.permission)
        pub permission: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth.parent)
        pub parent: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth.auth)
        pub auth: ::protobuf::MessageField<EosAuthorization>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionUpdateAuth {
        fn default() -> &'a EosActionUpdateAuth {
            <EosActionUpdateAuth as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionUpdateAuth {
        pub fn new() -> EosActionUpdateAuth {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 permission = 2;

        pub fn permission(&self) -> u64 {
            self.permission.unwrap_or(0)
        }

        pub fn clear_permission(&mut self) {
            self.permission = ::std::option::Option::None;
        }

        pub fn has_permission(&self) -> bool {
            self.permission.is_some()
        }

        // Param is passed by value, moved
        pub fn set_permission(&mut self, v: u64) {
            self.permission = ::std::option::Option::Some(v);
        }

        // required uint64 parent = 3;

        pub fn parent(&self) -> u64 {
            self.parent.unwrap_or(0)
        }

        pub fn clear_parent(&mut self) {
            self.parent = ::std::option::Option::None;
        }

        pub fn has_parent(&self) -> bool {
            self.parent.is_some()
        }

        // Param is passed by value, moved
        pub fn set_parent(&mut self, v: u64) {
            self.parent = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionUpdateAuth| { &m.account },
                |m: &mut EosActionUpdateAuth| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "permission",
                |m: &EosActionUpdateAuth| { &m.permission },
                |m: &mut EosActionUpdateAuth| { &mut m.permission },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "parent",
                |m: &EosActionUpdateAuth| { &m.parent },
                |m: &mut EosActionUpdateAuth| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAuthorization>(
                "auth",
                |m: &EosActionUpdateAuth| { &m.auth },
                |m: &mut EosActionUpdateAuth| { &mut m.auth },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionUpdateAuth>(
                "EosTxActionAck.EosActionUpdateAuth",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionUpdateAuth {
        const NAME: &'static str = "EosActionUpdateAuth";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.permission.is_none() {
                return false;
            }
            if self.parent.is_none() {
                return false;
            }
            if self.auth.is_none() {
                return false;
            }
            for v in &self.auth {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.permission = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.parent = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.permission {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.parent {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.auth.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.permission {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.parent {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.auth.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionUpdateAuth {
            EosActionUpdateAuth::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.permission = ::std::option::Option::None;
            self.parent = ::std::option::Option::None;
            self.auth.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionUpdateAuth {
            static instance: EosActionUpdateAuth = EosActionUpdateAuth {
                account: ::std::option::Option::None,
                permission: ::std::option::Option::None,
                parent: ::std::option::Option::None,
                auth: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionUpdateAuth {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionUpdateAuth").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionUpdateAuth {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionUpdateAuth {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionDeleteAuth {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth.permission)
        pub permission: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionDeleteAuth {
        fn default() -> &'a EosActionDeleteAuth {
            <EosActionDeleteAuth as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionDeleteAuth {
        pub fn new() -> EosActionDeleteAuth {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 permission = 2;

        pub fn permission(&self) -> u64 {
            self.permission.unwrap_or(0)
        }

        pub fn clear_permission(&mut self) {
            self.permission = ::std::option::Option::None;
        }

        pub fn has_permission(&self) -> bool {
            self.permission.is_some()
        }

        // Param is passed by value, moved
        pub fn set_permission(&mut self, v: u64) {
            self.permission = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionDeleteAuth| { &m.account },
                |m: &mut EosActionDeleteAuth| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "permission",
                |m: &EosActionDeleteAuth| { &m.permission },
                |m: &mut EosActionDeleteAuth| { &mut m.permission },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionDeleteAuth>(
                "EosTxActionAck.EosActionDeleteAuth",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionDeleteAuth {
        const NAME: &'static str = "EosActionDeleteAuth";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.permission.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.permission = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.permission {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.permission {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionDeleteAuth {
            EosActionDeleteAuth::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.permission = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionDeleteAuth {
            static instance: EosActionDeleteAuth = EosActionDeleteAuth {
                account: ::std::option::Option::None,
                permission: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionDeleteAuth {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionDeleteAuth").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionDeleteAuth {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionDeleteAuth {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionLinkAuth {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth.code)
        pub code: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth.type)
        pub type_: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth.requirement)
        pub requirement: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionLinkAuth {
        fn default() -> &'a EosActionLinkAuth {
            <EosActionLinkAuth as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionLinkAuth {
        pub fn new() -> EosActionLinkAuth {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 code = 2;

        pub fn code(&self) -> u64 {
            self.code.unwrap_or(0)
        }

        pub fn clear_code(&mut self) {
            self.code = ::std::option::Option::None;
        }

        pub fn has_code(&self) -> bool {
            self.code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_code(&mut self, v: u64) {
            self.code = ::std::option::Option::Some(v);
        }

        // required uint64 type = 3;

        pub fn type_(&self) -> u64 {
            self.type_.unwrap_or(0)
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: u64) {
            self.type_ = ::std::option::Option::Some(v);
        }

        // required uint64 requirement = 4;

        pub fn requirement(&self) -> u64 {
            self.requirement.unwrap_or(0)
        }

        pub fn clear_requirement(&mut self) {
            self.requirement = ::std::option::Option::None;
        }

        pub fn has_requirement(&self) -> bool {
            self.requirement.is_some()
        }

        // Param is passed by value, moved
        pub fn set_requirement(&mut self, v: u64) {
            self.requirement = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionLinkAuth| { &m.account },
                |m: &mut EosActionLinkAuth| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "code",
                |m: &EosActionLinkAuth| { &m.code },
                |m: &mut EosActionLinkAuth| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &EosActionLinkAuth| { &m.type_ },
                |m: &mut EosActionLinkAuth| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "requirement",
                |m: &EosActionLinkAuth| { &m.requirement },
                |m: &mut EosActionLinkAuth| { &mut m.requirement },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionLinkAuth>(
                "EosTxActionAck.EosActionLinkAuth",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionLinkAuth {
        const NAME: &'static str = "EosActionLinkAuth";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.code.is_none() {
                return false;
            }
            if self.type_.is_none() {
                return false;
            }
            if self.requirement.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.code = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.type_ = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.requirement = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.code {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.requirement {
                my_size += ::protobuf::rt::uint64_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.code {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.type_ {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.requirement {
                os.write_uint64(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionLinkAuth {
            EosActionLinkAuth::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.code = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.requirement = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionLinkAuth {
            static instance: EosActionLinkAuth = EosActionLinkAuth {
                account: ::std::option::Option::None,
                code: ::std::option::Option::None,
                type_: ::std::option::Option::None,
                requirement: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionLinkAuth {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionLinkAuth").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionLinkAuth {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionLinkAuth {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionUnlinkAuth {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth.account)
        pub account: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth.code)
        pub code: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth.type)
        pub type_: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionUnlinkAuth {
        fn default() -> &'a EosActionUnlinkAuth {
            <EosActionUnlinkAuth as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionUnlinkAuth {
        pub fn new() -> EosActionUnlinkAuth {
            ::std::default::Default::default()
        }

        // required uint64 account = 1;

        pub fn account(&self) -> u64 {
            self.account.unwrap_or(0)
        }

        pub fn clear_account(&mut self) {
            self.account = ::std::option::Option::None;
        }

        pub fn has_account(&self) -> bool {
            self.account.is_some()
        }

        // Param is passed by value, moved
        pub fn set_account(&mut self, v: u64) {
            self.account = ::std::option::Option::Some(v);
        }

        // required uint64 code = 2;

        pub fn code(&self) -> u64 {
            self.code.unwrap_or(0)
        }

        pub fn clear_code(&mut self) {
            self.code = ::std::option::Option::None;
        }

        pub fn has_code(&self) -> bool {
            self.code.is_some()
        }

        // Param is passed by value, moved
        pub fn set_code(&mut self, v: u64) {
            self.code = ::std::option::Option::Some(v);
        }

        // required uint64 type = 3;

        pub fn type_(&self) -> u64 {
            self.type_.unwrap_or(0)
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: u64) {
            self.type_ = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "account",
                |m: &EosActionUnlinkAuth| { &m.account },
                |m: &mut EosActionUnlinkAuth| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "code",
                |m: &EosActionUnlinkAuth| { &m.code },
                |m: &mut EosActionUnlinkAuth| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &EosActionUnlinkAuth| { &m.type_ },
                |m: &mut EosActionUnlinkAuth| { &mut m.type_ },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionUnlinkAuth>(
                "EosTxActionAck.EosActionUnlinkAuth",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionUnlinkAuth {
        const NAME: &'static str = "EosActionUnlinkAuth";

        fn is_initialized(&self) -> bool {
            if self.account.is_none() {
                return false;
            }
            if self.code.is_none() {
                return false;
            }
            if self.type_.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.account = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.code = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.type_ = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.account {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.code {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.account {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.code {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.type_ {
                os.write_uint64(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionUnlinkAuth {
            EosActionUnlinkAuth::new()
        }

        fn clear(&mut self) {
            self.account = ::std::option::Option::None;
            self.code = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionUnlinkAuth {
            static instance: EosActionUnlinkAuth = EosActionUnlinkAuth {
                account: ::std::option::Option::None,
                code: ::std::option::Option::None,
                type_: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionUnlinkAuth {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionUnlinkAuth").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionUnlinkAuth {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionUnlinkAuth {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionNewAccount {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount.creator)
        pub creator: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount.name)
        pub name: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount.owner)
        pub owner: ::protobuf::MessageField<EosAuthorization>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount.active)
        pub active: ::protobuf::MessageField<EosAuthorization>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionNewAccount {
        fn default() -> &'a EosActionNewAccount {
            <EosActionNewAccount as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionNewAccount {
        pub fn new() -> EosActionNewAccount {
            ::std::default::Default::default()
        }

        // required uint64 creator = 1;

        pub fn creator(&self) -> u64 {
            self.creator.unwrap_or(0)
        }

        pub fn clear_creator(&mut self) {
            self.creator = ::std::option::Option::None;
        }

        pub fn has_creator(&self) -> bool {
            self.creator.is_some()
        }

        // Param is passed by value, moved
        pub fn set_creator(&mut self, v: u64) {
            self.creator = ::std::option::Option::Some(v);
        }

        // required uint64 name = 2;

        pub fn name(&self) -> u64 {
            self.name.unwrap_or(0)
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: u64) {
            self.name = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "creator",
                |m: &EosActionNewAccount| { &m.creator },
                |m: &mut EosActionNewAccount| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &EosActionNewAccount| { &m.name },
                |m: &mut EosActionNewAccount| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAuthorization>(
                "owner",
                |m: &EosActionNewAccount| { &m.owner },
                |m: &mut EosActionNewAccount| { &mut m.owner },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EosAuthorization>(
                "active",
                |m: &EosActionNewAccount| { &m.active },
                |m: &mut EosActionNewAccount| { &mut m.active },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionNewAccount>(
                "EosTxActionAck.EosActionNewAccount",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionNewAccount {
        const NAME: &'static str = "EosActionNewAccount";

        fn is_initialized(&self) -> bool {
            if self.creator.is_none() {
                return false;
            }
            if self.name.is_none() {
                return false;
            }
            if self.owner.is_none() {
                return false;
            }
            if self.active.is_none() {
                return false;
            }
            for v in &self.owner {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.active {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.creator = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.name = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.owner)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.active)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.creator {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.name {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.owner.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.active.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.creator {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.name {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.owner.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            }
            if let Some(v) = self.active.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionNewAccount {
            EosActionNewAccount::new()
        }

        fn clear(&mut self) {
            self.creator = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.owner.clear();
            self.active.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionNewAccount {
            static instance: EosActionNewAccount = EosActionNewAccount {
                creator: ::std::option::Option::None,
                name: ::std::option::Option::None,
                owner: ::protobuf::MessageField::none(),
                active: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionNewAccount {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionNewAccount").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionNewAccount {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionNewAccount {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct EosActionUnknown {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown.data_size)
        pub data_size: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown.data_chunk)
        pub data_chunk: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a EosActionUnknown {
        fn default() -> &'a EosActionUnknown {
            <EosActionUnknown as ::protobuf::Message>::default_instance()
        }
    }

    impl EosActionUnknown {
        pub fn new() -> EosActionUnknown {
            ::std::default::Default::default()
        }

        // required uint32 data_size = 1;

        pub fn data_size(&self) -> u32 {
            self.data_size.unwrap_or(0)
        }

        pub fn clear_data_size(&mut self) {
            self.data_size = ::std::option::Option::None;
        }

        pub fn has_data_size(&self) -> bool {
            self.data_size.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data_size(&mut self, v: u32) {
            self.data_size = ::std::option::Option::Some(v);
        }

        // required bytes data_chunk = 2;

        pub fn data_chunk(&self) -> &[u8] {
            match self.data_chunk.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data_chunk(&mut self) {
            self.data_chunk = ::std::option::Option::None;
        }

        pub fn has_data_chunk(&self) -> bool {
            self.data_chunk.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data_chunk(&mut self, v: ::std::vec::Vec<u8>) {
            self.data_chunk = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data_chunk.is_none() {
                self.data_chunk = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.data_chunk.as_mut().unwrap()
        }

        // Take field
        pub fn take_data_chunk(&mut self) -> ::std::vec::Vec<u8> {
            self.data_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data_size",
                |m: &EosActionUnknown| { &m.data_size },
                |m: &mut EosActionUnknown| { &mut m.data_size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data_chunk",
                |m: &EosActionUnknown| { &m.data_chunk },
                |m: &mut EosActionUnknown| { &mut m.data_chunk },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosActionUnknown>(
                "EosTxActionAck.EosActionUnknown",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for EosActionUnknown {
        const NAME: &'static str = "EosActionUnknown";

        fn is_initialized(&self) -> bool {
            if self.data_size.is_none() {
                return false;
            }
            if self.data_chunk.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.data_size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.data_chunk = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.data_size {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.data_chunk.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.data_size {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.data_chunk.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> EosActionUnknown {
            EosActionUnknown::new()
        }

        fn clear(&mut self) {
            self.data_size = ::std::option::Option::None;
            self.data_chunk = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static EosActionUnknown {
            static instance: EosActionUnknown = EosActionUnknown {
                data_size: ::std::option::Option::None,
                data_chunk: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for EosActionUnknown {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("EosTxActionAck.EosActionUnknown").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for EosActionUnknown {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for EosActionUnknown {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.eos.EosSignedTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EosSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.eos.EosSignedTx.signature)
    pub signature: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.eos.EosSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EosSignedTx {
    fn default() -> &'a EosSignedTx {
        <EosSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl EosSignedTx {
    pub fn new() -> EosSignedTx {
        ::std::default::Default::default()
    }

    // required string signature = 1;

    pub fn signature(&self) -> &str {
        match self.signature.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::string::String::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        self.signature.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &EosSignedTx| { &m.signature },
            |m: &mut EosSignedTx| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EosSignedTx>(
            "EosSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EosSignedTx {
    const NAME: &'static str = "EosSignedTx";

    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EosSignedTx {
        EosSignedTx::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EosSignedTx {
        static instance: EosSignedTx = EosSignedTx {
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EosSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EosSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EosSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EosSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12messages-eos.proto\x12\x16hw.trezor.messages.eos\"m\n\x0fEosGetPub\
    licKey\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0csh\
    ow_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\x12\x1a\n\x08chunkify\
    \x18\x03\x20\x01(\x08R\x08chunkify\"Z\n\x0cEosPublicKey\x12$\n\x0ewif_pu\
    blic_key\x18\x01\x20\x02(\tR\x0cwifPublicKey\x12$\n\x0eraw_public_key\
    \x18\x02\x20\x02(\x0cR\x0crawPublicKey\"\xba\x03\n\tEosSignTx\x12\x1b\n\
    \taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x19\n\x08chain_id\x18\
    \x02\x20\x02(\x0cR\x07chainId\x12E\n\x06header\x18\x03\x20\x02(\x0b2-.hw\
    .trezor.messages.eos.EosSignTx.EosTxHeaderR\x06header\x12\x1f\n\x0bnum_a\
    ctions\x18\x04\x20\x02(\rR\nnumActions\x12\x1a\n\x08chunkify\x18\x05\x20\
    \x01(\x08R\x08chunkify\x1a\xf0\x01\n\x0bEosTxHeader\x12\x1e\n\nexpiratio\
    n\x18\x01\x20\x02(\rR\nexpiration\x12\"\n\rref_block_num\x18\x02\x20\x02\
    (\rR\x0brefBlockNum\x12(\n\x10ref_block_prefix\x18\x03\x20\x02(\rR\x0ere\
    fBlockPrefix\x12-\n\x13max_net_usage_words\x18\x04\x20\x02(\rR\x10maxNet\
    UsageWords\x12'\n\x10max_cpu_usage_ms\x18\x05\x20\x02(\rR\rmaxCpuUsageMs\
    \x12\x1b\n\tdelay_sec\x18\x06\x20\x02(\rR\x08delaySec\"1\n\x12EosTxActio\
    nRequest\x12\x1b\n\tdata_size\x18\x01\x20\x01(\rR\x08dataSize\"\xe2\x20\
    \n\x0eEosTxActionAck\x12N\n\x06common\x18\x01\x20\x02(\x0b26.hw.trezor.m\
    essages.eos.EosTxActionAck.EosActionCommonR\x06common\x12T\n\x08transfer\
    \x18\x02\x20\x01(\x0b28.hw.trezor.messages.eos.EosTxActionAck.EosActionT\
    ransferR\x08transfer\x12T\n\x08delegate\x18\x03\x20\x01(\x0b28.hw.trezor\
    .messages.eos.EosTxActionAck.EosActionDelegateR\x08delegate\x12Z\n\nunde\
    legate\x18\x04\x20\x01(\x0b2:.hw.trezor.messages.eos.EosTxActionAck.EosA\
    ctionUndelegateR\nundelegate\x12N\n\x06refund\x18\x05\x20\x01(\x0b26.hw.\
    trezor.messages.eos.EosTxActionAck.EosActionRefundR\x06refund\x12O\n\x07\
    buy_ram\x18\x06\x20\x01(\x0b26.hw.trezor.messages.eos.EosTxActionAck.Eos\
    ActionBuyRamR\x06buyRam\x12_\n\rbuy_ram_bytes\x18\x07\x20\x01(\x0b2;.hw.\
    trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytesR\x0bbuyRamBytes\
    \x12R\n\x08sell_ram\x18\x08\x20\x01(\x0b27.hw.trezor.messages.eos.EosTxA\
    ctionAck.EosActionSellRamR\x07sellRam\x12a\n\rvote_producer\x18\t\x20\
    \x01(\x0b2<.hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducerR\
    \x0cvoteProducer\x12[\n\x0bupdate_auth\x18\n\x20\x01(\x0b2:.hw.trezor.me\
    ssages.eos.EosTxActionAck.EosActionUpdateAuthR\nupdateAuth\x12[\n\x0bdel\
    ete_auth\x18\x0b\x20\x01(\x0b2:.hw.trezor.messages.eos.EosTxActionAck.Eo\
    sActionDeleteAuthR\ndeleteAuth\x12U\n\tlink_auth\x18\x0c\x20\x01(\x0b28.\
    hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuthR\x08linkAuth\x12\
    [\n\x0bunlink_auth\x18\r\x20\x01(\x0b2:.hw.trezor.messages.eos.EosTxActi\
    onAck.EosActionUnlinkAuthR\nunlinkAuth\x12[\n\x0bnew_account\x18\x0e\x20\
    \x01(\x0b2:.hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccountR\n\
    newAccount\x12Q\n\x07unknown\x18\x0f\x20\x01(\x0b27.hw.trezor.messages.e\
    os.EosTxActionAck.EosActionUnknownR\x07unknown\x1a:\n\x08EosAsset\x12\
    \x16\n\x06amount\x18\x01\x20\x02(\x12R\x06amount\x12\x16\n\x06symbol\x18\
    \x02\x20\x02(\x04R\x06symbol\x1aJ\n\x12EosPermissionLevel\x12\x14\n\x05a\
    ctor\x18\x01\x20\x02(\x04R\x05actor\x12\x1e\n\npermission\x18\x02\x20\
    \x02(\x04R\npermission\x1ap\n\x13EosAuthorizationKey\x12\x12\n\x04type\
    \x18\x01\x20\x02(\rR\x04type\x12\x10\n\x03key\x18\x02\x20\x01(\x0cR\x03k\
    ey\x12\x1b\n\taddress_n\x18\x03\x20\x03(\rR\x08addressN\x12\x16\n\x06wei\
    ght\x18\x04\x20\x02(\rR\x06weight\x1a\x86\x01\n\x17EosAuthorizationAccou\
    nt\x12S\n\x07account\x18\x01\x20\x02(\x0b29.hw.trezor.messages.eos.EosTx\
    ActionAck.EosPermissionLevelR\x07account\x12\x16\n\x06weight\x18\x02\x20\
    \x02(\rR\x06weight\x1aI\n\x14EosAuthorizationWait\x12\x19\n\x08wait_sec\
    \x18\x01\x20\x02(\rR\x07waitSec\x12\x16\n\x06weight\x18\x02\x20\x02(\rR\
    \x06weight\x1a\xaf\x02\n\x10EosAuthorization\x12\x1c\n\tthreshold\x18\
    \x01\x20\x02(\rR\tthreshold\x12N\n\x04keys\x18\x02\x20\x03(\x0b2:.hw.tre\
    zor.messages.eos.EosTxActionAck.EosAuthorizationKeyR\x04keys\x12Z\n\x08a\
    ccounts\x18\x03\x20\x03(\x0b2>.hw.trezor.messages.eos.EosTxActionAck.Eos\
    AuthorizationAccountR\x08accounts\x12Q\n\x05waits\x18\x04\x20\x03(\x0b2;\
    .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWaitR\x05waits\
    \x1a\xa0\x01\n\x0fEosActionCommon\x12\x18\n\x07account\x18\x01\x20\x02(\
    \x04R\x07account\x12\x12\n\x04name\x18\x02\x20\x02(\x04R\x04name\x12_\n\
    \rauthorization\x18\x03\x20\x03(\x0b29.hw.trezor.messages.eos.EosTxActio\
    nAck.EosPermissionLevelR\rauthorization\x1a\xa8\x01\n\x11EosActionTransf\
    er\x12\x16\n\x06sender\x18\x01\x20\x02(\x04R\x06sender\x12\x1a\n\x08rece\
    iver\x18\x02\x20\x02(\x04R\x08receiver\x12K\n\x08quantity\x18\x03\x20\
    \x02(\x0b2/.hw.trezor.messages.eos.EosTxActionAck.EosAssetR\x08quantity\
    \x12\x12\n\x04memo\x18\x04\x20\x02(\tR\x04memo\x1a\x8b\x02\n\x11EosActio\
    nDelegate\x12\x16\n\x06sender\x18\x01\x20\x02(\x04R\x06sender\x12\x1a\n\
    \x08receiver\x18\x02\x20\x02(\x04R\x08receiver\x12R\n\x0cnet_quantity\
    \x18\x03\x20\x02(\x0b2/.hw.trezor.messages.eos.EosTxActionAck.EosAssetR\
    \x0bnetQuantity\x12R\n\x0ccpu_quantity\x18\x04\x20\x02(\x0b2/.hw.trezor.\
    messages.eos.EosTxActionAck.EosAssetR\x0bcpuQuantity\x12\x1a\n\x08transf\
    er\x18\x05\x20\x02(\x08R\x08transfer\x1a\xf1\x01\n\x13EosActionUndelegat\
    e\x12\x16\n\x06sender\x18\x01\x20\x02(\x04R\x06sender\x12\x1a\n\x08recei\
    ver\x18\x02\x20\x02(\x04R\x08receiver\x12R\n\x0cnet_quantity\x18\x03\x20\
    \x02(\x0b2/.hw.trezor.messages.eos.EosTxActionAck.EosAssetR\x0bnetQuanti\
    ty\x12R\n\x0ccpu_quantity\x18\x04\x20\x02(\x0b2/.hw.trezor.messages.eos.\
    EosTxActionAck.EosAssetR\x0bcpuQuantity\x1a'\n\x0fEosActionRefund\x12\
    \x14\n\x05owner\x18\x01\x20\x02(\x04R\x05owner\x1a\x90\x01\n\x0fEosActio\
    nBuyRam\x12\x14\n\x05payer\x18\x01\x20\x02(\x04R\x05payer\x12\x1a\n\x08r\
    eceiver\x18\x02\x20\x02(\x04R\x08receiver\x12K\n\x08quantity\x18\x03\x20\
    \x02(\x0b2/.hw.trezor.messages.eos.EosTxActionAck.EosAssetR\x08quantity\
    \x1a^\n\x14EosActionBuyRamBytes\x12\x14\n\x05payer\x18\x01\x20\x02(\x04R\
    \x05payer\x12\x1a\n\x08receiver\x18\x02\x20\x02(\x04R\x08receiver\x12\
    \x14\n\x05bytes\x18\x03\x20\x02(\rR\x05bytes\x1aB\n\x10EosActionSellRam\
    \x12\x18\n\x07account\x18\x01\x20\x02(\x04R\x07account\x12\x14\n\x05byte\
    s\x18\x02\x20\x02(\x04R\x05bytes\x1aa\n\x15EosActionVoteProducer\x12\x14\
    \n\x05voter\x18\x01\x20\x02(\x04R\x05voter\x12\x14\n\x05proxy\x18\x02\
    \x20\x02(\x04R\x05proxy\x12\x1c\n\tproducers\x18\x03\x20\x03(\x04R\tprod\
    ucers\x1a\xb4\x01\n\x13EosActionUpdateAuth\x12\x18\n\x07account\x18\x01\
    \x20\x02(\x04R\x07account\x12\x1e\n\npermission\x18\x02\x20\x02(\x04R\np\
    ermission\x12\x16\n\x06parent\x18\x03\x20\x02(\x04R\x06parent\x12K\n\x04\
    auth\x18\x04\x20\x02(\x0b27.hw.trezor.messages.eos.EosTxActionAck.EosAut\
    horizationR\x04auth\x1aO\n\x13EosActionDeleteAuth\x12\x18\n\x07account\
    \x18\x01\x20\x02(\x04R\x07account\x12\x1e\n\npermission\x18\x02\x20\x02(\
    \x04R\npermission\x1aw\n\x11EosActionLinkAuth\x12\x18\n\x07account\x18\
    \x01\x20\x02(\x04R\x07account\x12\x12\n\x04code\x18\x02\x20\x02(\x04R\
    \x04code\x12\x12\n\x04type\x18\x03\x20\x02(\x04R\x04type\x12\x20\n\x0bre\
    quirement\x18\x04\x20\x02(\x04R\x0brequirement\x1aW\n\x13EosActionUnlink\
    Auth\x12\x18\n\x07account\x18\x01\x20\x02(\x04R\x07account\x12\x12\n\x04\
    code\x18\x02\x20\x02(\x04R\x04code\x12\x12\n\x04type\x18\x03\x20\x02(\
    \x04R\x04type\x1a\xe3\x01\n\x13EosActionNewAccount\x12\x18\n\x07creator\
    \x18\x01\x20\x02(\x04R\x07creator\x12\x12\n\x04name\x18\x02\x20\x02(\x04\
    R\x04name\x12M\n\x05owner\x18\x03\x20\x02(\x0b27.hw.trezor.messages.eos.\
    EosTxActionAck.EosAuthorizationR\x05owner\x12O\n\x06active\x18\x04\x20\
    \x02(\x0b27.hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationR\x06a\
    ctive\x1aN\n\x10EosActionUnknown\x12\x1b\n\tdata_size\x18\x01\x20\x02(\r\
    R\x08dataSize\x12\x1d\n\ndata_chunk\x18\x02\x20\x02(\x0cR\tdataChunk\"+\
    \n\x0bEosSignedTx\x12\x1c\n\tsignature\x18\x01\x20\x02(\tR\tsignatureB7\
    \n#com.satoshilabs.trezor.lib.protobufB\x10TrezorMessageEos\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(28);
            messages.push(EosGetPublicKey::generated_message_descriptor_data());
            messages.push(EosPublicKey::generated_message_descriptor_data());
            messages.push(EosSignTx::generated_message_descriptor_data());
            messages.push(EosTxActionRequest::generated_message_descriptor_data());
            messages.push(EosTxActionAck::generated_message_descriptor_data());
            messages.push(EosSignedTx::generated_message_descriptor_data());
            messages.push(eos_sign_tx::EosTxHeader::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosAsset::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosPermissionLevel::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosAuthorizationKey::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosAuthorizationAccount::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosAuthorizationWait::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosAuthorization::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionCommon::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionTransfer::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionDelegate::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionUndelegate::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionRefund::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionBuyRam::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionBuyRamBytes::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionSellRam::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionVoteProducer::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionUpdateAuth::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionDeleteAuth::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionLinkAuth::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionUnlinkAuth::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionNewAccount::generated_message_descriptor_data());
            messages.push(eos_tx_action_ack::EosActionUnknown::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
