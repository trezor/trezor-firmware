// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-cosmos.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosGetAddress)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosGetAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosGetAddress.prefix)
    pub prefix: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosGetAddress {
    fn default() -> &'a CosmosGetAddress {
        <CosmosGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl CosmosGetAddress {
    pub fn new() -> CosmosGetAddress {
        ::std::default::Default::default()
    }

    // required string prefix = 2;

    pub fn prefix(&self) -> &str {
        match self.prefix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_prefix(&mut self) {
        self.prefix = ::std::option::Option::None;
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        if self.prefix.is_none() {
            self.prefix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        self.prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool show_display = 3;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &CosmosGetAddress| { &m.address_n },
            |m: &mut CosmosGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "prefix",
            |m: &CosmosGetAddress| { &m.prefix },
            |m: &mut CosmosGetAddress| { &mut m.prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &CosmosGetAddress| { &m.show_display },
            |m: &mut CosmosGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosGetAddress>(
            "CosmosGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosGetAddress {
    const NAME: &'static str = "CosmosGetAddress";

    fn is_initialized(&self) -> bool {
        if self.prefix.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.prefix = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.prefix.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.prefix.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.show_display {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosGetAddress {
        CosmosGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.prefix = ::std::option::Option::None;
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosGetAddress {
        static instance: CosmosGetAddress = CosmosGetAddress {
            address_n: ::std::vec::Vec::new(),
            prefix: ::std::option::Option::None,
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosAddress)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosAddress {
    fn default() -> &'a CosmosAddress {
        <CosmosAddress as ::protobuf::Message>::default_instance()
    }
}

impl CosmosAddress {
    pub fn new() -> CosmosAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &CosmosAddress| { &m.address },
            |m: &mut CosmosAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosAddress>(
            "CosmosAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosAddress {
    const NAME: &'static str = "CosmosAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosAddress {
        CosmosAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosAddress {
        static instance: CosmosAddress = CosmosAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosGetPublicKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosGetPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosGetPublicKey.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosGetPublicKey.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosGetPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosGetPublicKey {
    fn default() -> &'a CosmosGetPublicKey {
        <CosmosGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CosmosGetPublicKey {
    pub fn new() -> CosmosGetPublicKey {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &CosmosGetPublicKey| { &m.address_n },
            |m: &mut CosmosGetPublicKey| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &CosmosGetPublicKey| { &m.show_display },
            |m: &mut CosmosGetPublicKey| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosGetPublicKey>(
            "CosmosGetPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosGetPublicKey {
    const NAME: &'static str = "CosmosGetPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosGetPublicKey {
        CosmosGetPublicKey::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosGetPublicKey {
        static instance: CosmosGetPublicKey = CosmosGetPublicKey {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosGetPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosGetPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosGetPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosPublicKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosPublicKey.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosPublicKey.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosPublicKey {
    fn default() -> &'a CosmosPublicKey {
        <CosmosPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CosmosPublicKey {
    pub fn new() -> CosmosPublicKey {
        ::std::default::Default::default()
    }

    // required string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CosmosPublicKey| { &m.type_ },
            |m: &mut CosmosPublicKey| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CosmosPublicKey| { &m.value },
            |m: &mut CosmosPublicKey| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosPublicKey>(
            "CosmosPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosPublicKey {
    const NAME: &'static str = "CosmosPublicKey";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosPublicKey {
        CosmosPublicKey::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosPublicKey {
        static instance: CosmosPublicKey = CosmosPublicKey {
            type_: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosSignTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignTx.sign_doc)
    pub sign_doc: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosSignTx {
    fn default() -> &'a CosmosSignTx {
        <CosmosSignTx as ::protobuf::Message>::default_instance()
    }
}

impl CosmosSignTx {
    pub fn new() -> CosmosSignTx {
        ::std::default::Default::default()
    }

    // required bytes sign_doc = 2;

    pub fn sign_doc(&self) -> &[u8] {
        match self.sign_doc.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sign_doc(&mut self) {
        self.sign_doc = ::std::option::Option::None;
    }

    pub fn has_sign_doc(&self) -> bool {
        self.sign_doc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sign_doc(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign_doc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign_doc(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sign_doc.is_none() {
            self.sign_doc = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sign_doc.as_mut().unwrap()
    }

    // Take field
    pub fn take_sign_doc(&mut self) -> ::std::vec::Vec<u8> {
        self.sign_doc.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &CosmosSignTx| { &m.address_n },
            |m: &mut CosmosSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sign_doc",
            |m: &CosmosSignTx| { &m.sign_doc },
            |m: &mut CosmosSignTx| { &mut m.sign_doc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosSignTx>(
            "CosmosSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosSignTx {
    const NAME: &'static str = "CosmosSignTx";

    fn is_initialized(&self) -> bool {
        if self.sign_doc.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.sign_doc = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.sign_doc.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.sign_doc.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosSignTx {
        CosmosSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.sign_doc = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosSignTx {
        static instance: CosmosSignTx = CosmosSignTx {
            address_n: ::std::vec::Vec::new(),
            sign_doc: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosSignedTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignedTx.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosSignedTx {
    fn default() -> &'a CosmosSignedTx {
        <CosmosSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl CosmosSignedTx {
    pub fn new() -> CosmosSignedTx {
        ::std::default::Default::default()
    }

    // required bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &CosmosSignedTx| { &m.signature },
            |m: &mut CosmosSignedTx| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosSignedTx>(
            "CosmosSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosSignedTx {
    const NAME: &'static str = "CosmosSignedTx";

    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosSignedTx {
        CosmosSignedTx::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosSignedTx {
        static instance: CosmosSignedTx = CosmosSignedTx {
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosSignDoc)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosSignDoc {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignDoc.body_bytes)
    pub body_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignDoc.auth_info_bytes)
    pub auth_info_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignDoc.chain_id)
    pub chain_id: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignDoc.account_number)
    pub account_number: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosSignDoc.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosSignDoc {
    fn default() -> &'a CosmosSignDoc {
        <CosmosSignDoc as ::protobuf::Message>::default_instance()
    }
}

impl CosmosSignDoc {
    pub fn new() -> CosmosSignDoc {
        ::std::default::Default::default()
    }

    // required bytes body_bytes = 1;

    pub fn body_bytes(&self) -> &[u8] {
        match self.body_bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_body_bytes(&mut self) {
        self.body_bytes = ::std::option::Option::None;
    }

    pub fn has_body_bytes(&self) -> bool {
        self.body_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.body_bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body_bytes.is_none() {
            self.body_bytes = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.body_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_body_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.body_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes auth_info_bytes = 2;

    pub fn auth_info_bytes(&self) -> &[u8] {
        match self.auth_info_bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_auth_info_bytes(&mut self) {
        self.auth_info_bytes = ::std::option::Option::None;
    }

    pub fn has_auth_info_bytes(&self) -> bool {
        self.auth_info_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_info_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.auth_info_bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_info_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.auth_info_bytes.is_none() {
            self.auth_info_bytes = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.auth_info_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_info_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.auth_info_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required string chain_id = 3;

    pub fn chain_id(&self) -> &str {
        match self.chain_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_chain_id(&mut self) {
        self.chain_id = ::std::option::Option::None;
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        if self.chain_id.is_none() {
            self.chain_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.chain_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        self.chain_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 account_number = 4;

    pub fn account_number(&self) -> u64 {
        self.account_number.unwrap_or(0)
    }

    pub fn clear_account_number(&mut self) {
        self.account_number = ::std::option::Option::None;
    }

    pub fn has_account_number(&self) -> bool {
        self.account_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: u64) {
        self.account_number = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body_bytes",
            |m: &CosmosSignDoc| { &m.body_bytes },
            |m: &mut CosmosSignDoc| { &mut m.body_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_info_bytes",
            |m: &CosmosSignDoc| { &m.auth_info_bytes },
            |m: &mut CosmosSignDoc| { &mut m.auth_info_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chain_id",
            |m: &CosmosSignDoc| { &m.chain_id },
            |m: &mut CosmosSignDoc| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account_number",
            |m: &CosmosSignDoc| { &m.account_number },
            |m: &mut CosmosSignDoc| { &mut m.account_number },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosSignDoc>(
            "CosmosSignDoc",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosSignDoc {
    const NAME: &'static str = "CosmosSignDoc";

    fn is_initialized(&self) -> bool {
        if self.body_bytes.is_none() {
            return false;
        }
        if self.auth_info_bytes.is_none() {
            return false;
        }
        if self.chain_id.is_none() {
            return false;
        }
        if self.account_number.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.auth_info_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.chain_id = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.account_number = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.body_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.auth_info_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.chain_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.account_number {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.body_bytes.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.auth_info_bytes.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.chain_id.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.account_number {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosSignDoc {
        CosmosSignDoc::new()
    }

    fn clear(&mut self) {
        self.body_bytes = ::std::option::Option::None;
        self.auth_info_bytes = ::std::option::Option::None;
        self.chain_id = ::std::option::Option::None;
        self.account_number = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosSignDoc {
        static instance: CosmosSignDoc = CosmosSignDoc {
            body_bytes: ::std::option::Option::None,
            auth_info_bytes: ::std::option::Option::None,
            chain_id: ::std::option::Option::None,
            account_number: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosSignDoc {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosSignDoc").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosSignDoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosSignDoc {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosAuthInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosAuthInfo {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosAuthInfo.signer_infos)
    pub signer_infos: ::std::vec::Vec<CosmosSignerInfo>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosAuthInfo.fee)
    pub fee: ::protobuf::MessageField<CosmosFee>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosAuthInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosAuthInfo {
    fn default() -> &'a CosmosAuthInfo {
        <CosmosAuthInfo as ::protobuf::Message>::default_instance()
    }
}

impl CosmosAuthInfo {
    pub fn new() -> CosmosAuthInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signer_infos",
            |m: &CosmosAuthInfo| { &m.signer_infos },
            |m: &mut CosmosAuthInfo| { &mut m.signer_infos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CosmosFee>(
            "fee",
            |m: &CosmosAuthInfo| { &m.fee },
            |m: &mut CosmosAuthInfo| { &mut m.fee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosAuthInfo>(
            "CosmosAuthInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosAuthInfo {
    const NAME: &'static str = "CosmosAuthInfo";

    fn is_initialized(&self) -> bool {
        if self.fee.is_none() {
            return false;
        }
        for v in &self.signer_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fee {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signer_infos.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fee)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.signer_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.signer_infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.fee.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosAuthInfo {
        CosmosAuthInfo::new()
    }

    fn clear(&mut self) {
        self.signer_infos.clear();
        self.fee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosAuthInfo {
        static instance: CosmosAuthInfo = CosmosAuthInfo {
            signer_infos: ::std::vec::Vec::new(),
            fee: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosAuthInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosAuthInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosAuthInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosAuthInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosSignerInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosSignerInfo {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignerInfo.public_key)
    pub public_key: ::protobuf::MessageField<CosmosAny>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignerInfo.mode_info)
    pub mode_info: ::protobuf::MessageField<CosmosModeInfo>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSignerInfo.sequence)
    pub sequence: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosSignerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosSignerInfo {
    fn default() -> &'a CosmosSignerInfo {
        <CosmosSignerInfo as ::protobuf::Message>::default_instance()
    }
}

impl CosmosSignerInfo {
    pub fn new() -> CosmosSignerInfo {
        ::std::default::Default::default()
    }

    // required uint64 sequence = 3;

    pub fn sequence(&self) -> u64 {
        self.sequence.unwrap_or(0)
    }

    pub fn clear_sequence(&mut self) {
        self.sequence = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        self.sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CosmosAny>(
            "public_key",
            |m: &CosmosSignerInfo| { &m.public_key },
            |m: &mut CosmosSignerInfo| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CosmosModeInfo>(
            "mode_info",
            |m: &CosmosSignerInfo| { &m.mode_info },
            |m: &mut CosmosSignerInfo| { &mut m.mode_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence",
            |m: &CosmosSignerInfo| { &m.sequence },
            |m: &mut CosmosSignerInfo| { &mut m.sequence },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosSignerInfo>(
            "CosmosSignerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosSignerInfo {
    const NAME: &'static str = "CosmosSignerInfo";

    fn is_initialized(&self) -> bool {
        if self.public_key.is_none() {
            return false;
        }
        if self.mode_info.is_none() {
            return false;
        }
        if self.sequence.is_none() {
            return false;
        }
        for v in &self.public_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mode_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.public_key)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mode_info)?;
                },
                24 => {
                    self.sequence = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.mode_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sequence {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.mode_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.sequence {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosSignerInfo {
        CosmosSignerInfo::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.mode_info.clear();
        self.sequence = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosSignerInfo {
        static instance: CosmosSignerInfo = CosmosSignerInfo {
            public_key: ::protobuf::MessageField::none(),
            mode_info: ::protobuf::MessageField::none(),
            sequence: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosSignerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosSignerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosSignerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosSignerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosModeInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosModeInfo {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosModeInfo.single)
    pub single: ::protobuf::MessageField<CosmosModeInfoSingle>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosModeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosModeInfo {
    fn default() -> &'a CosmosModeInfo {
        <CosmosModeInfo as ::protobuf::Message>::default_instance()
    }
}

impl CosmosModeInfo {
    pub fn new() -> CosmosModeInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CosmosModeInfoSingle>(
            "single",
            |m: &CosmosModeInfo| { &m.single },
            |m: &mut CosmosModeInfo| { &mut m.single },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosModeInfo>(
            "CosmosModeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosModeInfo {
    const NAME: &'static str = "CosmosModeInfo";

    fn is_initialized(&self) -> bool {
        if self.single.is_none() {
            return false;
        }
        for v in &self.single {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.single)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.single.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.single.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosModeInfo {
        CosmosModeInfo::new()
    }

    fn clear(&mut self) {
        self.single.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosModeInfo {
        static instance: CosmosModeInfo = CosmosModeInfo {
            single: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosModeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosModeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosModeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosModeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosModeInfoSingle)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosModeInfoSingle {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosModeInfoSingle.mode)
    pub mode: ::std::option::Option<::protobuf::EnumOrUnknown<CosmosSignMode>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosModeInfoSingle.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosModeInfoSingle {
    fn default() -> &'a CosmosModeInfoSingle {
        <CosmosModeInfoSingle as ::protobuf::Message>::default_instance()
    }
}

impl CosmosModeInfoSingle {
    pub fn new() -> CosmosModeInfoSingle {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cosmos.CosmosSignMode mode = 1;

    pub fn mode(&self) -> CosmosSignMode {
        match self.mode {
            Some(e) => e.enum_value_or(CosmosSignMode::SIGN_MODE_DIRECT),
            None => CosmosSignMode::SIGN_MODE_DIRECT,
        }
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: CosmosSignMode) {
        self.mode = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mode",
            |m: &CosmosModeInfoSingle| { &m.mode },
            |m: &mut CosmosModeInfoSingle| { &mut m.mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosModeInfoSingle>(
            "CosmosModeInfoSingle",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosModeInfoSingle {
    const NAME: &'static str = "CosmosModeInfoSingle";

    fn is_initialized(&self) -> bool {
        if self.mode.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mode {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.mode {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosModeInfoSingle {
        CosmosModeInfoSingle::new()
    }

    fn clear(&mut self) {
        self.mode = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosModeInfoSingle {
        static instance: CosmosModeInfoSingle = CosmosModeInfoSingle {
            mode: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosModeInfoSingle {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosModeInfoSingle").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosModeInfoSingle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosModeInfoSingle {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosTxBody)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosTxBody {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosTxBody.messages)
    pub messages: ::std::vec::Vec<CosmosAny>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosTxBody.memo)
    pub memo: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosTxBody.timeout_height)
    pub timeout_height: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosTxBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosTxBody {
    fn default() -> &'a CosmosTxBody {
        <CosmosTxBody as ::protobuf::Message>::default_instance()
    }
}

impl CosmosTxBody {
    pub fn new() -> CosmosTxBody {
        ::std::default::Default::default()
    }

    // optional string memo = 2;

    pub fn memo(&self) -> &str {
        match self.memo.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_memo(&mut self) {
        self.memo = ::std::option::Option::None;
    }

    pub fn has_memo(&self) -> bool {
        self.memo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        if self.memo.is_none() {
            self.memo = ::std::option::Option::Some(::std::string::String::new());
        }
        self.memo.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        self.memo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 timeout_height = 3;

    pub fn timeout_height(&self) -> u64 {
        self.timeout_height.unwrap_or(0)
    }

    pub fn clear_timeout_height(&mut self) {
        self.timeout_height = ::std::option::Option::None;
    }

    pub fn has_timeout_height(&self) -> bool {
        self.timeout_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_height(&mut self, v: u64) {
        self.timeout_height = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &CosmosTxBody| { &m.messages },
            |m: &mut CosmosTxBody| { &mut m.messages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo",
            |m: &CosmosTxBody| { &m.memo },
            |m: &mut CosmosTxBody| { &mut m.memo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timeout_height",
            |m: &CosmosTxBody| { &m.timeout_height },
            |m: &mut CosmosTxBody| { &mut m.timeout_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosTxBody>(
            "CosmosTxBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosTxBody {
    const NAME: &'static str = "CosmosTxBody";

    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                18 => {
                    self.memo = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.timeout_height = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.memo.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timeout_height {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.memo.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.timeout_height {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosTxBody {
        CosmosTxBody::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.memo = ::std::option::Option::None;
        self.timeout_height = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosTxBody {
        static instance: CosmosTxBody = CosmosTxBody {
            messages: ::std::vec::Vec::new(),
            memo: ::std::option::Option::None,
            timeout_height: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosTxBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosTxBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosTxBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosTxBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosBankMsgSend)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosBankMsgSend {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosBankMsgSend.from_address)
    pub from_address: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosBankMsgSend.to_address)
    pub to_address: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosBankMsgSend.amount)
    pub amount: ::std::vec::Vec<CosmosCoin>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosBankMsgSend.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosBankMsgSend {
    fn default() -> &'a CosmosBankMsgSend {
        <CosmosBankMsgSend as ::protobuf::Message>::default_instance()
    }
}

impl CosmosBankMsgSend {
    pub fn new() -> CosmosBankMsgSend {
        ::std::default::Default::default()
    }

    // required string from_address = 1;

    pub fn from_address(&self) -> &str {
        match self.from_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_from_address(&mut self) {
        self.from_address = ::std::option::Option::None;
    }

    pub fn has_from_address(&self) -> bool {
        self.from_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_address(&mut self, v: ::std::string::String) {
        self.from_address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
        if self.from_address.is_none() {
            self.from_address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.from_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_address(&mut self) -> ::std::string::String {
        self.from_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string to_address = 2;

    pub fn to_address(&self) -> &str {
        match self.to_address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_to_address(&mut self) {
        self.to_address = ::std::option::Option::None;
    }

    pub fn has_to_address(&self) -> bool {
        self.to_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_address(&mut self, v: ::std::string::String) {
        self.to_address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
        if self.to_address.is_none() {
            self.to_address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.to_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_address(&mut self) -> ::std::string::String {
        self.to_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "from_address",
            |m: &CosmosBankMsgSend| { &m.from_address },
            |m: &mut CosmosBankMsgSend| { &mut m.from_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "to_address",
            |m: &CosmosBankMsgSend| { &m.to_address },
            |m: &mut CosmosBankMsgSend| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &CosmosBankMsgSend| { &m.amount },
            |m: &mut CosmosBankMsgSend| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosBankMsgSend>(
            "CosmosBankMsgSend",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosBankMsgSend {
    const NAME: &'static str = "CosmosBankMsgSend";

    fn is_initialized(&self) -> bool {
        if self.from_address.is_none() {
            return false;
        }
        if self.to_address.is_none() {
            return false;
        }
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.from_address = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.to_address = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.amount.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.from_address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.to_address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.from_address.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.to_address.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosBankMsgSend {
        CosmosBankMsgSend::new()
    }

    fn clear(&mut self) {
        self.from_address = ::std::option::Option::None;
        self.to_address = ::std::option::Option::None;
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosBankMsgSend {
        static instance: CosmosBankMsgSend = CosmosBankMsgSend {
            from_address: ::std::option::Option::None,
            to_address: ::std::option::Option::None,
            amount: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosBankMsgSend {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosBankMsgSend").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosBankMsgSend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosBankMsgSend {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosFee)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosFee {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosFee.amount)
    pub amount: ::std::vec::Vec<CosmosCoin>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosFee.gas_limit)
    pub gas_limit: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosFee.payer)
    pub payer: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosFee.granter)
    pub granter: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosFee.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosFee {
    fn default() -> &'a CosmosFee {
        <CosmosFee as ::protobuf::Message>::default_instance()
    }
}

impl CosmosFee {
    pub fn new() -> CosmosFee {
        ::std::default::Default::default()
    }

    // required uint64 gas_limit = 2;

    pub fn gas_limit(&self) -> u64 {
        self.gas_limit.unwrap_or(0)
    }

    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = ::std::option::Option::None;
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = ::std::option::Option::Some(v);
    }

    // optional string payer = 3;

    pub fn payer(&self) -> &str {
        match self.payer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_payer(&mut self) {
        self.payer = ::std::option::Option::None;
    }

    pub fn has_payer(&self) -> bool {
        self.payer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payer(&mut self, v: ::std::string::String) {
        self.payer = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payer(&mut self) -> &mut ::std::string::String {
        if self.payer.is_none() {
            self.payer = ::std::option::Option::Some(::std::string::String::new());
        }
        self.payer.as_mut().unwrap()
    }

    // Take field
    pub fn take_payer(&mut self) -> ::std::string::String {
        self.payer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string granter = 4;

    pub fn granter(&self) -> &str {
        match self.granter.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_granter(&mut self) {
        self.granter = ::std::option::Option::None;
    }

    pub fn has_granter(&self) -> bool {
        self.granter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        if self.granter.is_none() {
            self.granter = ::std::option::Option::Some(::std::string::String::new());
        }
        self.granter.as_mut().unwrap()
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        self.granter.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "amount",
            |m: &CosmosFee| { &m.amount },
            |m: &mut CosmosFee| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gas_limit",
            |m: &CosmosFee| { &m.gas_limit },
            |m: &mut CosmosFee| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payer",
            |m: &CosmosFee| { &m.payer },
            |m: &mut CosmosFee| { &mut m.payer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "granter",
            |m: &CosmosFee| { &m.granter },
            |m: &mut CosmosFee| { &mut m.granter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosFee>(
            "CosmosFee",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosFee {
    const NAME: &'static str = "CosmosFee";

    fn is_initialized(&self) -> bool {
        if self.gas_limit.is_none() {
            return false;
        }
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.amount.push(is.read_message()?);
                },
                16 => {
                    self.gas_limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.payer = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.granter = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.gas_limit {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.payer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.granter.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.amount {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.gas_limit {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.payer.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.granter.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosFee {
        CosmosFee::new()
    }

    fn clear(&mut self) {
        self.amount.clear();
        self.gas_limit = ::std::option::Option::None;
        self.payer = ::std::option::Option::None;
        self.granter = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosFee {
        static instance: CosmosFee = CosmosFee {
            amount: ::std::vec::Vec::new(),
            gas_limit: ::std::option::Option::None,
            payer: ::std::option::Option::None,
            granter: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosFee {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosFee").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosFee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosFee {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosCoin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosCoin {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosCoin.denom)
    pub denom: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosCoin.amount)
    pub amount: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosCoin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosCoin {
    fn default() -> &'a CosmosCoin {
        <CosmosCoin as ::protobuf::Message>::default_instance()
    }
}

impl CosmosCoin {
    pub fn new() -> CosmosCoin {
        ::std::default::Default::default()
    }

    // required string denom = 1;

    pub fn denom(&self) -> &str {
        match self.denom.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_denom(&mut self) {
        self.denom = ::std::option::Option::None;
    }

    pub fn has_denom(&self) -> bool {
        self.denom.is_some()
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        if self.denom.is_none() {
            self.denom = ::std::option::Option::Some(::std::string::String::new());
        }
        self.denom.as_mut().unwrap()
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        self.denom.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string amount = 2;

    pub fn amount(&self) -> &str {
        match self.amount.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        if self.amount.is_none() {
            self.amount = ::std::option::Option::Some(::std::string::String::new());
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        self.amount.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "denom",
            |m: &CosmosCoin| { &m.denom },
            |m: &mut CosmosCoin| { &mut m.denom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &CosmosCoin| { &m.amount },
            |m: &mut CosmosCoin| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosCoin>(
            "CosmosCoin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosCoin {
    const NAME: &'static str = "CosmosCoin";

    fn is_initialized(&self) -> bool {
        if self.denom.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.denom = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.amount = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.denom.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.amount.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.denom.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.amount.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosCoin {
        CosmosCoin::new()
    }

    fn clear(&mut self) {
        self.denom = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosCoin {
        static instance: CosmosCoin = CosmosCoin {
            denom: ::std::option::Option::None,
            amount: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosCoin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosCoin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosCoin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosCoin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosSecp256k1Pubkey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosSecp256k1Pubkey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosSecp256k1Pubkey.key)
    pub key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosSecp256k1Pubkey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosSecp256k1Pubkey {
    fn default() -> &'a CosmosSecp256k1Pubkey {
        <CosmosSecp256k1Pubkey as ::protobuf::Message>::default_instance()
    }
}

impl CosmosSecp256k1Pubkey {
    pub fn new() -> CosmosSecp256k1Pubkey {
        ::std::default::Default::default()
    }

    // required bytes key = 1;

    pub fn key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &CosmosSecp256k1Pubkey| { &m.key },
            |m: &mut CosmosSecp256k1Pubkey| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosSecp256k1Pubkey>(
            "CosmosSecp256k1Pubkey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosSecp256k1Pubkey {
    const NAME: &'static str = "CosmosSecp256k1Pubkey";

    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosSecp256k1Pubkey {
        CosmosSecp256k1Pubkey::new()
    }

    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosSecp256k1Pubkey {
        static instance: CosmosSecp256k1Pubkey = CosmosSecp256k1Pubkey {
            key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosSecp256k1Pubkey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosSecp256k1Pubkey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosSecp256k1Pubkey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosSecp256k1Pubkey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.cosmos.CosmosAny)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosAny {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosAny.type_url)
    pub type_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cosmos.CosmosAny.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cosmos.CosmosAny.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CosmosAny {
    fn default() -> &'a CosmosAny {
        <CosmosAny as ::protobuf::Message>::default_instance()
    }
}

impl CosmosAny {
    pub fn new() -> CosmosAny {
        ::std::default::Default::default()
    }

    // required string type_url = 1;

    pub fn type_url(&self) -> &str {
        match self.type_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_url(&mut self) {
        self.type_url = ::std::option::Option::None;
    }

    pub fn has_type_url(&self) -> bool {
        self.type_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        if self.type_url.is_none() {
            self.type_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        self.type_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type_url",
            |m: &CosmosAny| { &m.type_url },
            |m: &mut CosmosAny| { &mut m.type_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CosmosAny| { &m.value },
            |m: &mut CosmosAny| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CosmosAny>(
            "CosmosAny",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CosmosAny {
    const NAME: &'static str = "CosmosAny";

    fn is_initialized(&self) -> bool {
        if self.type_url.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_url = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_url.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CosmosAny {
        CosmosAny::new()
    }

    fn clear(&mut self) {
        self.type_url = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CosmosAny {
        static instance: CosmosAny = CosmosAny {
            type_url: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CosmosAny {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CosmosAny").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CosmosAny {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosAny {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hw.trezor.messages.cosmos.CosmosSignMode)
pub enum CosmosSignMode {
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.cosmos.CosmosSignMode.SIGN_MODE_DIRECT)
    SIGN_MODE_DIRECT = 1,
}

impl ::protobuf::Enum for CosmosSignMode {
    const NAME: &'static str = "CosmosSignMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CosmosSignMode> {
        match value {
            1 => ::std::option::Option::Some(CosmosSignMode::SIGN_MODE_DIRECT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CosmosSignMode> {
        match str {
            "SIGN_MODE_DIRECT" => ::std::option::Option::Some(CosmosSignMode::SIGN_MODE_DIRECT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CosmosSignMode] = &[
        CosmosSignMode::SIGN_MODE_DIRECT,
    ];
}

impl ::protobuf::EnumFull for CosmosSignMode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CosmosSignMode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            CosmosSignMode::SIGN_MODE_DIRECT => 0,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for CosmosSignMode {
    fn default() -> Self {
        CosmosSignMode::SIGN_MODE_DIRECT
    }
}

impl CosmosSignMode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CosmosSignMode>("CosmosSignMode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15messages-cosmos.proto\x12\x19hw.trezor.messages.cosmos\"j\n\x10Cos\
    mosGetAddress\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\
    \x16\n\x06prefix\x18\x02\x20\x02(\tR\x06prefix\x12!\n\x0cshow_display\
    \x18\x03\x20\x01(\x08R\x0bshowDisplay\")\n\rCosmosAddress\x12\x18\n\x07a\
    ddress\x18\x01\x20\x01(\tR\x07address\"T\n\x12CosmosGetPublicKey\x12\x1b\
    \n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\
    \x02\x20\x01(\x08R\x0bshowDisplay\";\n\x0fCosmosPublicKey\x12\x12\n\x04t\
    ype\x18\x01\x20\x02(\tR\x04type\x12\x14\n\x05value\x18\x02\x20\x02(\x0cR\
    \x05value\"F\n\x0cCosmosSignTx\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\
    \x08addressN\x12\x19\n\x08sign_doc\x18\x02\x20\x02(\x0cR\x07signDoc\".\n\
    \x0eCosmosSignedTx\x12\x1c\n\tsignature\x18\x01\x20\x02(\x0cR\tsignature\
    \"\x98\x01\n\rCosmosSignDoc\x12\x1d\n\nbody_bytes\x18\x01\x20\x02(\x0cR\
    \tbodyBytes\x12&\n\x0fauth_info_bytes\x18\x02\x20\x02(\x0cR\rauthInfoByt\
    es\x12\x19\n\x08chain_id\x18\x03\x20\x02(\tR\x07chainId\x12%\n\x0eaccoun\
    t_number\x18\x04\x20\x02(\x04R\raccountNumber\"\x98\x01\n\x0eCosmosAuthI\
    nfo\x12N\n\x0csigner_infos\x18\x01\x20\x03(\x0b2+.hw.trezor.messages.cos\
    mos.CosmosSignerInfoR\x0bsignerInfos\x126\n\x03fee\x18\x02\x20\x02(\x0b2\
    $.hw.trezor.messages.cosmos.CosmosFeeR\x03fee\"\xbb\x01\n\x10CosmosSigne\
    rInfo\x12C\n\npublic_key\x18\x01\x20\x02(\x0b2$.hw.trezor.messages.cosmo\
    s.CosmosAnyR\tpublicKey\x12F\n\tmode_info\x18\x02\x20\x02(\x0b2).hw.trez\
    or.messages.cosmos.CosmosModeInfoR\x08modeInfo\x12\x1a\n\x08sequence\x18\
    \x03\x20\x02(\x04R\x08sequence\"Y\n\x0eCosmosModeInfo\x12G\n\x06single\
    \x18\x01\x20\x02(\x0b2/.hw.trezor.messages.cosmos.CosmosModeInfoSingleR\
    \x06single\"U\n\x14CosmosModeInfoSingle\x12=\n\x04mode\x18\x01\x20\x02(\
    \x0e2).hw.trezor.messages.cosmos.CosmosSignModeR\x04mode\"\x8b\x01\n\x0c\
    CosmosTxBody\x12@\n\x08messages\x18\x01\x20\x03(\x0b2$.hw.trezor.message\
    s.cosmos.CosmosAnyR\x08messages\x12\x12\n\x04memo\x18\x02\x20\x01(\tR\
    \x04memo\x12%\n\x0etimeout_height\x18\x03\x20\x01(\x04R\rtimeoutHeight\"\
    \x94\x01\n\x11CosmosBankMsgSend\x12!\n\x0cfrom_address\x18\x01\x20\x02(\
    \tR\x0bfromAddress\x12\x1d\n\nto_address\x18\x02\x20\x02(\tR\ttoAddress\
    \x12=\n\x06amount\x18\x03\x20\x03(\x0b2%.hw.trezor.messages.cosmos.Cosmo\
    sCoinR\x06amount\"\x97\x01\n\tCosmosFee\x12=\n\x06amount\x18\x01\x20\x03\
    (\x0b2%.hw.trezor.messages.cosmos.CosmosCoinR\x06amount\x12\x1b\n\tgas_l\
    imit\x18\x02\x20\x02(\x04R\x08gasLimit\x12\x14\n\x05payer\x18\x03\x20\
    \x01(\tR\x05payer\x12\x18\n\x07granter\x18\x04\x20\x01(\tR\x07granter\":\
    \n\nCosmosCoin\x12\x14\n\x05denom\x18\x01\x20\x02(\tR\x05denom\x12\x16\n\
    \x06amount\x18\x02\x20\x02(\tR\x06amount\")\n\x15CosmosSecp256k1Pubkey\
    \x12\x10\n\x03key\x18\x01\x20\x02(\x0cR\x03key\"<\n\tCosmosAny\x12\x19\n\
    \x08type_url\x18\x01\x20\x02(\tR\x07typeUrl\x12\x14\n\x05value\x18\x02\
    \x20\x02(\x0cR\x05value*&\n\x0eCosmosSignMode\x12\x14\n\x10SIGN_MODE_DIR\
    ECT\x10\x01B:\n#com.satoshilabs.trezor.lib.protobufB\x13TrezorMessageCos\
    mos\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(17);
            messages.push(CosmosGetAddress::generated_message_descriptor_data());
            messages.push(CosmosAddress::generated_message_descriptor_data());
            messages.push(CosmosGetPublicKey::generated_message_descriptor_data());
            messages.push(CosmosPublicKey::generated_message_descriptor_data());
            messages.push(CosmosSignTx::generated_message_descriptor_data());
            messages.push(CosmosSignedTx::generated_message_descriptor_data());
            messages.push(CosmosSignDoc::generated_message_descriptor_data());
            messages.push(CosmosAuthInfo::generated_message_descriptor_data());
            messages.push(CosmosSignerInfo::generated_message_descriptor_data());
            messages.push(CosmosModeInfo::generated_message_descriptor_data());
            messages.push(CosmosModeInfoSingle::generated_message_descriptor_data());
            messages.push(CosmosTxBody::generated_message_descriptor_data());
            messages.push(CosmosBankMsgSend::generated_message_descriptor_data());
            messages.push(CosmosFee::generated_message_descriptor_data());
            messages.push(CosmosCoin::generated_message_descriptor_data());
            messages.push(CosmosSecp256k1Pubkey::generated_message_descriptor_data());
            messages.push(CosmosAny::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CosmosSignMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
