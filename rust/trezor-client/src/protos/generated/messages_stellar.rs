// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-stellar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAsset)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarAsset {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAsset.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<StellarAssetType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAsset.code)
    pub code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAsset.issuer)
    pub issuer: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAsset.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAsset {
    fn default() -> &'a StellarAsset {
        <StellarAsset as ::protobuf::Message>::default_instance()
    }
}

impl StellarAsset {
    pub fn new() -> StellarAsset {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.stellar.StellarAssetType type = 1;

    pub fn type_(&self) -> StellarAssetType {
        match self.type_ {
            Some(e) => e.enum_value_or(StellarAssetType::NATIVE),
            None => StellarAssetType::NATIVE,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: StellarAssetType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string code = 2;

    pub fn code(&self) -> &str {
        match self.code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        if self.code.is_none() {
            self.code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        self.code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string issuer = 3;

    pub fn issuer(&self) -> &str {
        match self.issuer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_issuer(&mut self) {
        self.issuer = ::std::option::Option::None;
    }

    pub fn has_issuer(&self) -> bool {
        self.issuer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_issuer(&mut self, v: ::std::string::String) {
        self.issuer = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer(&mut self) -> &mut ::std::string::String {
        if self.issuer.is_none() {
            self.issuer = ::std::option::Option::Some(::std::string::String::new());
        }
        self.issuer.as_mut().unwrap()
    }

    // Take field
    pub fn take_issuer(&mut self) -> ::std::string::String {
        self.issuer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarAsset| { &m.type_ },
            |m: &mut StellarAsset| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "code",
            |m: &StellarAsset| { &m.code },
            |m: &mut StellarAsset| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "issuer",
            |m: &StellarAsset| { &m.issuer },
            |m: &mut StellarAsset| { &mut m.issuer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAsset>(
            "StellarAsset",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAsset {
    const NAME: &'static str = "StellarAsset";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.code = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.issuer = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.issuer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.issuer.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAsset {
        StellarAsset::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.code = ::std::option::Option::None;
        self.issuer = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAsset {
        static instance: StellarAsset = StellarAsset {
            type_: ::std::option::Option::None,
            code: ::std::option::Option::None,
            issuer: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAsset {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAsset").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAsset {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarGetAddress)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarGetAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarGetAddress.chunkify)
    pub chunkify: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarGetAddress {
    fn default() -> &'a StellarGetAddress {
        <StellarGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl StellarGetAddress {
    pub fn new() -> StellarGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    // optional bool chunkify = 3;

    pub fn chunkify(&self) -> bool {
        self.chunkify.unwrap_or(false)
    }

    pub fn clear_chunkify(&mut self) {
        self.chunkify = ::std::option::Option::None;
    }

    pub fn has_chunkify(&self) -> bool {
        self.chunkify.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunkify(&mut self, v: bool) {
        self.chunkify = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &StellarGetAddress| { &m.address_n },
            |m: &mut StellarGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &StellarGetAddress| { &m.show_display },
            |m: &mut StellarGetAddress| { &mut m.show_display },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "chunkify",
            |m: &StellarGetAddress| { &m.chunkify },
            |m: &mut StellarGetAddress| { &mut m.chunkify },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarGetAddress>(
            "StellarGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarGetAddress {
    const NAME: &'static str = "StellarGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.chunkify = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        if let Some(v) = self.chunkify {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.chunkify {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarGetAddress {
        StellarGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.chunkify = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarGetAddress {
        static instance: StellarGetAddress = StellarGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            chunkify: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAddress)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAddress {
    fn default() -> &'a StellarAddress {
        <StellarAddress as ::protobuf::Message>::default_instance()
    }
}

impl StellarAddress {
    pub fn new() -> StellarAddress {
        ::std::default::Default::default()
    }

    // required string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &StellarAddress| { &m.address },
            |m: &mut StellarAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAddress>(
            "StellarAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAddress {
    const NAME: &'static str = "StellarAddress";

    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAddress {
        StellarAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAddress {
        static instance: StellarAddress = StellarAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSignTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.network_passphrase)
    pub network_passphrase: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.fee)
    pub fee: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.sequence_number)
    pub sequence_number: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.timebounds_start)
    pub timebounds_start: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.timebounds_end)
    pub timebounds_end: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_type)
    pub memo_type: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_sign_tx::StellarMemoType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_text)
    pub memo_text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_id)
    pub memo_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_hash)
    pub memo_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.num_operations)
    pub num_operations: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSignTx {
    fn default() -> &'a StellarSignTx {
        <StellarSignTx as ::protobuf::Message>::default_instance()
    }
}

impl StellarSignTx {
    pub fn new() -> StellarSignTx {
        ::std::default::Default::default()
    }

    // required string network_passphrase = 3;

    pub fn network_passphrase(&self) -> &str {
        match self.network_passphrase.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_network_passphrase(&mut self) {
        self.network_passphrase = ::std::option::Option::None;
    }

    pub fn has_network_passphrase(&self) -> bool {
        self.network_passphrase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_passphrase(&mut self, v: ::std::string::String) {
        self.network_passphrase = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_passphrase(&mut self) -> &mut ::std::string::String {
        if self.network_passphrase.is_none() {
            self.network_passphrase = ::std::option::Option::Some(::std::string::String::new());
        }
        self.network_passphrase.as_mut().unwrap()
    }

    // Take field
    pub fn take_network_passphrase(&mut self) -> ::std::string::String {
        self.network_passphrase.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string source_account = 4;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 fee = 5;

    pub fn fee(&self) -> u32 {
        self.fee.unwrap_or(0)
    }

    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u32) {
        self.fee = ::std::option::Option::Some(v);
    }

    // required uint64 sequence_number = 6;

    pub fn sequence_number(&self) -> u64 {
        self.sequence_number.unwrap_or(0)
    }

    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = ::std::option::Option::None;
    }

    pub fn has_sequence_number(&self) -> bool {
        self.sequence_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u64) {
        self.sequence_number = ::std::option::Option::Some(v);
    }

    // required uint32 timebounds_start = 8;

    pub fn timebounds_start(&self) -> u32 {
        self.timebounds_start.unwrap_or(0)
    }

    pub fn clear_timebounds_start(&mut self) {
        self.timebounds_start = ::std::option::Option::None;
    }

    pub fn has_timebounds_start(&self) -> bool {
        self.timebounds_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timebounds_start(&mut self, v: u32) {
        self.timebounds_start = ::std::option::Option::Some(v);
    }

    // required uint32 timebounds_end = 9;

    pub fn timebounds_end(&self) -> u32 {
        self.timebounds_end.unwrap_or(0)
    }

    pub fn clear_timebounds_end(&mut self) {
        self.timebounds_end = ::std::option::Option::None;
    }

    pub fn has_timebounds_end(&self) -> bool {
        self.timebounds_end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timebounds_end(&mut self, v: u32) {
        self.timebounds_end = ::std::option::Option::Some(v);
    }

    // required .hw.trezor.messages.stellar.StellarSignTx.StellarMemoType memo_type = 10;

    pub fn memo_type(&self) -> stellar_sign_tx::StellarMemoType {
        match self.memo_type {
            Some(e) => e.enum_value_or(stellar_sign_tx::StellarMemoType::NONE),
            None => stellar_sign_tx::StellarMemoType::NONE,
        }
    }

    pub fn clear_memo_type(&mut self) {
        self.memo_type = ::std::option::Option::None;
    }

    pub fn has_memo_type(&self) -> bool {
        self.memo_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_type(&mut self, v: stellar_sign_tx::StellarMemoType) {
        self.memo_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string memo_text = 11;

    pub fn memo_text(&self) -> &str {
        match self.memo_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_memo_text(&mut self) {
        self.memo_text = ::std::option::Option::None;
    }

    pub fn has_memo_text(&self) -> bool {
        self.memo_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_text(&mut self, v: ::std::string::String) {
        self.memo_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo_text(&mut self) -> &mut ::std::string::String {
        if self.memo_text.is_none() {
            self.memo_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.memo_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo_text(&mut self) -> ::std::string::String {
        self.memo_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 memo_id = 12;

    pub fn memo_id(&self) -> u64 {
        self.memo_id.unwrap_or(0)
    }

    pub fn clear_memo_id(&mut self) {
        self.memo_id = ::std::option::Option::None;
    }

    pub fn has_memo_id(&self) -> bool {
        self.memo_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_id(&mut self, v: u64) {
        self.memo_id = ::std::option::Option::Some(v);
    }

    // optional bytes memo_hash = 13;

    pub fn memo_hash(&self) -> &[u8] {
        match self.memo_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_memo_hash(&mut self) {
        self.memo_hash = ::std::option::Option::None;
    }

    pub fn has_memo_hash(&self) -> bool {
        self.memo_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.memo_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memo_hash.is_none() {
            self.memo_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.memo_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.memo_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 num_operations = 14;

    pub fn num_operations(&self) -> u32 {
        self.num_operations.unwrap_or(0)
    }

    pub fn clear_num_operations(&mut self) {
        self.num_operations = ::std::option::Option::None;
    }

    pub fn has_num_operations(&self) -> bool {
        self.num_operations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_operations(&mut self, v: u32) {
        self.num_operations = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &StellarSignTx| { &m.address_n },
            |m: &mut StellarSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network_passphrase",
            |m: &StellarSignTx| { &m.network_passphrase },
            |m: &mut StellarSignTx| { &mut m.network_passphrase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarSignTx| { &m.source_account },
            |m: &mut StellarSignTx| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fee",
            |m: &StellarSignTx| { &m.fee },
            |m: &mut StellarSignTx| { &mut m.fee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence_number",
            |m: &StellarSignTx| { &m.sequence_number },
            |m: &mut StellarSignTx| { &mut m.sequence_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timebounds_start",
            |m: &StellarSignTx| { &m.timebounds_start },
            |m: &mut StellarSignTx| { &mut m.timebounds_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timebounds_end",
            |m: &StellarSignTx| { &m.timebounds_end },
            |m: &mut StellarSignTx| { &mut m.timebounds_end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_type",
            |m: &StellarSignTx| { &m.memo_type },
            |m: &mut StellarSignTx| { &mut m.memo_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_text",
            |m: &StellarSignTx| { &m.memo_text },
            |m: &mut StellarSignTx| { &mut m.memo_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_id",
            |m: &StellarSignTx| { &m.memo_id },
            |m: &mut StellarSignTx| { &mut m.memo_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_hash",
            |m: &StellarSignTx| { &m.memo_hash },
            |m: &mut StellarSignTx| { &mut m.memo_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_operations",
            |m: &StellarSignTx| { &m.num_operations },
            |m: &mut StellarSignTx| { &mut m.num_operations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSignTx>(
            "StellarSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSignTx {
    const NAME: &'static str = "StellarSignTx";

    fn is_initialized(&self) -> bool {
        if self.network_passphrase.is_none() {
            return false;
        }
        if self.source_account.is_none() {
            return false;
        }
        if self.fee.is_none() {
            return false;
        }
        if self.sequence_number.is_none() {
            return false;
        }
        if self.timebounds_start.is_none() {
            return false;
        }
        if self.timebounds_end.is_none() {
            return false;
        }
        if self.memo_type.is_none() {
            return false;
        }
        if self.num_operations.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                16 => {
                    self.address_n.push(is.read_uint32()?);
                },
                26 => {
                    self.network_passphrase = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.fee = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.sequence_number = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.timebounds_start = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.timebounds_end = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.memo_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                90 => {
                    self.memo_text = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.memo_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                106 => {
                    self.memo_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                112 => {
                    self.num_operations = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.sequence_number {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.timebounds_start {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.timebounds_end {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.memo_type {
            my_size += ::protobuf::rt::int32_size(10, v.value());
        }
        if let Some(v) = self.memo_text.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.memo_id {
            my_size += ::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.memo_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(13, &v);
        }
        if let Some(v) = self.num_operations {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.fee {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.sequence_number {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.timebounds_start {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.timebounds_end {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.memo_type {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.memo_text.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.memo_id {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.memo_hash.as_ref() {
            os.write_bytes(13, v)?;
        }
        if let Some(v) = self.num_operations {
            os.write_uint32(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSignTx {
        StellarSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.network_passphrase = ::std::option::Option::None;
        self.source_account = ::std::option::Option::None;
        self.fee = ::std::option::Option::None;
        self.sequence_number = ::std::option::Option::None;
        self.timebounds_start = ::std::option::Option::None;
        self.timebounds_end = ::std::option::Option::None;
        self.memo_type = ::std::option::Option::None;
        self.memo_text = ::std::option::Option::None;
        self.memo_id = ::std::option::Option::None;
        self.memo_hash = ::std::option::Option::None;
        self.num_operations = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSignTx {
        static instance: StellarSignTx = StellarSignTx {
            address_n: ::std::vec::Vec::new(),
            network_passphrase: ::std::option::Option::None,
            source_account: ::std::option::Option::None,
            fee: ::std::option::Option::None,
            sequence_number: ::std::option::Option::None,
            timebounds_start: ::std::option::Option::None,
            timebounds_end: ::std::option::Option::None,
            memo_type: ::std::option::Option::None,
            memo_text: ::std::option::Option::None,
            memo_id: ::std::option::Option::None,
            memo_hash: ::std::option::Option::None,
            num_operations: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarSignTx`
pub mod stellar_sign_tx {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType)
    pub enum StellarMemoType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType.NONE)
        NONE = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType.TEXT)
        TEXT = 1,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType.ID)
        ID = 2,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType.HASH)
        HASH = 3,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSignTx.StellarMemoType.RETURN)
        RETURN = 4,
    }

    impl ::protobuf::Enum for StellarMemoType {
        const NAME: &'static str = "StellarMemoType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarMemoType> {
            match value {
                0 => ::std::option::Option::Some(StellarMemoType::NONE),
                1 => ::std::option::Option::Some(StellarMemoType::TEXT),
                2 => ::std::option::Option::Some(StellarMemoType::ID),
                3 => ::std::option::Option::Some(StellarMemoType::HASH),
                4 => ::std::option::Option::Some(StellarMemoType::RETURN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarMemoType> {
            match str {
                "NONE" => ::std::option::Option::Some(StellarMemoType::NONE),
                "TEXT" => ::std::option::Option::Some(StellarMemoType::TEXT),
                "ID" => ::std::option::Option::Some(StellarMemoType::ID),
                "HASH" => ::std::option::Option::Some(StellarMemoType::HASH),
                "RETURN" => ::std::option::Option::Some(StellarMemoType::RETURN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarMemoType] = &[
            StellarMemoType::NONE,
            StellarMemoType::TEXT,
            StellarMemoType::ID,
            StellarMemoType::HASH,
            StellarMemoType::RETURN,
        ];
    }

    impl ::protobuf::EnumFull for StellarMemoType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarSignTx.StellarMemoType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarMemoType {
        fn default() -> Self {
            StellarMemoType::NONE
        }
    }

    impl StellarMemoType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarMemoType>("StellarSignTx.StellarMemoType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarTxOpRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarTxOpRequest {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarTxOpRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarTxOpRequest {
    fn default() -> &'a StellarTxOpRequest {
        <StellarTxOpRequest as ::protobuf::Message>::default_instance()
    }
}

impl StellarTxOpRequest {
    pub fn new() -> StellarTxOpRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarTxOpRequest>(
            "StellarTxOpRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarTxOpRequest {
    const NAME: &'static str = "StellarTxOpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarTxOpRequest {
        StellarTxOpRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarTxOpRequest {
        static instance: StellarTxOpRequest = StellarTxOpRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarTxOpRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarTxOpRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarTxOpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarTxOpRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarPaymentOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarPaymentOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.asset)
    pub asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.amount)
    pub amount: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarPaymentOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarPaymentOp {
    fn default() -> &'a StellarPaymentOp {
        <StellarPaymentOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarPaymentOp {
    pub fn new() -> StellarPaymentOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string destination_account = 2;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarPaymentOp| { &m.source_account },
            |m: &mut StellarPaymentOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarPaymentOp| { &m.destination_account },
            |m: &mut StellarPaymentOp| { &mut m.destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "asset",
            |m: &StellarPaymentOp| { &m.asset },
            |m: &mut StellarPaymentOp| { &mut m.asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarPaymentOp| { &m.amount },
            |m: &mut StellarPaymentOp| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarPaymentOp>(
            "StellarPaymentOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarPaymentOp {
    const NAME: &'static str = "StellarPaymentOp";

    fn is_initialized(&self) -> bool {
        if self.destination_account.is_none() {
            return false;
        }
        if self.asset.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        for v in &self.asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarPaymentOp {
        StellarPaymentOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.asset.clear();
        self.amount = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarPaymentOp {
        static instance: StellarPaymentOp = StellarPaymentOp {
            source_account: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarPaymentOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarPaymentOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarPaymentOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarPaymentOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarCreateAccountOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarCreateAccountOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.new_account)
    pub new_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.starting_balance)
    pub starting_balance: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarCreateAccountOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarCreateAccountOp {
    fn default() -> &'a StellarCreateAccountOp {
        <StellarCreateAccountOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarCreateAccountOp {
    pub fn new() -> StellarCreateAccountOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string new_account = 2;

    pub fn new_account(&self) -> &str {
        match self.new_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_account(&mut self) {
        self.new_account = ::std::option::Option::None;
    }

    pub fn has_new_account(&self) -> bool {
        self.new_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_account(&mut self, v: ::std::string::String) {
        self.new_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_account(&mut self) -> &mut ::std::string::String {
        if self.new_account.is_none() {
            self.new_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_account(&mut self) -> ::std::string::String {
        self.new_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 starting_balance = 3;

    pub fn starting_balance(&self) -> i64 {
        self.starting_balance.unwrap_or(0)
    }

    pub fn clear_starting_balance(&mut self) {
        self.starting_balance = ::std::option::Option::None;
    }

    pub fn has_starting_balance(&self) -> bool {
        self.starting_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_starting_balance(&mut self, v: i64) {
        self.starting_balance = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarCreateAccountOp| { &m.source_account },
            |m: &mut StellarCreateAccountOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_account",
            |m: &StellarCreateAccountOp| { &m.new_account },
            |m: &mut StellarCreateAccountOp| { &mut m.new_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "starting_balance",
            |m: &StellarCreateAccountOp| { &m.starting_balance },
            |m: &mut StellarCreateAccountOp| { &mut m.starting_balance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarCreateAccountOp>(
            "StellarCreateAccountOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarCreateAccountOp {
    const NAME: &'static str = "StellarCreateAccountOp";

    fn is_initialized(&self) -> bool {
        if self.new_account.is_none() {
            return false;
        }
        if self.starting_balance.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.new_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.starting_balance = ::std::option::Option::Some(is.read_sint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.new_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.starting_balance {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.new_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.starting_balance {
            os.write_sint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarCreateAccountOp {
        StellarCreateAccountOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.new_account = ::std::option::Option::None;
        self.starting_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarCreateAccountOp {
        static instance: StellarCreateAccountOp = StellarCreateAccountOp {
            source_account: ::std::option::Option::None,
            new_account: ::std::option::Option::None,
            starting_balance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarCreateAccountOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarCreateAccountOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarCreateAccountOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarCreateAccountOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarPathPaymentStrictReceiveOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.send_asset)
    pub send_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.send_max)
    pub send_max: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.destination_asset)
    pub destination_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.destination_amount)
    pub destination_amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.paths)
    pub paths: ::std::vec::Vec<StellarAsset>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarPathPaymentStrictReceiveOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarPathPaymentStrictReceiveOp {
    fn default() -> &'a StellarPathPaymentStrictReceiveOp {
        <StellarPathPaymentStrictReceiveOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarPathPaymentStrictReceiveOp {
    pub fn new() -> StellarPathPaymentStrictReceiveOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 send_max = 3;

    pub fn send_max(&self) -> i64 {
        self.send_max.unwrap_or(0)
    }

    pub fn clear_send_max(&mut self) {
        self.send_max = ::std::option::Option::None;
    }

    pub fn has_send_max(&self) -> bool {
        self.send_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_max(&mut self, v: i64) {
        self.send_max = ::std::option::Option::Some(v);
    }

    // required string destination_account = 4;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 destination_amount = 6;

    pub fn destination_amount(&self) -> i64 {
        self.destination_amount.unwrap_or(0)
    }

    pub fn clear_destination_amount(&mut self) {
        self.destination_amount = ::std::option::Option::None;
    }

    pub fn has_destination_amount(&self) -> bool {
        self.destination_amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_amount(&mut self, v: i64) {
        self.destination_amount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.source_account },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "send_asset",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.send_asset },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.send_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_max",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.send_max },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.send_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.destination_account },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "destination_asset",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.destination_asset },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.destination_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_amount",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.destination_amount },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.destination_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "paths",
            |m: &StellarPathPaymentStrictReceiveOp| { &m.paths },
            |m: &mut StellarPathPaymentStrictReceiveOp| { &mut m.paths },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarPathPaymentStrictReceiveOp>(
            "StellarPathPaymentStrictReceiveOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarPathPaymentStrictReceiveOp {
    const NAME: &'static str = "StellarPathPaymentStrictReceiveOp";

    fn is_initialized(&self) -> bool {
        if self.send_asset.is_none() {
            return false;
        }
        if self.send_max.is_none() {
            return false;
        }
        if self.destination_account.is_none() {
            return false;
        }
        if self.destination_asset.is_none() {
            return false;
        }
        if self.destination_amount.is_none() {
            return false;
        }
        for v in &self.send_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paths {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.send_asset)?;
                },
                24 => {
                    self.send_max = ::std::option::Option::Some(is.read_sint64()?);
                },
                34 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.destination_asset)?;
                },
                48 => {
                    self.destination_amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                58 => {
                    self.paths.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.send_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.send_max {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.destination_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.destination_amount {
            my_size += ::protobuf::rt::sint64_size(6, v);
        }
        for value in &self.paths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.send_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.send_max {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.destination_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.destination_amount {
            os.write_sint64(6, v)?;
        }
        for v in &self.paths {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarPathPaymentStrictReceiveOp {
        StellarPathPaymentStrictReceiveOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.send_asset.clear();
        self.send_max = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.destination_asset.clear();
        self.destination_amount = ::std::option::Option::None;
        self.paths.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarPathPaymentStrictReceiveOp {
        static instance: StellarPathPaymentStrictReceiveOp = StellarPathPaymentStrictReceiveOp {
            source_account: ::std::option::Option::None,
            send_asset: ::protobuf::MessageField::none(),
            send_max: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            destination_asset: ::protobuf::MessageField::none(),
            destination_amount: ::std::option::Option::None,
            paths: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarPathPaymentStrictReceiveOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarPathPaymentStrictReceiveOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarPathPaymentStrictReceiveOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarPathPaymentStrictReceiveOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarPathPaymentStrictSendOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.send_asset)
    pub send_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.send_amount)
    pub send_amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.destination_asset)
    pub destination_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.destination_min)
    pub destination_min: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.paths)
    pub paths: ::std::vec::Vec<StellarAsset>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarPathPaymentStrictSendOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarPathPaymentStrictSendOp {
    fn default() -> &'a StellarPathPaymentStrictSendOp {
        <StellarPathPaymentStrictSendOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarPathPaymentStrictSendOp {
    pub fn new() -> StellarPathPaymentStrictSendOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 send_amount = 3;

    pub fn send_amount(&self) -> i64 {
        self.send_amount.unwrap_or(0)
    }

    pub fn clear_send_amount(&mut self) {
        self.send_amount = ::std::option::Option::None;
    }

    pub fn has_send_amount(&self) -> bool {
        self.send_amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_amount(&mut self, v: i64) {
        self.send_amount = ::std::option::Option::Some(v);
    }

    // required string destination_account = 4;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 destination_min = 6;

    pub fn destination_min(&self) -> i64 {
        self.destination_min.unwrap_or(0)
    }

    pub fn clear_destination_min(&mut self) {
        self.destination_min = ::std::option::Option::None;
    }

    pub fn has_destination_min(&self) -> bool {
        self.destination_min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_min(&mut self, v: i64) {
        self.destination_min = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarPathPaymentStrictSendOp| { &m.source_account },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "send_asset",
            |m: &StellarPathPaymentStrictSendOp| { &m.send_asset },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.send_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_amount",
            |m: &StellarPathPaymentStrictSendOp| { &m.send_amount },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.send_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarPathPaymentStrictSendOp| { &m.destination_account },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "destination_asset",
            |m: &StellarPathPaymentStrictSendOp| { &m.destination_asset },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.destination_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_min",
            |m: &StellarPathPaymentStrictSendOp| { &m.destination_min },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.destination_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "paths",
            |m: &StellarPathPaymentStrictSendOp| { &m.paths },
            |m: &mut StellarPathPaymentStrictSendOp| { &mut m.paths },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarPathPaymentStrictSendOp>(
            "StellarPathPaymentStrictSendOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarPathPaymentStrictSendOp {
    const NAME: &'static str = "StellarPathPaymentStrictSendOp";

    fn is_initialized(&self) -> bool {
        if self.send_asset.is_none() {
            return false;
        }
        if self.send_amount.is_none() {
            return false;
        }
        if self.destination_account.is_none() {
            return false;
        }
        if self.destination_asset.is_none() {
            return false;
        }
        if self.destination_min.is_none() {
            return false;
        }
        for v in &self.send_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paths {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.send_asset)?;
                },
                24 => {
                    self.send_amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                34 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.destination_asset)?;
                },
                48 => {
                    self.destination_min = ::std::option::Option::Some(is.read_sint64()?);
                },
                58 => {
                    self.paths.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.send_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.send_amount {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.destination_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.destination_min {
            my_size += ::protobuf::rt::sint64_size(6, v);
        }
        for value in &self.paths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.send_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.send_amount {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.destination_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.destination_min {
            os.write_sint64(6, v)?;
        }
        for v in &self.paths {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarPathPaymentStrictSendOp {
        StellarPathPaymentStrictSendOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.send_asset.clear();
        self.send_amount = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.destination_asset.clear();
        self.destination_min = ::std::option::Option::None;
        self.paths.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarPathPaymentStrictSendOp {
        static instance: StellarPathPaymentStrictSendOp = StellarPathPaymentStrictSendOp {
            source_account: ::std::option::Option::None,
            send_asset: ::protobuf::MessageField::none(),
            send_amount: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            destination_asset: ::protobuf::MessageField::none(),
            destination_min: ::std::option::Option::None,
            paths: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarPathPaymentStrictSendOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarPathPaymentStrictSendOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarPathPaymentStrictSendOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarPathPaymentStrictSendOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarManageSellOfferOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarManageSellOfferOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.selling_asset)
    pub selling_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.buying_asset)
    pub buying_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.price_n)
    pub price_n: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.price_d)
    pub price_d: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageSellOfferOp.offer_id)
    pub offer_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarManageSellOfferOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarManageSellOfferOp {
    fn default() -> &'a StellarManageSellOfferOp {
        <StellarManageSellOfferOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarManageSellOfferOp {
    pub fn new() -> StellarManageSellOfferOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // required uint32 price_n = 5;

    pub fn price_n(&self) -> u32 {
        self.price_n.unwrap_or(0)
    }

    pub fn clear_price_n(&mut self) {
        self.price_n = ::std::option::Option::None;
    }

    pub fn has_price_n(&self) -> bool {
        self.price_n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_n(&mut self, v: u32) {
        self.price_n = ::std::option::Option::Some(v);
    }

    // required uint32 price_d = 6;

    pub fn price_d(&self) -> u32 {
        self.price_d.unwrap_or(0)
    }

    pub fn clear_price_d(&mut self) {
        self.price_d = ::std::option::Option::None;
    }

    pub fn has_price_d(&self) -> bool {
        self.price_d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_d(&mut self, v: u32) {
        self.price_d = ::std::option::Option::Some(v);
    }

    // required uint64 offer_id = 7;

    pub fn offer_id(&self) -> u64 {
        self.offer_id.unwrap_or(0)
    }

    pub fn clear_offer_id(&mut self) {
        self.offer_id = ::std::option::Option::None;
    }

    pub fn has_offer_id(&self) -> bool {
        self.offer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offer_id(&mut self, v: u64) {
        self.offer_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarManageSellOfferOp| { &m.source_account },
            |m: &mut StellarManageSellOfferOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "selling_asset",
            |m: &StellarManageSellOfferOp| { &m.selling_asset },
            |m: &mut StellarManageSellOfferOp| { &mut m.selling_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "buying_asset",
            |m: &StellarManageSellOfferOp| { &m.buying_asset },
            |m: &mut StellarManageSellOfferOp| { &mut m.buying_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarManageSellOfferOp| { &m.amount },
            |m: &mut StellarManageSellOfferOp| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_n",
            |m: &StellarManageSellOfferOp| { &m.price_n },
            |m: &mut StellarManageSellOfferOp| { &mut m.price_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_d",
            |m: &StellarManageSellOfferOp| { &m.price_d },
            |m: &mut StellarManageSellOfferOp| { &mut m.price_d },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offer_id",
            |m: &StellarManageSellOfferOp| { &m.offer_id },
            |m: &mut StellarManageSellOfferOp| { &mut m.offer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarManageSellOfferOp>(
            "StellarManageSellOfferOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarManageSellOfferOp {
    const NAME: &'static str = "StellarManageSellOfferOp";

    fn is_initialized(&self) -> bool {
        if self.selling_asset.is_none() {
            return false;
        }
        if self.buying_asset.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        if self.price_n.is_none() {
            return false;
        }
        if self.price_d.is_none() {
            return false;
        }
        if self.offer_id.is_none() {
            return false;
        }
        for v in &self.selling_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buying_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selling_asset)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buying_asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.price_n = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.price_d = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.offer_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selling_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.price_n {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.price_d {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.offer_id {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selling_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.price_n {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.price_d {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.offer_id {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarManageSellOfferOp {
        StellarManageSellOfferOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.selling_asset.clear();
        self.buying_asset.clear();
        self.amount = ::std::option::Option::None;
        self.price_n = ::std::option::Option::None;
        self.price_d = ::std::option::Option::None;
        self.offer_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarManageSellOfferOp {
        static instance: StellarManageSellOfferOp = StellarManageSellOfferOp {
            source_account: ::std::option::Option::None,
            selling_asset: ::protobuf::MessageField::none(),
            buying_asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            price_n: ::std::option::Option::None,
            price_d: ::std::option::Option::None,
            offer_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarManageSellOfferOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarManageSellOfferOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarManageSellOfferOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarManageSellOfferOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarManageBuyOfferOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarManageBuyOfferOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.selling_asset)
    pub selling_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.buying_asset)
    pub buying_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.price_n)
    pub price_n: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.price_d)
    pub price_d: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.offer_id)
    pub offer_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarManageBuyOfferOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarManageBuyOfferOp {
    fn default() -> &'a StellarManageBuyOfferOp {
        <StellarManageBuyOfferOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarManageBuyOfferOp {
    pub fn new() -> StellarManageBuyOfferOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // required uint32 price_n = 5;

    pub fn price_n(&self) -> u32 {
        self.price_n.unwrap_or(0)
    }

    pub fn clear_price_n(&mut self) {
        self.price_n = ::std::option::Option::None;
    }

    pub fn has_price_n(&self) -> bool {
        self.price_n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_n(&mut self, v: u32) {
        self.price_n = ::std::option::Option::Some(v);
    }

    // required uint32 price_d = 6;

    pub fn price_d(&self) -> u32 {
        self.price_d.unwrap_or(0)
    }

    pub fn clear_price_d(&mut self) {
        self.price_d = ::std::option::Option::None;
    }

    pub fn has_price_d(&self) -> bool {
        self.price_d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_d(&mut self, v: u32) {
        self.price_d = ::std::option::Option::Some(v);
    }

    // required uint64 offer_id = 7;

    pub fn offer_id(&self) -> u64 {
        self.offer_id.unwrap_or(0)
    }

    pub fn clear_offer_id(&mut self) {
        self.offer_id = ::std::option::Option::None;
    }

    pub fn has_offer_id(&self) -> bool {
        self.offer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offer_id(&mut self, v: u64) {
        self.offer_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarManageBuyOfferOp| { &m.source_account },
            |m: &mut StellarManageBuyOfferOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "selling_asset",
            |m: &StellarManageBuyOfferOp| { &m.selling_asset },
            |m: &mut StellarManageBuyOfferOp| { &mut m.selling_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "buying_asset",
            |m: &StellarManageBuyOfferOp| { &m.buying_asset },
            |m: &mut StellarManageBuyOfferOp| { &mut m.buying_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarManageBuyOfferOp| { &m.amount },
            |m: &mut StellarManageBuyOfferOp| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_n",
            |m: &StellarManageBuyOfferOp| { &m.price_n },
            |m: &mut StellarManageBuyOfferOp| { &mut m.price_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_d",
            |m: &StellarManageBuyOfferOp| { &m.price_d },
            |m: &mut StellarManageBuyOfferOp| { &mut m.price_d },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offer_id",
            |m: &StellarManageBuyOfferOp| { &m.offer_id },
            |m: &mut StellarManageBuyOfferOp| { &mut m.offer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarManageBuyOfferOp>(
            "StellarManageBuyOfferOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarManageBuyOfferOp {
    const NAME: &'static str = "StellarManageBuyOfferOp";

    fn is_initialized(&self) -> bool {
        if self.selling_asset.is_none() {
            return false;
        }
        if self.buying_asset.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        if self.price_n.is_none() {
            return false;
        }
        if self.price_d.is_none() {
            return false;
        }
        if self.offer_id.is_none() {
            return false;
        }
        for v in &self.selling_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buying_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selling_asset)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buying_asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.price_n = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.price_d = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.offer_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selling_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.price_n {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.price_d {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.offer_id {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selling_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.price_n {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.price_d {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.offer_id {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarManageBuyOfferOp {
        StellarManageBuyOfferOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.selling_asset.clear();
        self.buying_asset.clear();
        self.amount = ::std::option::Option::None;
        self.price_n = ::std::option::Option::None;
        self.price_d = ::std::option::Option::None;
        self.offer_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarManageBuyOfferOp {
        static instance: StellarManageBuyOfferOp = StellarManageBuyOfferOp {
            source_account: ::std::option::Option::None,
            selling_asset: ::protobuf::MessageField::none(),
            buying_asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            price_n: ::std::option::Option::None,
            price_d: ::std::option::Option::None,
            offer_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarManageBuyOfferOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarManageBuyOfferOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarManageBuyOfferOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarManageBuyOfferOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarCreatePassiveSellOfferOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.selling_asset)
    pub selling_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.buying_asset)
    pub buying_asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.price_n)
    pub price_n: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.price_d)
    pub price_d: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarCreatePassiveSellOfferOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarCreatePassiveSellOfferOp {
    fn default() -> &'a StellarCreatePassiveSellOfferOp {
        <StellarCreatePassiveSellOfferOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarCreatePassiveSellOfferOp {
    pub fn new() -> StellarCreatePassiveSellOfferOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // required uint32 price_n = 5;

    pub fn price_n(&self) -> u32 {
        self.price_n.unwrap_or(0)
    }

    pub fn clear_price_n(&mut self) {
        self.price_n = ::std::option::Option::None;
    }

    pub fn has_price_n(&self) -> bool {
        self.price_n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_n(&mut self, v: u32) {
        self.price_n = ::std::option::Option::Some(v);
    }

    // required uint32 price_d = 6;

    pub fn price_d(&self) -> u32 {
        self.price_d.unwrap_or(0)
    }

    pub fn clear_price_d(&mut self) {
        self.price_d = ::std::option::Option::None;
    }

    pub fn has_price_d(&self) -> bool {
        self.price_d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_d(&mut self, v: u32) {
        self.price_d = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarCreatePassiveSellOfferOp| { &m.source_account },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "selling_asset",
            |m: &StellarCreatePassiveSellOfferOp| { &m.selling_asset },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.selling_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "buying_asset",
            |m: &StellarCreatePassiveSellOfferOp| { &m.buying_asset },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.buying_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarCreatePassiveSellOfferOp| { &m.amount },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_n",
            |m: &StellarCreatePassiveSellOfferOp| { &m.price_n },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.price_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_d",
            |m: &StellarCreatePassiveSellOfferOp| { &m.price_d },
            |m: &mut StellarCreatePassiveSellOfferOp| { &mut m.price_d },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarCreatePassiveSellOfferOp>(
            "StellarCreatePassiveSellOfferOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarCreatePassiveSellOfferOp {
    const NAME: &'static str = "StellarCreatePassiveSellOfferOp";

    fn is_initialized(&self) -> bool {
        if self.selling_asset.is_none() {
            return false;
        }
        if self.buying_asset.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        if self.price_n.is_none() {
            return false;
        }
        if self.price_d.is_none() {
            return false;
        }
        for v in &self.selling_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buying_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selling_asset)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buying_asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.price_n = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.price_d = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selling_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.price_n {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.price_d {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selling_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.price_n {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.price_d {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarCreatePassiveSellOfferOp {
        StellarCreatePassiveSellOfferOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.selling_asset.clear();
        self.buying_asset.clear();
        self.amount = ::std::option::Option::None;
        self.price_n = ::std::option::Option::None;
        self.price_d = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarCreatePassiveSellOfferOp {
        static instance: StellarCreatePassiveSellOfferOp = StellarCreatePassiveSellOfferOp {
            source_account: ::std::option::Option::None,
            selling_asset: ::protobuf::MessageField::none(),
            buying_asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            price_n: ::std::option::Option::None,
            price_d: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarCreatePassiveSellOfferOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarCreatePassiveSellOfferOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarCreatePassiveSellOfferOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarCreatePassiveSellOfferOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSetOptionsOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSetOptionsOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.inflation_destination_account)
    pub inflation_destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.clear_flags)
    pub clear_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.set_flags)
    pub set_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.master_weight)
    pub master_weight: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.low_threshold)
    pub low_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.medium_threshold)
    pub medium_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.high_threshold)
    pub high_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.home_domain)
    pub home_domain: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_type)
    pub signer_type: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_set_options_op::StellarSignerType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_key)
    pub signer_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_weight)
    pub signer_weight: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSetOptionsOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSetOptionsOp {
    fn default() -> &'a StellarSetOptionsOp {
        <StellarSetOptionsOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarSetOptionsOp {
    pub fn new() -> StellarSetOptionsOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string inflation_destination_account = 2;

    pub fn inflation_destination_account(&self) -> &str {
        match self.inflation_destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_inflation_destination_account(&mut self) {
        self.inflation_destination_account = ::std::option::Option::None;
    }

    pub fn has_inflation_destination_account(&self) -> bool {
        self.inflation_destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inflation_destination_account(&mut self, v: ::std::string::String) {
        self.inflation_destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inflation_destination_account(&mut self) -> &mut ::std::string::String {
        if self.inflation_destination_account.is_none() {
            self.inflation_destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.inflation_destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_inflation_destination_account(&mut self) -> ::std::string::String {
        self.inflation_destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 clear_flags = 3;

    pub fn clear_flags(&self) -> u32 {
        self.clear_flags.unwrap_or(0)
    }

    pub fn clear_clear_flags(&mut self) {
        self.clear_flags = ::std::option::Option::None;
    }

    pub fn has_clear_flags(&self) -> bool {
        self.clear_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clear_flags(&mut self, v: u32) {
        self.clear_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 set_flags = 4;

    pub fn set_flags(&self) -> u32 {
        self.set_flags.unwrap_or(0)
    }

    pub fn clear_set_flags(&mut self) {
        self.set_flags = ::std::option::Option::None;
    }

    pub fn has_set_flags(&self) -> bool {
        self.set_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_set_flags(&mut self, v: u32) {
        self.set_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 master_weight = 5;

    pub fn master_weight(&self) -> u32 {
        self.master_weight.unwrap_or(0)
    }

    pub fn clear_master_weight(&mut self) {
        self.master_weight = ::std::option::Option::None;
    }

    pub fn has_master_weight(&self) -> bool {
        self.master_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_weight(&mut self, v: u32) {
        self.master_weight = ::std::option::Option::Some(v);
    }

    // optional uint32 low_threshold = 6;

    pub fn low_threshold(&self) -> u32 {
        self.low_threshold.unwrap_or(0)
    }

    pub fn clear_low_threshold(&mut self) {
        self.low_threshold = ::std::option::Option::None;
    }

    pub fn has_low_threshold(&self) -> bool {
        self.low_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_threshold(&mut self, v: u32) {
        self.low_threshold = ::std::option::Option::Some(v);
    }

    // optional uint32 medium_threshold = 7;

    pub fn medium_threshold(&self) -> u32 {
        self.medium_threshold.unwrap_or(0)
    }

    pub fn clear_medium_threshold(&mut self) {
        self.medium_threshold = ::std::option::Option::None;
    }

    pub fn has_medium_threshold(&self) -> bool {
        self.medium_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_medium_threshold(&mut self, v: u32) {
        self.medium_threshold = ::std::option::Option::Some(v);
    }

    // optional uint32 high_threshold = 8;

    pub fn high_threshold(&self) -> u32 {
        self.high_threshold.unwrap_or(0)
    }

    pub fn clear_high_threshold(&mut self) {
        self.high_threshold = ::std::option::Option::None;
    }

    pub fn has_high_threshold(&self) -> bool {
        self.high_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_threshold(&mut self, v: u32) {
        self.high_threshold = ::std::option::Option::Some(v);
    }

    // optional string home_domain = 9;

    pub fn home_domain(&self) -> &str {
        match self.home_domain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_home_domain(&mut self) {
        self.home_domain = ::std::option::Option::None;
    }

    pub fn has_home_domain(&self) -> bool {
        self.home_domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_home_domain(&mut self, v: ::std::string::String) {
        self.home_domain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_home_domain(&mut self) -> &mut ::std::string::String {
        if self.home_domain.is_none() {
            self.home_domain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.home_domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_home_domain(&mut self) -> ::std::string::String {
        self.home_domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType signer_type = 10;

    pub fn signer_type(&self) -> stellar_set_options_op::StellarSignerType {
        match self.signer_type {
            Some(e) => e.enum_value_or(stellar_set_options_op::StellarSignerType::ACCOUNT),
            None => stellar_set_options_op::StellarSignerType::ACCOUNT,
        }
    }

    pub fn clear_signer_type(&mut self) {
        self.signer_type = ::std::option::Option::None;
    }

    pub fn has_signer_type(&self) -> bool {
        self.signer_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_type(&mut self, v: stellar_set_options_op::StellarSignerType) {
        self.signer_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bytes signer_key = 11;

    pub fn signer_key(&self) -> &[u8] {
        match self.signer_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signer_key(&mut self) {
        self.signer_key = ::std::option::Option::None;
    }

    pub fn has_signer_key(&self) -> bool {
        self.signer_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signer_key.is_none() {
            self.signer_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signer_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_signer_key(&mut self) -> ::std::vec::Vec<u8> {
        self.signer_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 signer_weight = 12;

    pub fn signer_weight(&self) -> u32 {
        self.signer_weight.unwrap_or(0)
    }

    pub fn clear_signer_weight(&mut self) {
        self.signer_weight = ::std::option::Option::None;
    }

    pub fn has_signer_weight(&self) -> bool {
        self.signer_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_weight(&mut self, v: u32) {
        self.signer_weight = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarSetOptionsOp| { &m.source_account },
            |m: &mut StellarSetOptionsOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "inflation_destination_account",
            |m: &StellarSetOptionsOp| { &m.inflation_destination_account },
            |m: &mut StellarSetOptionsOp| { &mut m.inflation_destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "clear_flags",
            |m: &StellarSetOptionsOp| { &m.clear_flags },
            |m: &mut StellarSetOptionsOp| { &mut m.clear_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "set_flags",
            |m: &StellarSetOptionsOp| { &m.set_flags },
            |m: &mut StellarSetOptionsOp| { &mut m.set_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "master_weight",
            |m: &StellarSetOptionsOp| { &m.master_weight },
            |m: &mut StellarSetOptionsOp| { &mut m.master_weight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_threshold",
            |m: &StellarSetOptionsOp| { &m.low_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.low_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "medium_threshold",
            |m: &StellarSetOptionsOp| { &m.medium_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.medium_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "high_threshold",
            |m: &StellarSetOptionsOp| { &m.high_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.high_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "home_domain",
            |m: &StellarSetOptionsOp| { &m.home_domain },
            |m: &mut StellarSetOptionsOp| { &mut m.home_domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_type",
            |m: &StellarSetOptionsOp| { &m.signer_type },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_key",
            |m: &StellarSetOptionsOp| { &m.signer_key },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_weight",
            |m: &StellarSetOptionsOp| { &m.signer_weight },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_weight },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSetOptionsOp>(
            "StellarSetOptionsOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSetOptionsOp {
    const NAME: &'static str = "StellarSetOptionsOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.inflation_destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.clear_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.set_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.master_weight = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.low_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.medium_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.high_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.home_domain = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.signer_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                90 => {
                    self.signer_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                96 => {
                    self.signer_weight = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.inflation_destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.clear_flags {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.set_flags {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.master_weight {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.low_threshold {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.medium_threshold {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.high_threshold {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.home_domain.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.signer_type {
            my_size += ::protobuf::rt::int32_size(10, v.value());
        }
        if let Some(v) = self.signer_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(11, &v);
        }
        if let Some(v) = self.signer_weight {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.inflation_destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.clear_flags {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.set_flags {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.master_weight {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.low_threshold {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.medium_threshold {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.high_threshold {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.home_domain.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.signer_type {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.signer_key.as_ref() {
            os.write_bytes(11, v)?;
        }
        if let Some(v) = self.signer_weight {
            os.write_uint32(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSetOptionsOp {
        StellarSetOptionsOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.inflation_destination_account = ::std::option::Option::None;
        self.clear_flags = ::std::option::Option::None;
        self.set_flags = ::std::option::Option::None;
        self.master_weight = ::std::option::Option::None;
        self.low_threshold = ::std::option::Option::None;
        self.medium_threshold = ::std::option::Option::None;
        self.high_threshold = ::std::option::Option::None;
        self.home_domain = ::std::option::Option::None;
        self.signer_type = ::std::option::Option::None;
        self.signer_key = ::std::option::Option::None;
        self.signer_weight = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSetOptionsOp {
        static instance: StellarSetOptionsOp = StellarSetOptionsOp {
            source_account: ::std::option::Option::None,
            inflation_destination_account: ::std::option::Option::None,
            clear_flags: ::std::option::Option::None,
            set_flags: ::std::option::Option::None,
            master_weight: ::std::option::Option::None,
            low_threshold: ::std::option::Option::None,
            medium_threshold: ::std::option::Option::None,
            high_threshold: ::std::option::Option::None,
            home_domain: ::std::option::Option::None,
            signer_type: ::std::option::Option::None,
            signer_key: ::std::option::Option::None,
            signer_weight: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSetOptionsOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSetOptionsOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSetOptionsOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSetOptionsOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarSetOptionsOp`
pub mod stellar_set_options_op {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType)
    pub enum StellarSignerType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType.ACCOUNT)
        ACCOUNT = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType.PRE_AUTH)
        PRE_AUTH = 1,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSetOptionsOp.StellarSignerType.HASH)
        HASH = 2,
    }

    impl ::protobuf::Enum for StellarSignerType {
        const NAME: &'static str = "StellarSignerType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarSignerType> {
            match value {
                0 => ::std::option::Option::Some(StellarSignerType::ACCOUNT),
                1 => ::std::option::Option::Some(StellarSignerType::PRE_AUTH),
                2 => ::std::option::Option::Some(StellarSignerType::HASH),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarSignerType> {
            match str {
                "ACCOUNT" => ::std::option::Option::Some(StellarSignerType::ACCOUNT),
                "PRE_AUTH" => ::std::option::Option::Some(StellarSignerType::PRE_AUTH),
                "HASH" => ::std::option::Option::Some(StellarSignerType::HASH),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarSignerType] = &[
            StellarSignerType::ACCOUNT,
            StellarSignerType::PRE_AUTH,
            StellarSignerType::HASH,
        ];
    }

    impl ::protobuf::EnumFull for StellarSignerType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarSetOptionsOp.StellarSignerType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarSignerType {
        fn default() -> Self {
            StellarSignerType::ACCOUNT
        }
    }

    impl StellarSignerType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarSignerType>("StellarSetOptionsOp.StellarSignerType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarChangeTrustOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarChangeTrustOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.asset)
    pub asset: ::protobuf::MessageField<StellarAsset>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.limit)
    pub limit: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarChangeTrustOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarChangeTrustOp {
    fn default() -> &'a StellarChangeTrustOp {
        <StellarChangeTrustOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarChangeTrustOp {
    pub fn new() -> StellarChangeTrustOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 limit = 3;

    pub fn limit(&self) -> u64 {
        self.limit.unwrap_or(0)
    }

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarChangeTrustOp| { &m.source_account },
            |m: &mut StellarChangeTrustOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAsset>(
            "asset",
            |m: &StellarChangeTrustOp| { &m.asset },
            |m: &mut StellarChangeTrustOp| { &mut m.asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "limit",
            |m: &StellarChangeTrustOp| { &m.limit },
            |m: &mut StellarChangeTrustOp| { &mut m.limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarChangeTrustOp>(
            "StellarChangeTrustOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarChangeTrustOp {
    const NAME: &'static str = "StellarChangeTrustOp";

    fn is_initialized(&self) -> bool {
        if self.asset.is_none() {
            return false;
        }
        if self.limit.is_none() {
            return false;
        }
        for v in &self.asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                },
                24 => {
                    self.limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.limit {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.limit {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarChangeTrustOp {
        StellarChangeTrustOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.asset.clear();
        self.limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarChangeTrustOp {
        static instance: StellarChangeTrustOp = StellarChangeTrustOp {
            source_account: ::std::option::Option::None,
            asset: ::protobuf::MessageField::none(),
            limit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarChangeTrustOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarChangeTrustOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarChangeTrustOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarChangeTrustOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAllowTrustOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarAllowTrustOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.trusted_account)
    pub trusted_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.asset_type)
    pub asset_type: ::std::option::Option<::protobuf::EnumOrUnknown<StellarAssetType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.asset_code)
    pub asset_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.is_authorized)
    pub is_authorized: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAllowTrustOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAllowTrustOp {
    fn default() -> &'a StellarAllowTrustOp {
        <StellarAllowTrustOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarAllowTrustOp {
    pub fn new() -> StellarAllowTrustOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string trusted_account = 2;

    pub fn trusted_account(&self) -> &str {
        match self.trusted_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_trusted_account(&mut self) {
        self.trusted_account = ::std::option::Option::None;
    }

    pub fn has_trusted_account(&self) -> bool {
        self.trusted_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusted_account(&mut self, v: ::std::string::String) {
        self.trusted_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_account(&mut self) -> &mut ::std::string::String {
        if self.trusted_account.is_none() {
            self.trusted_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.trusted_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusted_account(&mut self) -> ::std::string::String {
        self.trusted_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hw.trezor.messages.stellar.StellarAssetType asset_type = 3;

    pub fn asset_type(&self) -> StellarAssetType {
        match self.asset_type {
            Some(e) => e.enum_value_or(StellarAssetType::NATIVE),
            None => StellarAssetType::NATIVE,
        }
    }

    pub fn clear_asset_type(&mut self) {
        self.asset_type = ::std::option::Option::None;
    }

    pub fn has_asset_type(&self) -> bool {
        self.asset_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: StellarAssetType) {
        self.asset_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string asset_code = 4;

    pub fn asset_code(&self) -> &str {
        match self.asset_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_asset_code(&mut self) {
        self.asset_code = ::std::option::Option::None;
    }

    pub fn has_asset_code(&self) -> bool {
        self.asset_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_code(&mut self, v: ::std::string::String) {
        self.asset_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_code(&mut self) -> &mut ::std::string::String {
        if self.asset_code.is_none() {
            self.asset_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.asset_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset_code(&mut self) -> ::std::string::String {
        self.asset_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bool is_authorized = 5;

    pub fn is_authorized(&self) -> bool {
        self.is_authorized.unwrap_or(false)
    }

    pub fn clear_is_authorized(&mut self) {
        self.is_authorized = ::std::option::Option::None;
    }

    pub fn has_is_authorized(&self) -> bool {
        self.is_authorized.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_authorized(&mut self, v: bool) {
        self.is_authorized = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarAllowTrustOp| { &m.source_account },
            |m: &mut StellarAllowTrustOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trusted_account",
            |m: &StellarAllowTrustOp| { &m.trusted_account },
            |m: &mut StellarAllowTrustOp| { &mut m.trusted_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "asset_type",
            |m: &StellarAllowTrustOp| { &m.asset_type },
            |m: &mut StellarAllowTrustOp| { &mut m.asset_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "asset_code",
            |m: &StellarAllowTrustOp| { &m.asset_code },
            |m: &mut StellarAllowTrustOp| { &mut m.asset_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_authorized",
            |m: &StellarAllowTrustOp| { &m.is_authorized },
            |m: &mut StellarAllowTrustOp| { &mut m.is_authorized },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAllowTrustOp>(
            "StellarAllowTrustOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAllowTrustOp {
    const NAME: &'static str = "StellarAllowTrustOp";

    fn is_initialized(&self) -> bool {
        if self.trusted_account.is_none() {
            return false;
        }
        if self.asset_type.is_none() {
            return false;
        }
        if self.is_authorized.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.trusted_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.asset_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.asset_code = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.is_authorized = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.trusted_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.asset_type {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.asset_code.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.is_authorized {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.trusted_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.asset_type {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.asset_code.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.is_authorized {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAllowTrustOp {
        StellarAllowTrustOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.trusted_account = ::std::option::Option::None;
        self.asset_type = ::std::option::Option::None;
        self.asset_code = ::std::option::Option::None;
        self.is_authorized = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAllowTrustOp {
        static instance: StellarAllowTrustOp = StellarAllowTrustOp {
            source_account: ::std::option::Option::None,
            trusted_account: ::std::option::Option::None,
            asset_type: ::std::option::Option::None,
            asset_code: ::std::option::Option::None,
            is_authorized: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAllowTrustOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAllowTrustOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAllowTrustOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAllowTrustOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAccountMergeOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarAccountMergeOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAccountMergeOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAccountMergeOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAccountMergeOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAccountMergeOp {
    fn default() -> &'a StellarAccountMergeOp {
        <StellarAccountMergeOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarAccountMergeOp {
    pub fn new() -> StellarAccountMergeOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string destination_account = 2;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarAccountMergeOp| { &m.source_account },
            |m: &mut StellarAccountMergeOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarAccountMergeOp| { &m.destination_account },
            |m: &mut StellarAccountMergeOp| { &mut m.destination_account },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAccountMergeOp>(
            "StellarAccountMergeOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAccountMergeOp {
    const NAME: &'static str = "StellarAccountMergeOp";

    fn is_initialized(&self) -> bool {
        if self.destination_account.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAccountMergeOp {
        StellarAccountMergeOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAccountMergeOp {
        static instance: StellarAccountMergeOp = StellarAccountMergeOp {
            source_account: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAccountMergeOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAccountMergeOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAccountMergeOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAccountMergeOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarManageDataOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarManageDataOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarManageDataOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarManageDataOp {
    fn default() -> &'a StellarManageDataOp {
        <StellarManageDataOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarManageDataOp {
    pub fn new() -> StellarManageDataOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string key = 2;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes value = 3;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarManageDataOp| { &m.source_account },
            |m: &mut StellarManageDataOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &StellarManageDataOp| { &m.key },
            |m: &mut StellarManageDataOp| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &StellarManageDataOp| { &m.value },
            |m: &mut StellarManageDataOp| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarManageDataOp>(
            "StellarManageDataOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarManageDataOp {
    const NAME: &'static str = "StellarManageDataOp";

    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarManageDataOp {
        StellarManageDataOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarManageDataOp {
        static instance: StellarManageDataOp = StellarManageDataOp {
            source_account: ::std::option::Option::None,
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarManageDataOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarManageDataOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarManageDataOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarManageDataOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarBumpSequenceOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarBumpSequenceOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarBumpSequenceOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarBumpSequenceOp.bump_to)
    pub bump_to: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarBumpSequenceOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarBumpSequenceOp {
    fn default() -> &'a StellarBumpSequenceOp {
        <StellarBumpSequenceOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarBumpSequenceOp {
    pub fn new() -> StellarBumpSequenceOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 bump_to = 2;

    pub fn bump_to(&self) -> u64 {
        self.bump_to.unwrap_or(0)
    }

    pub fn clear_bump_to(&mut self) {
        self.bump_to = ::std::option::Option::None;
    }

    pub fn has_bump_to(&self) -> bool {
        self.bump_to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bump_to(&mut self, v: u64) {
        self.bump_to = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarBumpSequenceOp| { &m.source_account },
            |m: &mut StellarBumpSequenceOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bump_to",
            |m: &StellarBumpSequenceOp| { &m.bump_to },
            |m: &mut StellarBumpSequenceOp| { &mut m.bump_to },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarBumpSequenceOp>(
            "StellarBumpSequenceOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarBumpSequenceOp {
    const NAME: &'static str = "StellarBumpSequenceOp";

    fn is_initialized(&self) -> bool {
        if self.bump_to.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.bump_to = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.bump_to {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.bump_to {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarBumpSequenceOp {
        StellarBumpSequenceOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.bump_to = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarBumpSequenceOp {
        static instance: StellarBumpSequenceOp = StellarBumpSequenceOp {
            source_account: ::std::option::Option::None,
            bump_to: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarBumpSequenceOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarBumpSequenceOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarBumpSequenceOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarBumpSequenceOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarClaimClaimableBalanceOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarClaimClaimableBalanceOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarClaimClaimableBalanceOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarClaimClaimableBalanceOp.balance_id)
    pub balance_id: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarClaimClaimableBalanceOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarClaimClaimableBalanceOp {
    fn default() -> &'a StellarClaimClaimableBalanceOp {
        <StellarClaimClaimableBalanceOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarClaimClaimableBalanceOp {
    pub fn new() -> StellarClaimClaimableBalanceOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes balance_id = 2;

    pub fn balance_id(&self) -> &[u8] {
        match self.balance_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_balance_id(&mut self) {
        self.balance_id = ::std::option::Option::None;
    }

    pub fn has_balance_id(&self) -> bool {
        self.balance_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.balance_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.balance_id.is_none() {
            self.balance_id = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.balance_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_balance_id(&mut self) -> ::std::vec::Vec<u8> {
        self.balance_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarClaimClaimableBalanceOp| { &m.source_account },
            |m: &mut StellarClaimClaimableBalanceOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "balance_id",
            |m: &StellarClaimClaimableBalanceOp| { &m.balance_id },
            |m: &mut StellarClaimClaimableBalanceOp| { &mut m.balance_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarClaimClaimableBalanceOp>(
            "StellarClaimClaimableBalanceOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarClaimClaimableBalanceOp {
    const NAME: &'static str = "StellarClaimClaimableBalanceOp";

    fn is_initialized(&self) -> bool {
        if self.balance_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.balance_id = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.balance_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.balance_id.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarClaimClaimableBalanceOp {
        StellarClaimClaimableBalanceOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.balance_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarClaimClaimableBalanceOp {
        static instance: StellarClaimClaimableBalanceOp = StellarClaimClaimableBalanceOp {
            source_account: ::std::option::Option::None,
            balance_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarClaimClaimableBalanceOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarClaimClaimableBalanceOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarClaimClaimableBalanceOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarClaimClaimableBalanceOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSignedTx)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignedTx.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignedTx.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSignedTx {
    fn default() -> &'a StellarSignedTx {
        <StellarSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl StellarSignedTx {
    pub fn new() -> StellarSignedTx {
        ::std::default::Default::default()
    }

    // required bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &StellarSignedTx| { &m.public_key },
            |m: &mut StellarSignedTx| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &StellarSignedTx| { &m.signature },
            |m: &mut StellarSignedTx| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSignedTx>(
            "StellarSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSignedTx {
    const NAME: &'static str = "StellarSignedTx";

    fn is_initialized(&self) -> bool {
        if self.public_key.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSignedTx {
        StellarSignedTx::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSignedTx {
        static instance: StellarSignedTx = StellarSignedTx {
            public_key: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSCVal {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_scval::StellarSCValType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.b)
    pub b: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.u32)
    pub u32: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.i32)
    pub i32: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.u64)
    pub u64: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.i64)
    pub i64: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.timepoint)
    pub timepoint: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.duration)
    pub duration: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.u128)
    pub u128: ::protobuf::MessageField<stellar_scval::StellarUInt128Parts>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.i128)
    pub i128: ::protobuf::MessageField<stellar_scval::StellarInt128Parts>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.u256)
    pub u256: ::protobuf::MessageField<stellar_scval::StellarUInt256Parts>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.i256)
    pub i256: ::protobuf::MessageField<stellar_scval::StellarInt256Parts>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.bytes)
    pub bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.string)
    pub string: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.symbol)
    pub symbol: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.vec)
    pub vec: ::std::vec::Vec<StellarSCVal>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.map)
    pub map: ::std::vec::Vec<stellar_scval::StellarSCValMapEntry>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.address)
    pub address: ::protobuf::MessageField<stellar_scval::StellarSCAddress>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSCVal {
    fn default() -> &'a StellarSCVal {
        <StellarSCVal as ::protobuf::Message>::default_instance()
    }
}

impl StellarSCVal {
    pub fn new() -> StellarSCVal {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.stellar.StellarSCVal.StellarSCValType type = 1;

    pub fn type_(&self) -> stellar_scval::StellarSCValType {
        match self.type_ {
            Some(e) => e.enum_value_or(stellar_scval::StellarSCValType::SCV_BOOL),
            None => stellar_scval::StellarSCValType::SCV_BOOL,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: stellar_scval::StellarSCValType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool b = 2;

    pub fn b(&self) -> bool {
        self.b.unwrap_or(false)
    }

    pub fn clear_b(&mut self) {
        self.b = ::std::option::Option::None;
    }

    pub fn has_b(&self) -> bool {
        self.b.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: bool) {
        self.b = ::std::option::Option::Some(v);
    }

    // optional uint32 u32 = 4;

    pub fn u32(&self) -> u32 {
        self.u32.unwrap_or(0)
    }

    pub fn clear_u32(&mut self) {
        self.u32 = ::std::option::Option::None;
    }

    pub fn has_u32(&self) -> bool {
        self.u32.is_some()
    }

    // Param is passed by value, moved
    pub fn set_u32(&mut self, v: u32) {
        self.u32 = ::std::option::Option::Some(v);
    }

    // optional sint32 i32 = 5;

    pub fn i32(&self) -> i32 {
        self.i32.unwrap_or(0)
    }

    pub fn clear_i32(&mut self) {
        self.i32 = ::std::option::Option::None;
    }

    pub fn has_i32(&self) -> bool {
        self.i32.is_some()
    }

    // Param is passed by value, moved
    pub fn set_i32(&mut self, v: i32) {
        self.i32 = ::std::option::Option::Some(v);
    }

    // optional uint64 u64 = 6;

    pub fn u64(&self) -> u64 {
        self.u64.unwrap_or(0)
    }

    pub fn clear_u64(&mut self) {
        self.u64 = ::std::option::Option::None;
    }

    pub fn has_u64(&self) -> bool {
        self.u64.is_some()
    }

    // Param is passed by value, moved
    pub fn set_u64(&mut self, v: u64) {
        self.u64 = ::std::option::Option::Some(v);
    }

    // optional sint64 i64 = 7;

    pub fn i64(&self) -> i64 {
        self.i64.unwrap_or(0)
    }

    pub fn clear_i64(&mut self) {
        self.i64 = ::std::option::Option::None;
    }

    pub fn has_i64(&self) -> bool {
        self.i64.is_some()
    }

    // Param is passed by value, moved
    pub fn set_i64(&mut self, v: i64) {
        self.i64 = ::std::option::Option::Some(v);
    }

    // optional uint64 timepoint = 8;

    pub fn timepoint(&self) -> u64 {
        self.timepoint.unwrap_or(0)
    }

    pub fn clear_timepoint(&mut self) {
        self.timepoint = ::std::option::Option::None;
    }

    pub fn has_timepoint(&self) -> bool {
        self.timepoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timepoint(&mut self, v: u64) {
        self.timepoint = ::std::option::Option::Some(v);
    }

    // optional uint64 duration = 9;

    pub fn duration(&self) -> u64 {
        self.duration.unwrap_or(0)
    }

    pub fn clear_duration(&mut self) {
        self.duration = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u64) {
        self.duration = ::std::option::Option::Some(v);
    }

    // optional bytes bytes = 14;

    pub fn bytes(&self) -> &[u8] {
        match self.bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_bytes(&mut self) {
        self.bytes = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        self.bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.bytes.is_none() {
            self.bytes = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string string = 15;

    pub fn string(&self) -> &str {
        match self.string.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_string(&mut self) {
        self.string = ::std::option::Option::None;
    }

    pub fn has_string(&self) -> bool {
        self.string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_string(&mut self, v: ::std::string::String) {
        self.string = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string(&mut self) -> &mut ::std::string::String {
        if self.string.is_none() {
            self.string = ::std::option::Option::Some(::std::string::String::new());
        }
        self.string.as_mut().unwrap()
    }

    // Take field
    pub fn take_string(&mut self) -> ::std::string::String {
        self.string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string symbol = 16;

    pub fn symbol(&self) -> &str {
        match self.symbol.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_symbol(&mut self) {
        self.symbol = ::std::option::Option::None;
    }

    pub fn has_symbol(&self) -> bool {
        self.symbol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        if self.symbol.is_none() {
            self.symbol = ::std::option::Option::Some(::std::string::String::new());
        }
        self.symbol.as_mut().unwrap()
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        self.symbol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarSCVal| { &m.type_ },
            |m: &mut StellarSCVal| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "b",
            |m: &StellarSCVal| { &m.b },
            |m: &mut StellarSCVal| { &mut m.b },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "u32",
            |m: &StellarSCVal| { &m.u32 },
            |m: &mut StellarSCVal| { &mut m.u32 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "i32",
            |m: &StellarSCVal| { &m.i32 },
            |m: &mut StellarSCVal| { &mut m.i32 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "u64",
            |m: &StellarSCVal| { &m.u64 },
            |m: &mut StellarSCVal| { &mut m.u64 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "i64",
            |m: &StellarSCVal| { &m.i64 },
            |m: &mut StellarSCVal| { &mut m.i64 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timepoint",
            |m: &StellarSCVal| { &m.timepoint },
            |m: &mut StellarSCVal| { &mut m.timepoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &StellarSCVal| { &m.duration },
            |m: &mut StellarSCVal| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarUInt128Parts>(
            "u128",
            |m: &StellarSCVal| { &m.u128 },
            |m: &mut StellarSCVal| { &mut m.u128 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarInt128Parts>(
            "i128",
            |m: &StellarSCVal| { &m.i128 },
            |m: &mut StellarSCVal| { &mut m.i128 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarUInt256Parts>(
            "u256",
            |m: &StellarSCVal| { &m.u256 },
            |m: &mut StellarSCVal| { &mut m.u256 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarInt256Parts>(
            "i256",
            |m: &StellarSCVal| { &m.i256 },
            |m: &mut StellarSCVal| { &mut m.i256 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bytes",
            |m: &StellarSCVal| { &m.bytes },
            |m: &mut StellarSCVal| { &mut m.bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "string",
            |m: &StellarSCVal| { &m.string },
            |m: &mut StellarSCVal| { &mut m.string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "symbol",
            |m: &StellarSCVal| { &m.symbol },
            |m: &mut StellarSCVal| { &mut m.symbol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vec",
            |m: &StellarSCVal| { &m.vec },
            |m: &mut StellarSCVal| { &mut m.vec },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "map",
            |m: &StellarSCVal| { &m.map },
            |m: &mut StellarSCVal| { &mut m.map },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarSCAddress>(
            "address",
            |m: &StellarSCVal| { &m.address },
            |m: &mut StellarSCVal| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSCVal>(
            "StellarSCVal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSCVal {
    const NAME: &'static str = "StellarSCVal";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        for v in &self.u128 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.i128 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.u256 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.i256 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vec {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.map {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.b = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.u32 = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.i32 = ::std::option::Option::Some(is.read_sint32()?);
                },
                48 => {
                    self.u64 = ::std::option::Option::Some(is.read_uint64()?);
                },
                56 => {
                    self.i64 = ::std::option::Option::Some(is.read_sint64()?);
                },
                64 => {
                    self.timepoint = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.u128)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.i128)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.u256)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.i256)?;
                },
                114 => {
                    self.bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                122 => {
                    self.string = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.symbol = ::std::option::Option::Some(is.read_string()?);
                },
                138 => {
                    self.vec.push(is.read_message()?);
                },
                146 => {
                    self.map.push(is.read_message()?);
                },
                154 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.address)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.b {
            my_size += 1 + 1;
        }
        if let Some(v) = self.u32 {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.i32 {
            my_size += ::protobuf::rt::sint32_size(5, v);
        }
        if let Some(v) = self.u64 {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.i64 {
            my_size += ::protobuf::rt::sint64_size(7, v);
        }
        if let Some(v) = self.timepoint {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.u128.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.i128.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.u256.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.i256.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(14, &v);
        }
        if let Some(v) = self.string.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.symbol.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        for value in &self.vec {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.map {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.b {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.u32 {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.i32 {
            os.write_sint32(5, v)?;
        }
        if let Some(v) = self.u64 {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.i64 {
            os.write_sint64(7, v)?;
        }
        if let Some(v) = self.timepoint {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.duration {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.u128.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.i128.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.u256.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.i256.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.bytes.as_ref() {
            os.write_bytes(14, v)?;
        }
        if let Some(v) = self.string.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.symbol.as_ref() {
            os.write_string(16, v)?;
        }
        for v in &self.vec {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        };
        for v in &self.map {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        if let Some(v) = self.address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSCVal {
        StellarSCVal::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.b = ::std::option::Option::None;
        self.u32 = ::std::option::Option::None;
        self.i32 = ::std::option::Option::None;
        self.u64 = ::std::option::Option::None;
        self.i64 = ::std::option::Option::None;
        self.timepoint = ::std::option::Option::None;
        self.duration = ::std::option::Option::None;
        self.u128.clear();
        self.i128.clear();
        self.u256.clear();
        self.i256.clear();
        self.bytes = ::std::option::Option::None;
        self.string = ::std::option::Option::None;
        self.symbol = ::std::option::Option::None;
        self.vec.clear();
        self.map.clear();
        self.address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSCVal {
        static instance: StellarSCVal = StellarSCVal {
            type_: ::std::option::Option::None,
            b: ::std::option::Option::None,
            u32: ::std::option::Option::None,
            i32: ::std::option::Option::None,
            u64: ::std::option::Option::None,
            i64: ::std::option::Option::None,
            timepoint: ::std::option::Option::None,
            duration: ::std::option::Option::None,
            u128: ::protobuf::MessageField::none(),
            i128: ::protobuf::MessageField::none(),
            u256: ::protobuf::MessageField::none(),
            i256: ::protobuf::MessageField::none(),
            bytes: ::std::option::Option::None,
            string: ::std::option::Option::None,
            symbol: ::std::option::Option::None,
            vec: ::std::vec::Vec::new(),
            map: ::std::vec::Vec::new(),
            address: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSCVal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSCVal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSCVal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSCVal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarSCVal`
pub mod stellar_scval {
    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarUInt128Parts)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarUInt128Parts {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt128Parts.hi)
        pub hi: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt128Parts.lo)
        pub lo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt128Parts.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarUInt128Parts {
        fn default() -> &'a StellarUInt128Parts {
            <StellarUInt128Parts as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarUInt128Parts {
        pub fn new() -> StellarUInt128Parts {
            ::std::default::Default::default()
        }

        // required uint64 hi = 1;

        pub fn hi(&self) -> u64 {
            self.hi.unwrap_or(0)
        }

        pub fn clear_hi(&mut self) {
            self.hi = ::std::option::Option::None;
        }

        pub fn has_hi(&self) -> bool {
            self.hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi(&mut self, v: u64) {
            self.hi = ::std::option::Option::Some(v);
        }

        // required uint64 lo = 2;

        pub fn lo(&self) -> u64 {
            self.lo.unwrap_or(0)
        }

        pub fn clear_lo(&mut self) {
            self.lo = ::std::option::Option::None;
        }

        pub fn has_lo(&self) -> bool {
            self.lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo(&mut self, v: u64) {
            self.lo = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi",
                |m: &StellarUInt128Parts| { &m.hi },
                |m: &mut StellarUInt128Parts| { &mut m.hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo",
                |m: &StellarUInt128Parts| { &m.lo },
                |m: &mut StellarUInt128Parts| { &mut m.lo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarUInt128Parts>(
                "StellarSCVal.StellarUInt128Parts",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarUInt128Parts {
        const NAME: &'static str = "StellarUInt128Parts";

        fn is_initialized(&self) -> bool {
            if self.hi.is_none() {
                return false;
            }
            if self.lo.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hi = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hi {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.lo {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hi {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.lo {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarUInt128Parts {
            StellarUInt128Parts::new()
        }

        fn clear(&mut self) {
            self.hi = ::std::option::Option::None;
            self.lo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarUInt128Parts {
            static instance: StellarUInt128Parts = StellarUInt128Parts {
                hi: ::std::option::Option::None,
                lo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarUInt128Parts {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarUInt128Parts").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarUInt128Parts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarUInt128Parts {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarInt128Parts)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarInt128Parts {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt128Parts.hi)
        pub hi: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt128Parts.lo)
        pub lo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarInt128Parts.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarInt128Parts {
        fn default() -> &'a StellarInt128Parts {
            <StellarInt128Parts as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarInt128Parts {
        pub fn new() -> StellarInt128Parts {
            ::std::default::Default::default()
        }

        // required sint64 hi = 1;

        pub fn hi(&self) -> i64 {
            self.hi.unwrap_or(0)
        }

        pub fn clear_hi(&mut self) {
            self.hi = ::std::option::Option::None;
        }

        pub fn has_hi(&self) -> bool {
            self.hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi(&mut self, v: i64) {
            self.hi = ::std::option::Option::Some(v);
        }

        // required uint64 lo = 2;

        pub fn lo(&self) -> u64 {
            self.lo.unwrap_or(0)
        }

        pub fn clear_lo(&mut self) {
            self.lo = ::std::option::Option::None;
        }

        pub fn has_lo(&self) -> bool {
            self.lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo(&mut self, v: u64) {
            self.lo = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi",
                |m: &StellarInt128Parts| { &m.hi },
                |m: &mut StellarInt128Parts| { &mut m.hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo",
                |m: &StellarInt128Parts| { &m.lo },
                |m: &mut StellarInt128Parts| { &mut m.lo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarInt128Parts>(
                "StellarSCVal.StellarInt128Parts",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarInt128Parts {
        const NAME: &'static str = "StellarInt128Parts";

        fn is_initialized(&self) -> bool {
            if self.hi.is_none() {
                return false;
            }
            if self.lo.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hi = ::std::option::Option::Some(is.read_sint64()?);
                    },
                    16 => {
                        self.lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hi {
                my_size += ::protobuf::rt::sint64_size(1, v);
            }
            if let Some(v) = self.lo {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hi {
                os.write_sint64(1, v)?;
            }
            if let Some(v) = self.lo {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarInt128Parts {
            StellarInt128Parts::new()
        }

        fn clear(&mut self) {
            self.hi = ::std::option::Option::None;
            self.lo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarInt128Parts {
            static instance: StellarInt128Parts = StellarInt128Parts {
                hi: ::std::option::Option::None,
                lo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarInt128Parts {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarInt128Parts").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarInt128Parts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarInt128Parts {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarUInt256Parts {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts.hi_hi)
        pub hi_hi: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts.hi_lo)
        pub hi_lo: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts.lo_hi)
        pub lo_hi: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts.lo_lo)
        pub lo_lo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarUInt256Parts.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarUInt256Parts {
        fn default() -> &'a StellarUInt256Parts {
            <StellarUInt256Parts as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarUInt256Parts {
        pub fn new() -> StellarUInt256Parts {
            ::std::default::Default::default()
        }

        // required uint64 hi_hi = 1;

        pub fn hi_hi(&self) -> u64 {
            self.hi_hi.unwrap_or(0)
        }

        pub fn clear_hi_hi(&mut self) {
            self.hi_hi = ::std::option::Option::None;
        }

        pub fn has_hi_hi(&self) -> bool {
            self.hi_hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi_hi(&mut self, v: u64) {
            self.hi_hi = ::std::option::Option::Some(v);
        }

        // required uint64 hi_lo = 2;

        pub fn hi_lo(&self) -> u64 {
            self.hi_lo.unwrap_or(0)
        }

        pub fn clear_hi_lo(&mut self) {
            self.hi_lo = ::std::option::Option::None;
        }

        pub fn has_hi_lo(&self) -> bool {
            self.hi_lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi_lo(&mut self, v: u64) {
            self.hi_lo = ::std::option::Option::Some(v);
        }

        // required uint64 lo_hi = 3;

        pub fn lo_hi(&self) -> u64 {
            self.lo_hi.unwrap_or(0)
        }

        pub fn clear_lo_hi(&mut self) {
            self.lo_hi = ::std::option::Option::None;
        }

        pub fn has_lo_hi(&self) -> bool {
            self.lo_hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo_hi(&mut self, v: u64) {
            self.lo_hi = ::std::option::Option::Some(v);
        }

        // required uint64 lo_lo = 4;

        pub fn lo_lo(&self) -> u64 {
            self.lo_lo.unwrap_or(0)
        }

        pub fn clear_lo_lo(&mut self) {
            self.lo_lo = ::std::option::Option::None;
        }

        pub fn has_lo_lo(&self) -> bool {
            self.lo_lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo_lo(&mut self, v: u64) {
            self.lo_lo = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi_hi",
                |m: &StellarUInt256Parts| { &m.hi_hi },
                |m: &mut StellarUInt256Parts| { &mut m.hi_hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi_lo",
                |m: &StellarUInt256Parts| { &m.hi_lo },
                |m: &mut StellarUInt256Parts| { &mut m.hi_lo },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo_hi",
                |m: &StellarUInt256Parts| { &m.lo_hi },
                |m: &mut StellarUInt256Parts| { &mut m.lo_hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo_lo",
                |m: &StellarUInt256Parts| { &m.lo_lo },
                |m: &mut StellarUInt256Parts| { &mut m.lo_lo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarUInt256Parts>(
                "StellarSCVal.StellarUInt256Parts",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarUInt256Parts {
        const NAME: &'static str = "StellarUInt256Parts";

        fn is_initialized(&self) -> bool {
            if self.hi_hi.is_none() {
                return false;
            }
            if self.hi_lo.is_none() {
                return false;
            }
            if self.lo_hi.is_none() {
                return false;
            }
            if self.lo_lo.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hi_hi = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.hi_lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.lo_hi = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.lo_lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hi_hi {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.hi_lo {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.lo_hi {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.lo_lo {
                my_size += ::protobuf::rt::uint64_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hi_hi {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.hi_lo {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.lo_hi {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.lo_lo {
                os.write_uint64(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarUInt256Parts {
            StellarUInt256Parts::new()
        }

        fn clear(&mut self) {
            self.hi_hi = ::std::option::Option::None;
            self.hi_lo = ::std::option::Option::None;
            self.lo_hi = ::std::option::Option::None;
            self.lo_lo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarUInt256Parts {
            static instance: StellarUInt256Parts = StellarUInt256Parts {
                hi_hi: ::std::option::Option::None,
                hi_lo: ::std::option::Option::None,
                lo_hi: ::std::option::Option::None,
                lo_lo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarUInt256Parts {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarUInt256Parts").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarUInt256Parts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarUInt256Parts {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarInt256Parts {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts.hi_hi)
        pub hi_hi: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts.hi_lo)
        pub hi_lo: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts.lo_hi)
        pub lo_hi: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts.lo_lo)
        pub lo_lo: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarInt256Parts.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarInt256Parts {
        fn default() -> &'a StellarInt256Parts {
            <StellarInt256Parts as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarInt256Parts {
        pub fn new() -> StellarInt256Parts {
            ::std::default::Default::default()
        }

        // required sint64 hi_hi = 1;

        pub fn hi_hi(&self) -> i64 {
            self.hi_hi.unwrap_or(0)
        }

        pub fn clear_hi_hi(&mut self) {
            self.hi_hi = ::std::option::Option::None;
        }

        pub fn has_hi_hi(&self) -> bool {
            self.hi_hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi_hi(&mut self, v: i64) {
            self.hi_hi = ::std::option::Option::Some(v);
        }

        // required uint64 hi_lo = 2;

        pub fn hi_lo(&self) -> u64 {
            self.hi_lo.unwrap_or(0)
        }

        pub fn clear_hi_lo(&mut self) {
            self.hi_lo = ::std::option::Option::None;
        }

        pub fn has_hi_lo(&self) -> bool {
            self.hi_lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_hi_lo(&mut self, v: u64) {
            self.hi_lo = ::std::option::Option::Some(v);
        }

        // required uint64 lo_hi = 3;

        pub fn lo_hi(&self) -> u64 {
            self.lo_hi.unwrap_or(0)
        }

        pub fn clear_lo_hi(&mut self) {
            self.lo_hi = ::std::option::Option::None;
        }

        pub fn has_lo_hi(&self) -> bool {
            self.lo_hi.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo_hi(&mut self, v: u64) {
            self.lo_hi = ::std::option::Option::Some(v);
        }

        // required uint64 lo_lo = 4;

        pub fn lo_lo(&self) -> u64 {
            self.lo_lo.unwrap_or(0)
        }

        pub fn clear_lo_lo(&mut self) {
            self.lo_lo = ::std::option::Option::None;
        }

        pub fn has_lo_lo(&self) -> bool {
            self.lo_lo.is_some()
        }

        // Param is passed by value, moved
        pub fn set_lo_lo(&mut self, v: u64) {
            self.lo_lo = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi_hi",
                |m: &StellarInt256Parts| { &m.hi_hi },
                |m: &mut StellarInt256Parts| { &mut m.hi_hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "hi_lo",
                |m: &StellarInt256Parts| { &m.hi_lo },
                |m: &mut StellarInt256Parts| { &mut m.hi_lo },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo_hi",
                |m: &StellarInt256Parts| { &m.lo_hi },
                |m: &mut StellarInt256Parts| { &mut m.lo_hi },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "lo_lo",
                |m: &StellarInt256Parts| { &m.lo_lo },
                |m: &mut StellarInt256Parts| { &mut m.lo_lo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarInt256Parts>(
                "StellarSCVal.StellarInt256Parts",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarInt256Parts {
        const NAME: &'static str = "StellarInt256Parts";

        fn is_initialized(&self) -> bool {
            if self.hi_hi.is_none() {
                return false;
            }
            if self.hi_lo.is_none() {
                return false;
            }
            if self.lo_hi.is_none() {
                return false;
            }
            if self.lo_lo.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.hi_hi = ::std::option::Option::Some(is.read_sint64()?);
                    },
                    16 => {
                        self.hi_lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.lo_hi = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    32 => {
                        self.lo_lo = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.hi_hi {
                my_size += ::protobuf::rt::sint64_size(1, v);
            }
            if let Some(v) = self.hi_lo {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.lo_hi {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.lo_lo {
                my_size += ::protobuf::rt::uint64_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.hi_hi {
                os.write_sint64(1, v)?;
            }
            if let Some(v) = self.hi_lo {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.lo_hi {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.lo_lo {
                os.write_uint64(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarInt256Parts {
            StellarInt256Parts::new()
        }

        fn clear(&mut self) {
            self.hi_hi = ::std::option::Option::None;
            self.hi_lo = ::std::option::Option::None;
            self.lo_hi = ::std::option::Option::None;
            self.lo_lo = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarInt256Parts {
            static instance: StellarInt256Parts = StellarInt256Parts {
                hi_hi: ::std::option::Option::None,
                hi_lo: ::std::option::Option::None,
                lo_hi: ::std::option::Option::None,
                lo_lo: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarInt256Parts {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarInt256Parts").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarInt256Parts {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarInt256Parts {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarSCAddress {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.type)
        pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_scaddress::StellarSCAddressType>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.address)
        pub address: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarSCAddress {
        fn default() -> &'a StellarSCAddress {
            <StellarSCAddress as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarSCAddress {
        pub fn new() -> StellarSCAddress {
            ::std::default::Default::default()
        }

        // required .hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.StellarSCAddressType type = 1;

        pub fn type_(&self) -> stellar_scaddress::StellarSCAddressType {
            match self.type_ {
                Some(e) => e.enum_value_or(stellar_scaddress::StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT),
                None => stellar_scaddress::StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT,
            }
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: stellar_scaddress::StellarSCAddressType) {
            self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // required string address = 2;

        pub fn address(&self) -> &str {
            match self.address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_address(&mut self) {
            self.address = ::std::option::Option::None;
        }

        pub fn has_address(&self) -> bool {
            self.address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_address(&mut self, v: ::std::string::String) {
            self.address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_address(&mut self) -> &mut ::std::string::String {
            if self.address.is_none() {
                self.address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.address.as_mut().unwrap()
        }

        // Take field
        pub fn take_address(&mut self) -> ::std::string::String {
            self.address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &StellarSCAddress| { &m.type_ },
                |m: &mut StellarSCAddress| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "address",
                |m: &StellarSCAddress| { &m.address },
                |m: &mut StellarSCAddress| { &mut m.address },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSCAddress>(
                "StellarSCVal.StellarSCAddress",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarSCAddress {
        const NAME: &'static str = "StellarSCAddress";

        fn is_initialized(&self) -> bool {
            if self.type_.is_none() {
                return false;
            }
            if self.address.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    18 => {
                        self.address = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.address.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.address.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarSCAddress {
            StellarSCAddress::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.address = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarSCAddress {
            static instance: StellarSCAddress = StellarSCAddress {
                type_: ::std::option::Option::None,
                address: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarSCAddress {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarSCAddress").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarSCAddress {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarSCAddress {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `StellarSCAddress`
    pub mod stellar_scaddress {
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.StellarSCAddressType)
        pub enum StellarSCAddressType {
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.StellarSCAddressType.SC_ADDRESS_TYPE_ACCOUNT)
            SC_ADDRESS_TYPE_ACCOUNT = 0,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCAddress.StellarSCAddressType.SC_ADDRESS_TYPE_CONTRACT)
            SC_ADDRESS_TYPE_CONTRACT = 1,
        }

        impl ::protobuf::Enum for StellarSCAddressType {
            const NAME: &'static str = "StellarSCAddressType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<StellarSCAddressType> {
                match value {
                    0 => ::std::option::Option::Some(StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT),
                    1 => ::std::option::Option::Some(StellarSCAddressType::SC_ADDRESS_TYPE_CONTRACT),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<StellarSCAddressType> {
                match str {
                    "SC_ADDRESS_TYPE_ACCOUNT" => ::std::option::Option::Some(StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT),
                    "SC_ADDRESS_TYPE_CONTRACT" => ::std::option::Option::Some(StellarSCAddressType::SC_ADDRESS_TYPE_CONTRACT),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [StellarSCAddressType] = &[
                StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT,
                StellarSCAddressType::SC_ADDRESS_TYPE_CONTRACT,
            ];
        }

        impl ::protobuf::EnumFull for StellarSCAddressType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("StellarSCVal.StellarSCAddress.StellarSCAddressType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for StellarSCAddressType {
            fn default() -> Self {
                StellarSCAddressType::SC_ADDRESS_TYPE_ACCOUNT
            }
        }

        impl StellarSCAddressType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarSCAddressType>("StellarSCVal.StellarSCAddress.StellarSCAddressType")
            }
        }
    }

    // @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSCVal.StellarSCValMapEntry)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct StellarSCValMapEntry {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarSCValMapEntry.key)
        pub key: ::protobuf::MessageField<super::StellarSCVal>,
        // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSCVal.StellarSCValMapEntry.value)
        pub value: ::protobuf::MessageField<super::StellarSCVal>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSCVal.StellarSCValMapEntry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a StellarSCValMapEntry {
        fn default() -> &'a StellarSCValMapEntry {
            <StellarSCValMapEntry as ::protobuf::Message>::default_instance()
        }
    }

    impl StellarSCValMapEntry {
        pub fn new() -> StellarSCValMapEntry {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StellarSCVal>(
                "key",
                |m: &StellarSCValMapEntry| { &m.key },
                |m: &mut StellarSCValMapEntry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::StellarSCVal>(
                "value",
                |m: &StellarSCValMapEntry| { &m.value },
                |m: &mut StellarSCValMapEntry| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSCValMapEntry>(
                "StellarSCVal.StellarSCValMapEntry",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for StellarSCValMapEntry {
        const NAME: &'static str = "StellarSCValMapEntry";

        fn is_initialized(&self) -> bool {
            for v in &self.key {
                if !v.is_initialized() {
                    return false;
                }
            };
            for v in &self.value {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.value)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.value.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.value.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> StellarSCValMapEntry {
            StellarSCValMapEntry::new()
        }

        fn clear(&mut self) {
            self.key.clear();
            self.value.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static StellarSCValMapEntry {
            static instance: StellarSCValMapEntry = StellarSCValMapEntry {
                key: ::protobuf::MessageField::none(),
                value: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for StellarSCValMapEntry {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("StellarSCVal.StellarSCValMapEntry").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for StellarSCValMapEntry {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for StellarSCValMapEntry {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType)
    pub enum StellarSCValType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_BOOL)
        SCV_BOOL = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_VOID)
        SCV_VOID = 1,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_U32)
        SCV_U32 = 3,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_I32)
        SCV_I32 = 4,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_U64)
        SCV_U64 = 5,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_I64)
        SCV_I64 = 6,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_TIMEPOINT)
        SCV_TIMEPOINT = 7,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_DURATION)
        SCV_DURATION = 8,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_U128)
        SCV_U128 = 9,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_I128)
        SCV_I128 = 10,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_U256)
        SCV_U256 = 11,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_I256)
        SCV_I256 = 12,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_BYTES)
        SCV_BYTES = 13,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_STRING)
        SCV_STRING = 14,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_SYMBOL)
        SCV_SYMBOL = 15,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_VEC)
        SCV_VEC = 16,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_MAP)
        SCV_MAP = 17,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSCVal.StellarSCValType.SCV_ADDRESS)
        SCV_ADDRESS = 18,
    }

    impl ::protobuf::Enum for StellarSCValType {
        const NAME: &'static str = "StellarSCValType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarSCValType> {
            match value {
                0 => ::std::option::Option::Some(StellarSCValType::SCV_BOOL),
                1 => ::std::option::Option::Some(StellarSCValType::SCV_VOID),
                3 => ::std::option::Option::Some(StellarSCValType::SCV_U32),
                4 => ::std::option::Option::Some(StellarSCValType::SCV_I32),
                5 => ::std::option::Option::Some(StellarSCValType::SCV_U64),
                6 => ::std::option::Option::Some(StellarSCValType::SCV_I64),
                7 => ::std::option::Option::Some(StellarSCValType::SCV_TIMEPOINT),
                8 => ::std::option::Option::Some(StellarSCValType::SCV_DURATION),
                9 => ::std::option::Option::Some(StellarSCValType::SCV_U128),
                10 => ::std::option::Option::Some(StellarSCValType::SCV_I128),
                11 => ::std::option::Option::Some(StellarSCValType::SCV_U256),
                12 => ::std::option::Option::Some(StellarSCValType::SCV_I256),
                13 => ::std::option::Option::Some(StellarSCValType::SCV_BYTES),
                14 => ::std::option::Option::Some(StellarSCValType::SCV_STRING),
                15 => ::std::option::Option::Some(StellarSCValType::SCV_SYMBOL),
                16 => ::std::option::Option::Some(StellarSCValType::SCV_VEC),
                17 => ::std::option::Option::Some(StellarSCValType::SCV_MAP),
                18 => ::std::option::Option::Some(StellarSCValType::SCV_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarSCValType> {
            match str {
                "SCV_BOOL" => ::std::option::Option::Some(StellarSCValType::SCV_BOOL),
                "SCV_VOID" => ::std::option::Option::Some(StellarSCValType::SCV_VOID),
                "SCV_U32" => ::std::option::Option::Some(StellarSCValType::SCV_U32),
                "SCV_I32" => ::std::option::Option::Some(StellarSCValType::SCV_I32),
                "SCV_U64" => ::std::option::Option::Some(StellarSCValType::SCV_U64),
                "SCV_I64" => ::std::option::Option::Some(StellarSCValType::SCV_I64),
                "SCV_TIMEPOINT" => ::std::option::Option::Some(StellarSCValType::SCV_TIMEPOINT),
                "SCV_DURATION" => ::std::option::Option::Some(StellarSCValType::SCV_DURATION),
                "SCV_U128" => ::std::option::Option::Some(StellarSCValType::SCV_U128),
                "SCV_I128" => ::std::option::Option::Some(StellarSCValType::SCV_I128),
                "SCV_U256" => ::std::option::Option::Some(StellarSCValType::SCV_U256),
                "SCV_I256" => ::std::option::Option::Some(StellarSCValType::SCV_I256),
                "SCV_BYTES" => ::std::option::Option::Some(StellarSCValType::SCV_BYTES),
                "SCV_STRING" => ::std::option::Option::Some(StellarSCValType::SCV_STRING),
                "SCV_SYMBOL" => ::std::option::Option::Some(StellarSCValType::SCV_SYMBOL),
                "SCV_VEC" => ::std::option::Option::Some(StellarSCValType::SCV_VEC),
                "SCV_MAP" => ::std::option::Option::Some(StellarSCValType::SCV_MAP),
                "SCV_ADDRESS" => ::std::option::Option::Some(StellarSCValType::SCV_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarSCValType] = &[
            StellarSCValType::SCV_BOOL,
            StellarSCValType::SCV_VOID,
            StellarSCValType::SCV_U32,
            StellarSCValType::SCV_I32,
            StellarSCValType::SCV_U64,
            StellarSCValType::SCV_I64,
            StellarSCValType::SCV_TIMEPOINT,
            StellarSCValType::SCV_DURATION,
            StellarSCValType::SCV_U128,
            StellarSCValType::SCV_I128,
            StellarSCValType::SCV_U256,
            StellarSCValType::SCV_I256,
            StellarSCValType::SCV_BYTES,
            StellarSCValType::SCV_STRING,
            StellarSCValType::SCV_SYMBOL,
            StellarSCValType::SCV_VEC,
            StellarSCValType::SCV_MAP,
            StellarSCValType::SCV_ADDRESS,
        ];
    }

    impl ::protobuf::EnumFull for StellarSCValType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarSCVal.StellarSCValType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                StellarSCValType::SCV_BOOL => 0,
                StellarSCValType::SCV_VOID => 1,
                StellarSCValType::SCV_U32 => 2,
                StellarSCValType::SCV_I32 => 3,
                StellarSCValType::SCV_U64 => 4,
                StellarSCValType::SCV_I64 => 5,
                StellarSCValType::SCV_TIMEPOINT => 6,
                StellarSCValType::SCV_DURATION => 7,
                StellarSCValType::SCV_U128 => 8,
                StellarSCValType::SCV_I128 => 9,
                StellarSCValType::SCV_U256 => 10,
                StellarSCValType::SCV_I256 => 11,
                StellarSCValType::SCV_BYTES => 12,
                StellarSCValType::SCV_STRING => 13,
                StellarSCValType::SCV_SYMBOL => 14,
                StellarSCValType::SCV_VEC => 15,
                StellarSCValType::SCV_MAP => 16,
                StellarSCValType::SCV_ADDRESS => 17,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarSCValType {
        fn default() -> Self {
            StellarSCValType::SCV_BOOL
        }
    }

    impl StellarSCValType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarSCValType>("StellarSCVal.StellarSCValType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarInvokeContractArgs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarInvokeContractArgs {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeContractArgs.contract_address)
    pub contract_address: ::protobuf::MessageField<stellar_scval::StellarSCAddress>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeContractArgs.function_name)
    pub function_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeContractArgs.args)
    pub args: ::std::vec::Vec<StellarSCVal>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarInvokeContractArgs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarInvokeContractArgs {
    fn default() -> &'a StellarInvokeContractArgs {
        <StellarInvokeContractArgs as ::protobuf::Message>::default_instance()
    }
}

impl StellarInvokeContractArgs {
    pub fn new() -> StellarInvokeContractArgs {
        ::std::default::Default::default()
    }

    // required string function_name = 2;

    pub fn function_name(&self) -> &str {
        match self.function_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_function_name(&mut self) {
        self.function_name = ::std::option::Option::None;
    }

    pub fn has_function_name(&self) -> bool {
        self.function_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_function_name(&mut self, v: ::std::string::String) {
        self.function_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function_name(&mut self) -> &mut ::std::string::String {
        if self.function_name.is_none() {
            self.function_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.function_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_function_name(&mut self) -> ::std::string::String {
        self.function_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarSCAddress>(
            "contract_address",
            |m: &StellarInvokeContractArgs| { &m.contract_address },
            |m: &mut StellarInvokeContractArgs| { &mut m.contract_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "function_name",
            |m: &StellarInvokeContractArgs| { &m.function_name },
            |m: &mut StellarInvokeContractArgs| { &mut m.function_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "args",
            |m: &StellarInvokeContractArgs| { &m.args },
            |m: &mut StellarInvokeContractArgs| { &mut m.args },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarInvokeContractArgs>(
            "StellarInvokeContractArgs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarInvokeContractArgs {
    const NAME: &'static str = "StellarInvokeContractArgs";

    fn is_initialized(&self) -> bool {
        if self.contract_address.is_none() {
            return false;
        }
        if self.function_name.is_none() {
            return false;
        }
        for v in &self.contract_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.args {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contract_address)?;
                },
                18 => {
                    self.function_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.args.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.contract_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.function_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.contract_address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.function_name.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.args {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarInvokeContractArgs {
        StellarInvokeContractArgs::new()
    }

    fn clear(&mut self) {
        self.contract_address.clear();
        self.function_name = ::std::option::Option::None;
        self.args.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarInvokeContractArgs {
        static instance: StellarInvokeContractArgs = StellarInvokeContractArgs {
            contract_address: ::protobuf::MessageField::none(),
            function_name: ::std::option::Option::None,
            args: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarInvokeContractArgs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarInvokeContractArgs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarInvokeContractArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarInvokeContractArgs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSorobanAuthorizedFunction {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.contract_fn)
    pub contract_fn: ::protobuf::MessageField<StellarInvokeContractArgs>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSorobanAuthorizedFunction {
    fn default() -> &'a StellarSorobanAuthorizedFunction {
        <StellarSorobanAuthorizedFunction as ::protobuf::Message>::default_instance()
    }
}

impl StellarSorobanAuthorizedFunction {
    pub fn new() -> StellarSorobanAuthorizedFunction {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType type = 1;

    pub fn type_(&self) -> stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType {
        match self.type_ {
            Some(e) => e.enum_value_or(stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN),
            None => stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarSorobanAuthorizedFunction| { &m.type_ },
            |m: &mut StellarSorobanAuthorizedFunction| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarInvokeContractArgs>(
            "contract_fn",
            |m: &StellarSorobanAuthorizedFunction| { &m.contract_fn },
            |m: &mut StellarSorobanAuthorizedFunction| { &mut m.contract_fn },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSorobanAuthorizedFunction>(
            "StellarSorobanAuthorizedFunction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSorobanAuthorizedFunction {
    const NAME: &'static str = "StellarSorobanAuthorizedFunction";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        for v in &self.contract_fn {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contract_fn)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.contract_fn.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.contract_fn.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSorobanAuthorizedFunction {
        StellarSorobanAuthorizedFunction::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.contract_fn.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSorobanAuthorizedFunction {
        static instance: StellarSorobanAuthorizedFunction = StellarSorobanAuthorizedFunction {
            type_: ::std::option::Option::None,
            contract_fn: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSorobanAuthorizedFunction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSorobanAuthorizedFunction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSorobanAuthorizedFunction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSorobanAuthorizedFunction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarSorobanAuthorizedFunction`
pub mod stellar_soroban_authorized_function {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType)
    pub enum StellarSorobanAuthorizedFunctionType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN)
        SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType.SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN)
        SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN = 1,
    }

    impl ::protobuf::Enum for StellarSorobanAuthorizedFunctionType {
        const NAME: &'static str = "StellarSorobanAuthorizedFunctionType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarSorobanAuthorizedFunctionType> {
            match value {
                0 => ::std::option::Option::Some(StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN),
                1 => ::std::option::Option::Some(StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarSorobanAuthorizedFunctionType> {
            match str {
                "SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN" => ::std::option::Option::Some(StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN),
                "SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN" => ::std::option::Option::Some(StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarSorobanAuthorizedFunctionType] = &[
            StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN,
            StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN,
        ];
    }

    impl ::protobuf::EnumFull for StellarSorobanAuthorizedFunctionType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarSorobanAuthorizedFunctionType {
        fn default() -> Self {
            StellarSorobanAuthorizedFunctionType::SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN
        }
    }

    impl StellarSorobanAuthorizedFunctionType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarSorobanAuthorizedFunctionType>("StellarSorobanAuthorizedFunction.StellarSorobanAuthorizedFunctionType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSorobanAuthorizedInvocation)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSorobanAuthorizedInvocation {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizedInvocation.function)
    pub function: ::protobuf::MessageField<StellarSorobanAuthorizedFunction>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizedInvocation.sub_invocations)
    pub sub_invocations: ::std::vec::Vec<StellarSorobanAuthorizedInvocation>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSorobanAuthorizedInvocation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSorobanAuthorizedInvocation {
    fn default() -> &'a StellarSorobanAuthorizedInvocation {
        <StellarSorobanAuthorizedInvocation as ::protobuf::Message>::default_instance()
    }
}

impl StellarSorobanAuthorizedInvocation {
    pub fn new() -> StellarSorobanAuthorizedInvocation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSorobanAuthorizedFunction>(
            "function",
            |m: &StellarSorobanAuthorizedInvocation| { &m.function },
            |m: &mut StellarSorobanAuthorizedInvocation| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sub_invocations",
            |m: &StellarSorobanAuthorizedInvocation| { &m.sub_invocations },
            |m: &mut StellarSorobanAuthorizedInvocation| { &mut m.sub_invocations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSorobanAuthorizedInvocation>(
            "StellarSorobanAuthorizedInvocation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSorobanAuthorizedInvocation {
    const NAME: &'static str = "StellarSorobanAuthorizedInvocation";

    fn is_initialized(&self) -> bool {
        if self.function.is_none() {
            return false;
        }
        for v in &self.function {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sub_invocations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.function)?;
                },
                18 => {
                    self.sub_invocations.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.function.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.sub_invocations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.function.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.sub_invocations {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSorobanAuthorizedInvocation {
        StellarSorobanAuthorizedInvocation::new()
    }

    fn clear(&mut self) {
        self.function.clear();
        self.sub_invocations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSorobanAuthorizedInvocation {
        static instance: StellarSorobanAuthorizedInvocation = StellarSorobanAuthorizedInvocation {
            function: ::protobuf::MessageField::none(),
            sub_invocations: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSorobanAuthorizedInvocation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSorobanAuthorizedInvocation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSorobanAuthorizedInvocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSorobanAuthorizedInvocation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarHostFunction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarHostFunction {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarHostFunction.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_host_function::StellarHostFunctionType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarHostFunction.invoke_contract)
    pub invoke_contract: ::protobuf::MessageField<StellarInvokeContractArgs>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarHostFunction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarHostFunction {
    fn default() -> &'a StellarHostFunction {
        <StellarHostFunction as ::protobuf::Message>::default_instance()
    }
}

impl StellarHostFunction {
    pub fn new() -> StellarHostFunction {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.stellar.StellarHostFunction.StellarHostFunctionType type = 1;

    pub fn type_(&self) -> stellar_host_function::StellarHostFunctionType {
        match self.type_ {
            Some(e) => e.enum_value_or(stellar_host_function::StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT),
            None => stellar_host_function::StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: stellar_host_function::StellarHostFunctionType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarHostFunction| { &m.type_ },
            |m: &mut StellarHostFunction| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarInvokeContractArgs>(
            "invoke_contract",
            |m: &StellarHostFunction| { &m.invoke_contract },
            |m: &mut StellarHostFunction| { &mut m.invoke_contract },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarHostFunction>(
            "StellarHostFunction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarHostFunction {
    const NAME: &'static str = "StellarHostFunction";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        for v in &self.invoke_contract {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.invoke_contract)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.invoke_contract.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.invoke_contract.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarHostFunction {
        StellarHostFunction::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.invoke_contract.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarHostFunction {
        static instance: StellarHostFunction = StellarHostFunction {
            type_: ::std::option::Option::None,
            invoke_contract: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarHostFunction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarHostFunction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarHostFunction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarHostFunction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarHostFunction`
pub mod stellar_host_function {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarHostFunction.StellarHostFunctionType)
    pub enum StellarHostFunctionType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarHostFunction.StellarHostFunctionType.HOST_FUNCTION_TYPE_INVOKE_CONTRACT)
        HOST_FUNCTION_TYPE_INVOKE_CONTRACT = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarHostFunction.StellarHostFunctionType.HOST_FUNCTION_TYPE_CREATE_CONTRACT)
        HOST_FUNCTION_TYPE_CREATE_CONTRACT = 1,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarHostFunction.StellarHostFunctionType.HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM)
        HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM = 2,
    }

    impl ::protobuf::Enum for StellarHostFunctionType {
        const NAME: &'static str = "StellarHostFunctionType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarHostFunctionType> {
            match value {
                0 => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT),
                1 => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_CREATE_CONTRACT),
                2 => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarHostFunctionType> {
            match str {
                "HOST_FUNCTION_TYPE_INVOKE_CONTRACT" => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT),
                "HOST_FUNCTION_TYPE_CREATE_CONTRACT" => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_CREATE_CONTRACT),
                "HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM" => ::std::option::Option::Some(StellarHostFunctionType::HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarHostFunctionType] = &[
            StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT,
            StellarHostFunctionType::HOST_FUNCTION_TYPE_CREATE_CONTRACT,
            StellarHostFunctionType::HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM,
        ];
    }

    impl ::protobuf::EnumFull for StellarHostFunctionType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarHostFunction.StellarHostFunctionType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarHostFunctionType {
        fn default() -> Self {
            StellarHostFunctionType::HOST_FUNCTION_TYPE_INVOKE_CONTRACT
        }
    }

    impl StellarHostFunctionType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarHostFunctionType>("StellarHostFunction.StellarHostFunctionType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSorobanAddressCredentials)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSorobanAddressCredentials {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAddressCredentials.address)
    pub address: ::protobuf::MessageField<stellar_scval::StellarSCAddress>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAddressCredentials.nonce)
    pub nonce: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAddressCredentials.signature_expiration_ledger)
    pub signature_expiration_ledger: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAddressCredentials.signature)
    pub signature: ::protobuf::MessageField<StellarSCVal>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSorobanAddressCredentials.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSorobanAddressCredentials {
    fn default() -> &'a StellarSorobanAddressCredentials {
        <StellarSorobanAddressCredentials as ::protobuf::Message>::default_instance()
    }
}

impl StellarSorobanAddressCredentials {
    pub fn new() -> StellarSorobanAddressCredentials {
        ::std::default::Default::default()
    }

    // required sint64 nonce = 2;

    pub fn nonce(&self) -> i64 {
        self.nonce.unwrap_or(0)
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: i64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // required uint32 signature_expiration_ledger = 3;

    pub fn signature_expiration_ledger(&self) -> u32 {
        self.signature_expiration_ledger.unwrap_or(0)
    }

    pub fn clear_signature_expiration_ledger(&mut self) {
        self.signature_expiration_ledger = ::std::option::Option::None;
    }

    pub fn has_signature_expiration_ledger(&self) -> bool {
        self.signature_expiration_ledger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_expiration_ledger(&mut self, v: u32) {
        self.signature_expiration_ledger = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, stellar_scval::StellarSCAddress>(
            "address",
            |m: &StellarSorobanAddressCredentials| { &m.address },
            |m: &mut StellarSorobanAddressCredentials| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &StellarSorobanAddressCredentials| { &m.nonce },
            |m: &mut StellarSorobanAddressCredentials| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature_expiration_ledger",
            |m: &StellarSorobanAddressCredentials| { &m.signature_expiration_ledger },
            |m: &mut StellarSorobanAddressCredentials| { &mut m.signature_expiration_ledger },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSCVal>(
            "signature",
            |m: &StellarSorobanAddressCredentials| { &m.signature },
            |m: &mut StellarSorobanAddressCredentials| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSorobanAddressCredentials>(
            "StellarSorobanAddressCredentials",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSorobanAddressCredentials {
    const NAME: &'static str = "StellarSorobanAddressCredentials";

    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.nonce.is_none() {
            return false;
        }
        if self.signature_expiration_ledger.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.address)?;
                },
                16 => {
                    self.nonce = ::std::option::Option::Some(is.read_sint64()?);
                },
                24 => {
                    self.signature_expiration_ledger = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::sint64_size(2, v);
        }
        if let Some(v) = self.signature_expiration_ledger {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.nonce {
            os.write_sint64(2, v)?;
        }
        if let Some(v) = self.signature_expiration_ledger {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSorobanAddressCredentials {
        StellarSorobanAddressCredentials::new()
    }

    fn clear(&mut self) {
        self.address.clear();
        self.nonce = ::std::option::Option::None;
        self.signature_expiration_ledger = ::std::option::Option::None;
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSorobanAddressCredentials {
        static instance: StellarSorobanAddressCredentials = StellarSorobanAddressCredentials {
            address: ::protobuf::MessageField::none(),
            nonce: ::std::option::Option::None,
            signature_expiration_ledger: ::std::option::Option::None,
            signature: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSorobanAddressCredentials {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSorobanAddressCredentials").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSorobanAddressCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSorobanAddressCredentials {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSorobanCredentials)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSorobanCredentials {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanCredentials.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<stellar_soroban_credentials::StellarSorobanCredentialsType>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanCredentials.address)
    pub address: ::protobuf::MessageField<StellarSorobanAddressCredentials>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSorobanCredentials.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSorobanCredentials {
    fn default() -> &'a StellarSorobanCredentials {
        <StellarSorobanCredentials as ::protobuf::Message>::default_instance()
    }
}

impl StellarSorobanCredentials {
    pub fn new() -> StellarSorobanCredentials {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.stellar.StellarSorobanCredentials.StellarSorobanCredentialsType type = 1;

    pub fn type_(&self) -> stellar_soroban_credentials::StellarSorobanCredentialsType {
        match self.type_ {
            Some(e) => e.enum_value_or(stellar_soroban_credentials::StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT),
            None => stellar_soroban_credentials::StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: stellar_soroban_credentials::StellarSorobanCredentialsType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarSorobanCredentials| { &m.type_ },
            |m: &mut StellarSorobanCredentials| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSorobanAddressCredentials>(
            "address",
            |m: &StellarSorobanCredentials| { &m.address },
            |m: &mut StellarSorobanCredentials| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSorobanCredentials>(
            "StellarSorobanCredentials",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSorobanCredentials {
    const NAME: &'static str = "StellarSorobanCredentials";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.address)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSorobanCredentials {
        StellarSorobanCredentials::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.address.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSorobanCredentials {
        static instance: StellarSorobanCredentials = StellarSorobanCredentials {
            type_: ::std::option::Option::None,
            address: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSorobanCredentials {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSorobanCredentials").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSorobanCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSorobanCredentials {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StellarSorobanCredentials`
pub mod stellar_soroban_credentials {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarSorobanCredentials.StellarSorobanCredentialsType)
    pub enum StellarSorobanCredentialsType {
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSorobanCredentials.StellarSorobanCredentialsType.SOROBAN_CREDENTIALS_SOURCE_ACCOUNT)
        SOROBAN_CREDENTIALS_SOURCE_ACCOUNT = 0,
        // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarSorobanCredentials.StellarSorobanCredentialsType.SOROBAN_CREDENTIALS_ADDRESS)
        SOROBAN_CREDENTIALS_ADDRESS = 1,
    }

    impl ::protobuf::Enum for StellarSorobanCredentialsType {
        const NAME: &'static str = "StellarSorobanCredentialsType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<StellarSorobanCredentialsType> {
            match value {
                0 => ::std::option::Option::Some(StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT),
                1 => ::std::option::Option::Some(StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<StellarSorobanCredentialsType> {
            match str {
                "SOROBAN_CREDENTIALS_SOURCE_ACCOUNT" => ::std::option::Option::Some(StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT),
                "SOROBAN_CREDENTIALS_ADDRESS" => ::std::option::Option::Some(StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_ADDRESS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [StellarSorobanCredentialsType] = &[
            StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT,
            StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_ADDRESS,
        ];
    }

    impl ::protobuf::EnumFull for StellarSorobanCredentialsType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("StellarSorobanCredentials.StellarSorobanCredentialsType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for StellarSorobanCredentialsType {
        fn default() -> Self {
            StellarSorobanCredentialsType::SOROBAN_CREDENTIALS_SOURCE_ACCOUNT
        }
    }

    impl StellarSorobanCredentialsType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarSorobanCredentialsType>("StellarSorobanCredentials.StellarSorobanCredentialsType")
        }
    }
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSorobanAuthorizationEntry)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSorobanAuthorizationEntry {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizationEntry.credentials)
    pub credentials: ::protobuf::MessageField<StellarSorobanCredentials>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSorobanAuthorizationEntry.root_invocation)
    pub root_invocation: ::protobuf::MessageField<StellarSorobanAuthorizedInvocation>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSorobanAuthorizationEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSorobanAuthorizationEntry {
    fn default() -> &'a StellarSorobanAuthorizationEntry {
        <StellarSorobanAuthorizationEntry as ::protobuf::Message>::default_instance()
    }
}

impl StellarSorobanAuthorizationEntry {
    pub fn new() -> StellarSorobanAuthorizationEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSorobanCredentials>(
            "credentials",
            |m: &StellarSorobanAuthorizationEntry| { &m.credentials },
            |m: &mut StellarSorobanAuthorizationEntry| { &mut m.credentials },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSorobanAuthorizedInvocation>(
            "root_invocation",
            |m: &StellarSorobanAuthorizationEntry| { &m.root_invocation },
            |m: &mut StellarSorobanAuthorizationEntry| { &mut m.root_invocation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSorobanAuthorizationEntry>(
            "StellarSorobanAuthorizationEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSorobanAuthorizationEntry {
    const NAME: &'static str = "StellarSorobanAuthorizationEntry";

    fn is_initialized(&self) -> bool {
        if self.credentials.is_none() {
            return false;
        }
        if self.root_invocation.is_none() {
            return false;
        }
        for v in &self.credentials {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.root_invocation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.credentials)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.root_invocation)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.credentials.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.root_invocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.credentials.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.root_invocation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSorobanAuthorizationEntry {
        StellarSorobanAuthorizationEntry::new()
    }

    fn clear(&mut self) {
        self.credentials.clear();
        self.root_invocation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSorobanAuthorizationEntry {
        static instance: StellarSorobanAuthorizationEntry = StellarSorobanAuthorizationEntry {
            credentials: ::protobuf::MessageField::none(),
            root_invocation: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSorobanAuthorizationEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSorobanAuthorizationEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSorobanAuthorizationEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSorobanAuthorizationEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarInvokeHostFunctionOp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarInvokeHostFunctionOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeHostFunctionOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeHostFunctionOp.function)
    pub function: ::protobuf::MessageField<StellarHostFunction>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarInvokeHostFunctionOp.auth)
    pub auth: ::std::vec::Vec<StellarSorobanAuthorizationEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarInvokeHostFunctionOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarInvokeHostFunctionOp {
    fn default() -> &'a StellarInvokeHostFunctionOp {
        <StellarInvokeHostFunctionOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarInvokeHostFunctionOp {
    pub fn new() -> StellarInvokeHostFunctionOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarInvokeHostFunctionOp| { &m.source_account },
            |m: &mut StellarInvokeHostFunctionOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarHostFunction>(
            "function",
            |m: &StellarInvokeHostFunctionOp| { &m.function },
            |m: &mut StellarInvokeHostFunctionOp| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "auth",
            |m: &StellarInvokeHostFunctionOp| { &m.auth },
            |m: &mut StellarInvokeHostFunctionOp| { &mut m.auth },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarInvokeHostFunctionOp>(
            "StellarInvokeHostFunctionOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarInvokeHostFunctionOp {
    const NAME: &'static str = "StellarInvokeHostFunctionOp";

    fn is_initialized(&self) -> bool {
        if self.function.is_none() {
            return false;
        }
        for v in &self.function {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.auth {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.function)?;
                },
                26 => {
                    self.auth.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.function.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.auth {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.function.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.auth {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarInvokeHostFunctionOp {
        StellarInvokeHostFunctionOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.function.clear();
        self.auth.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarInvokeHostFunctionOp {
        static instance: StellarInvokeHostFunctionOp = StellarInvokeHostFunctionOp {
            source_account: ::std::option::Option::None,
            function: ::protobuf::MessageField::none(),
            auth: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarInvokeHostFunctionOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarInvokeHostFunctionOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarInvokeHostFunctionOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarInvokeHostFunctionOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarTxExtRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarTxExtRequest {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarTxExtRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarTxExtRequest {
    fn default() -> &'a StellarTxExtRequest {
        <StellarTxExtRequest as ::protobuf::Message>::default_instance()
    }
}

impl StellarTxExtRequest {
    pub fn new() -> StellarTxExtRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarTxExtRequest>(
            "StellarTxExtRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarTxExtRequest {
    const NAME: &'static str = "StellarTxExtRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarTxExtRequest {
        StellarTxExtRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarTxExtRequest {
        static instance: StellarTxExtRequest = StellarTxExtRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarTxExtRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarTxExtRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarTxExtRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarTxExtRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarTxExt)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarTxExt {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarTxExt.v)
    pub v: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarTxExt.soroban_data)
    pub soroban_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarTxExt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarTxExt {
    fn default() -> &'a StellarTxExt {
        <StellarTxExt as ::protobuf::Message>::default_instance()
    }
}

impl StellarTxExt {
    pub fn new() -> StellarTxExt {
        ::std::default::Default::default()
    }

    // required sint32 v = 1;

    pub fn v(&self) -> i32 {
        self.v.unwrap_or(0)
    }

    pub fn clear_v(&mut self) {
        self.v = ::std::option::Option::None;
    }

    pub fn has_v(&self) -> bool {
        self.v.is_some()
    }

    // Param is passed by value, moved
    pub fn set_v(&mut self, v: i32) {
        self.v = ::std::option::Option::Some(v);
    }

    // optional bytes soroban_data = 2;

    pub fn soroban_data(&self) -> &[u8] {
        match self.soroban_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_soroban_data(&mut self) {
        self.soroban_data = ::std::option::Option::None;
    }

    pub fn has_soroban_data(&self) -> bool {
        self.soroban_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_soroban_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.soroban_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_soroban_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.soroban_data.is_none() {
            self.soroban_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.soroban_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_soroban_data(&mut self) -> ::std::vec::Vec<u8> {
        self.soroban_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "v",
            |m: &StellarTxExt| { &m.v },
            |m: &mut StellarTxExt| { &mut m.v },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "soroban_data",
            |m: &StellarTxExt| { &m.soroban_data },
            |m: &mut StellarTxExt| { &mut m.soroban_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarTxExt>(
            "StellarTxExt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarTxExt {
    const NAME: &'static str = "StellarTxExt";

    fn is_initialized(&self) -> bool {
        if self.v.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.v = ::std::option::Option::Some(is.read_sint32()?);
                },
                18 => {
                    self.soroban_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.v {
            my_size += ::protobuf::rt::sint32_size(1, v);
        }
        if let Some(v) = self.soroban_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.v {
            os.write_sint32(1, v)?;
        }
        if let Some(v) = self.soroban_data.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarTxExt {
        StellarTxExt::new()
    }

    fn clear(&mut self) {
        self.v = ::std::option::Option::None;
        self.soroban_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarTxExt {
        static instance: StellarTxExt = StellarTxExt {
            v: ::std::option::Option::None,
            soroban_data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarTxExt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarTxExt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarTxExt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarTxExt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSignSorobanAuthorization)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StellarSignSorobanAuthorization {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.network_passphrase)
    pub network_passphrase: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.nonce)
    pub nonce: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.signature_expiration_ledger)
    pub signature_expiration_ledger: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.invocation)
    pub invocation: ::protobuf::MessageField<StellarSorobanAuthorizedInvocation>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSignSorobanAuthorization.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSignSorobanAuthorization {
    fn default() -> &'a StellarSignSorobanAuthorization {
        <StellarSignSorobanAuthorization as ::protobuf::Message>::default_instance()
    }
}

impl StellarSignSorobanAuthorization {
    pub fn new() -> StellarSignSorobanAuthorization {
        ::std::default::Default::default()
    }

    // required string network_passphrase = 2;

    pub fn network_passphrase(&self) -> &str {
        match self.network_passphrase.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_network_passphrase(&mut self) {
        self.network_passphrase = ::std::option::Option::None;
    }

    pub fn has_network_passphrase(&self) -> bool {
        self.network_passphrase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_passphrase(&mut self, v: ::std::string::String) {
        self.network_passphrase = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_passphrase(&mut self) -> &mut ::std::string::String {
        if self.network_passphrase.is_none() {
            self.network_passphrase = ::std::option::Option::Some(::std::string::String::new());
        }
        self.network_passphrase.as_mut().unwrap()
    }

    // Take field
    pub fn take_network_passphrase(&mut self) -> ::std::string::String {
        self.network_passphrase.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required sint64 nonce = 3;

    pub fn nonce(&self) -> i64 {
        self.nonce.unwrap_or(0)
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: i64) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // required uint32 signature_expiration_ledger = 4;

    pub fn signature_expiration_ledger(&self) -> u32 {
        self.signature_expiration_ledger.unwrap_or(0)
    }

    pub fn clear_signature_expiration_ledger(&mut self) {
        self.signature_expiration_ledger = ::std::option::Option::None;
    }

    pub fn has_signature_expiration_ledger(&self) -> bool {
        self.signature_expiration_ledger.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_expiration_ledger(&mut self, v: u32) {
        self.signature_expiration_ledger = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &StellarSignSorobanAuthorization| { &m.address_n },
            |m: &mut StellarSignSorobanAuthorization| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network_passphrase",
            |m: &StellarSignSorobanAuthorization| { &m.network_passphrase },
            |m: &mut StellarSignSorobanAuthorization| { &mut m.network_passphrase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &StellarSignSorobanAuthorization| { &m.nonce },
            |m: &mut StellarSignSorobanAuthorization| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature_expiration_ledger",
            |m: &StellarSignSorobanAuthorization| { &m.signature_expiration_ledger },
            |m: &mut StellarSignSorobanAuthorization| { &mut m.signature_expiration_ledger },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarSorobanAuthorizedInvocation>(
            "invocation",
            |m: &StellarSignSorobanAuthorization| { &m.invocation },
            |m: &mut StellarSignSorobanAuthorization| { &mut m.invocation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSignSorobanAuthorization>(
            "StellarSignSorobanAuthorization",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSignSorobanAuthorization {
    const NAME: &'static str = "StellarSignSorobanAuthorization";

    fn is_initialized(&self) -> bool {
        if self.network_passphrase.is_none() {
            return false;
        }
        if self.nonce.is_none() {
            return false;
        }
        if self.signature_expiration_ledger.is_none() {
            return false;
        }
        if self.invocation.is_none() {
            return false;
        }
        for v in &self.invocation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.network_passphrase = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.nonce = ::std::option::Option::Some(is.read_sint64()?);
                },
                32 => {
                    self.signature_expiration_ledger = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.invocation)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        if let Some(v) = self.signature_expiration_ledger {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.invocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.signature_expiration_ledger {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.invocation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSignSorobanAuthorization {
        StellarSignSorobanAuthorization::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.network_passphrase = ::std::option::Option::None;
        self.nonce = ::std::option::Option::None;
        self.signature_expiration_ledger = ::std::option::Option::None;
        self.invocation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSignSorobanAuthorization {
        static instance: StellarSignSorobanAuthorization = StellarSignSorobanAuthorization {
            address_n: ::std::vec::Vec::new(),
            network_passphrase: ::std::option::Option::None,
            nonce: ::std::option::Option::None,
            signature_expiration_ledger: ::std::option::Option::None,
            invocation: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSignSorobanAuthorization {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSignSorobanAuthorization").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSignSorobanAuthorization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSignSorobanAuthorization {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hw.trezor.messages.stellar.StellarAssetType)
pub enum StellarAssetType {
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarAssetType.NATIVE)
    NATIVE = 0,
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarAssetType.ALPHANUM4)
    ALPHANUM4 = 1,
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.stellar.StellarAssetType.ALPHANUM12)
    ALPHANUM12 = 2,
}

impl ::protobuf::Enum for StellarAssetType {
    const NAME: &'static str = "StellarAssetType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StellarAssetType> {
        match value {
            0 => ::std::option::Option::Some(StellarAssetType::NATIVE),
            1 => ::std::option::Option::Some(StellarAssetType::ALPHANUM4),
            2 => ::std::option::Option::Some(StellarAssetType::ALPHANUM12),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<StellarAssetType> {
        match str {
            "NATIVE" => ::std::option::Option::Some(StellarAssetType::NATIVE),
            "ALPHANUM4" => ::std::option::Option::Some(StellarAssetType::ALPHANUM4),
            "ALPHANUM12" => ::std::option::Option::Some(StellarAssetType::ALPHANUM12),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [StellarAssetType] = &[
        StellarAssetType::NATIVE,
        StellarAssetType::ALPHANUM4,
        StellarAssetType::ALPHANUM12,
    ];
}

impl ::protobuf::EnumFull for StellarAssetType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("StellarAssetType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for StellarAssetType {
    fn default() -> Self {
        StellarAssetType::NATIVE
    }
}

impl StellarAssetType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StellarAssetType>("StellarAssetType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-stellar.proto\x12\x1ahw.trezor.messages.stellar\"|\n\x0cS\
    tellarAsset\x12@\n\x04type\x18\x01\x20\x02(\x0e2,.hw.trezor.messages.ste\
    llar.StellarAssetTypeR\x04type\x12\x12\n\x04code\x18\x02\x20\x01(\tR\x04\
    code\x12\x16\n\x06issuer\x18\x03\x20\x01(\tR\x06issuer\"o\n\x11StellarGe\
    tAddress\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0c\
    show_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\x12\x1a\n\x08chunkify\
    \x18\x03\x20\x01(\x08R\x08chunkify\"*\n\x0eStellarAddress\x12\x18\n\x07a\
    ddress\x18\x01\x20\x02(\tR\x07address\"\xa6\x04\n\rStellarSignTx\x12\x1b\
    \n\taddress_n\x18\x02\x20\x03(\rR\x08addressN\x12-\n\x12network_passphra\
    se\x18\x03\x20\x02(\tR\x11networkPassphrase\x12%\n\x0esource_account\x18\
    \x04\x20\x02(\tR\rsourceAccount\x12\x10\n\x03fee\x18\x05\x20\x02(\rR\x03\
    fee\x12'\n\x0fsequence_number\x18\x06\x20\x02(\x04R\x0esequenceNumber\
    \x12)\n\x10timebounds_start\x18\x08\x20\x02(\rR\x0ftimeboundsStart\x12%\
    \n\x0etimebounds_end\x18\t\x20\x02(\rR\rtimeboundsEnd\x12V\n\tmemo_type\
    \x18\n\x20\x02(\x0e29.hw.trezor.messages.stellar.StellarSignTx.StellarMe\
    moTypeR\x08memoType\x12\x1b\n\tmemo_text\x18\x0b\x20\x01(\tR\x08memoText\
    \x12\x17\n\x07memo_id\x18\x0c\x20\x01(\x04R\x06memoId\x12\x1b\n\tmemo_ha\
    sh\x18\r\x20\x01(\x0cR\x08memoHash\x12%\n\x0enum_operations\x18\x0e\x20\
    \x02(\rR\rnumOperations\"C\n\x0fStellarMemoType\x12\x08\n\x04NONE\x10\0\
    \x12\x08\n\x04TEXT\x10\x01\x12\x06\n\x02ID\x10\x02\x12\x08\n\x04HASH\x10\
    \x03\x12\n\n\x06RETURN\x10\x04\"\x14\n\x12StellarTxOpRequest\"\xc2\x01\n\
    \x10StellarPaymentOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourc\
    eAccount\x12/\n\x13destination_account\x18\x02\x20\x02(\tR\x12destinatio\
    nAccount\x12>\n\x05asset\x18\x03\x20\x02(\x0b2(.hw.trezor.messages.stell\
    ar.StellarAssetR\x05asset\x12\x16\n\x06amount\x18\x04\x20\x02(\x12R\x06a\
    mount\"\x8b\x01\n\x16StellarCreateAccountOp\x12%\n\x0esource_account\x18\
    \x01\x20\x01(\tR\rsourceAccount\x12\x1f\n\x0bnew_account\x18\x02\x20\x02\
    (\tR\nnewAccount\x12)\n\x10starting_balance\x18\x03\x20\x02(\x12R\x0fsta\
    rtingBalance\"\xa5\x03\n!StellarPathPaymentStrictReceiveOp\x12%\n\x0esou\
    rce_account\x18\x01\x20\x01(\tR\rsourceAccount\x12G\n\nsend_asset\x18\
    \x02\x20\x02(\x0b2(.hw.trezor.messages.stellar.StellarAssetR\tsendAsset\
    \x12\x19\n\x08send_max\x18\x03\x20\x02(\x12R\x07sendMax\x12/\n\x13destin\
    ation_account\x18\x04\x20\x02(\tR\x12destinationAccount\x12U\n\x11destin\
    ation_asset\x18\x05\x20\x02(\x0b2(.hw.trezor.messages.stellar.StellarAss\
    etR\x10destinationAsset\x12-\n\x12destination_amount\x18\x06\x20\x02(\
    \x12R\x11destinationAmount\x12>\n\x05paths\x18\x07\x20\x03(\x0b2(.hw.tre\
    zor.messages.stellar.StellarAssetR\x05paths\"\xa2\x03\n\x1eStellarPathPa\
    ymentStrictSendOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAc\
    count\x12G\n\nsend_asset\x18\x02\x20\x02(\x0b2(.hw.trezor.messages.stell\
    ar.StellarAssetR\tsendAsset\x12\x1f\n\x0bsend_amount\x18\x03\x20\x02(\
    \x12R\nsendAmount\x12/\n\x13destination_account\x18\x04\x20\x02(\tR\x12d\
    estinationAccount\x12U\n\x11destination_asset\x18\x05\x20\x02(\x0b2(.hw.\
    trezor.messages.stellar.StellarAssetR\x10destinationAsset\x12'\n\x0fdest\
    ination_min\x18\x06\x20\x02(\x12R\x0edestinationMin\x12>\n\x05paths\x18\
    \x07\x20\x03(\x0b2(.hw.trezor.messages.stellar.StellarAssetR\x05paths\"\
    \xc2\x02\n\x18StellarManageSellOfferOp\x12%\n\x0esource_account\x18\x01\
    \x20\x01(\tR\rsourceAccount\x12M\n\rselling_asset\x18\x02\x20\x02(\x0b2(\
    .hw.trezor.messages.stellar.StellarAssetR\x0csellingAsset\x12K\n\x0cbuyi\
    ng_asset\x18\x03\x20\x02(\x0b2(.hw.trezor.messages.stellar.StellarAssetR\
    \x0bbuyingAsset\x12\x16\n\x06amount\x18\x04\x20\x02(\x12R\x06amount\x12\
    \x17\n\x07price_n\x18\x05\x20\x02(\rR\x06priceN\x12\x17\n\x07price_d\x18\
    \x06\x20\x02(\rR\x06priceD\x12\x19\n\x08offer_id\x18\x07\x20\x02(\x04R\
    \x07offerId\"\xc1\x02\n\x17StellarManageBuyOfferOp\x12%\n\x0esource_acco\
    unt\x18\x01\x20\x01(\tR\rsourceAccount\x12M\n\rselling_asset\x18\x02\x20\
    \x02(\x0b2(.hw.trezor.messages.stellar.StellarAssetR\x0csellingAsset\x12\
    K\n\x0cbuying_asset\x18\x03\x20\x02(\x0b2(.hw.trezor.messages.stellar.St\
    ellarAssetR\x0bbuyingAsset\x12\x16\n\x06amount\x18\x04\x20\x02(\x12R\x06\
    amount\x12\x17\n\x07price_n\x18\x05\x20\x02(\rR\x06priceN\x12\x17\n\x07p\
    rice_d\x18\x06\x20\x02(\rR\x06priceD\x12\x19\n\x08offer_id\x18\x07\x20\
    \x02(\x04R\x07offerId\"\xae\x02\n\x1fStellarCreatePassiveSellOfferOp\x12\
    %\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12M\n\rselling\
    _asset\x18\x02\x20\x02(\x0b2(.hw.trezor.messages.stellar.StellarAssetR\
    \x0csellingAsset\x12K\n\x0cbuying_asset\x18\x03\x20\x02(\x0b2(.hw.trezor\
    .messages.stellar.StellarAssetR\x0bbuyingAsset\x12\x16\n\x06amount\x18\
    \x04\x20\x02(\x12R\x06amount\x12\x17\n\x07price_n\x18\x05\x20\x02(\rR\
    \x06priceN\x12\x17\n\x07price_d\x18\x06\x20\x02(\rR\x06priceD\"\xdd\x04\
    \n\x13StellarSetOptionsOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\r\
    sourceAccount\x12B\n\x1dinflation_destination_account\x18\x02\x20\x01(\t\
    R\x1binflationDestinationAccount\x12\x1f\n\x0bclear_flags\x18\x03\x20\
    \x01(\rR\nclearFlags\x12\x1b\n\tset_flags\x18\x04\x20\x01(\rR\x08setFlag\
    s\x12#\n\rmaster_weight\x18\x05\x20\x01(\rR\x0cmasterWeight\x12#\n\rlow_\
    threshold\x18\x06\x20\x01(\rR\x0clowThreshold\x12)\n\x10medium_threshold\
    \x18\x07\x20\x01(\rR\x0fmediumThreshold\x12%\n\x0ehigh_threshold\x18\x08\
    \x20\x01(\rR\rhighThreshold\x12\x1f\n\x0bhome_domain\x18\t\x20\x01(\tR\n\
    homeDomain\x12b\n\x0bsigner_type\x18\n\x20\x01(\x0e2A.hw.trezor.messages\
    .stellar.StellarSetOptionsOp.StellarSignerTypeR\nsignerType\x12\x1d\n\ns\
    igner_key\x18\x0b\x20\x01(\x0cR\tsignerKey\x12#\n\rsigner_weight\x18\x0c\
    \x20\x01(\rR\x0csignerWeight\"8\n\x11StellarSignerType\x12\x0b\n\x07ACCO\
    UNT\x10\0\x12\x0c\n\x08PRE_AUTH\x10\x01\x12\x08\n\x04HASH\x10\x02\"\x93\
    \x01\n\x14StellarChangeTrustOp\x12%\n\x0esource_account\x18\x01\x20\x01(\
    \tR\rsourceAccount\x12>\n\x05asset\x18\x02\x20\x02(\x0b2(.hw.trezor.mess\
    ages.stellar.StellarAssetR\x05asset\x12\x14\n\x05limit\x18\x03\x20\x02(\
    \x04R\x05limit\"\xf6\x01\n\x13StellarAllowTrustOp\x12%\n\x0esource_accou\
    nt\x18\x01\x20\x01(\tR\rsourceAccount\x12'\n\x0ftrusted_account\x18\x02\
    \x20\x02(\tR\x0etrustedAccount\x12K\n\nasset_type\x18\x03\x20\x02(\x0e2,\
    .hw.trezor.messages.stellar.StellarAssetTypeR\tassetType\x12\x1d\n\nasse\
    t_code\x18\x04\x20\x01(\tR\tassetCode\x12#\n\ris_authorized\x18\x05\x20\
    \x02(\x08R\x0cisAuthorized\"o\n\x15StellarAccountMergeOp\x12%\n\x0esourc\
    e_account\x18\x01\x20\x01(\tR\rsourceAccount\x12/\n\x13destination_accou\
    nt\x18\x02\x20\x02(\tR\x12destinationAccount\"d\n\x13StellarManageDataOp\
    \x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12\x10\n\
    \x03key\x18\x02\x20\x02(\tR\x03key\x12\x14\n\x05value\x18\x03\x20\x01(\
    \x0cR\x05value\"W\n\x15StellarBumpSequenceOp\x12%\n\x0esource_account\
    \x18\x01\x20\x01(\tR\rsourceAccount\x12\x17\n\x07bump_to\x18\x02\x20\x02\
    (\x04R\x06bumpTo\"f\n\x1eStellarClaimClaimableBalanceOp\x12%\n\x0esource\
    _account\x18\x01\x20\x01(\tR\rsourceAccount\x12\x1d\n\nbalance_id\x18\
    \x02\x20\x02(\x0cR\tbalanceId\"N\n\x0fStellarSignedTx\x12\x1d\n\npublic_\
    key\x18\x01\x20\x02(\x0cR\tpublicKey\x12\x1c\n\tsignature\x18\x02\x20\
    \x02(\x0cR\tsignature\"\xde\x0e\n\x0cStellarSCVal\x12M\n\x04type\x18\x01\
    \x20\x02(\x0e29.hw.trezor.messages.stellar.StellarSCVal.StellarSCValType\
    R\x04type\x12\x0c\n\x01b\x18\x02\x20\x01(\x08R\x01b\x12\x10\n\x03u32\x18\
    \x04\x20\x01(\rR\x03u32\x12\x10\n\x03i32\x18\x05\x20\x01(\x11R\x03i32\
    \x12\x10\n\x03u64\x18\x06\x20\x01(\x04R\x03u64\x12\x10\n\x03i64\x18\x07\
    \x20\x01(\x12R\x03i64\x12\x1c\n\ttimepoint\x18\x08\x20\x01(\x04R\ttimepo\
    int\x12\x1a\n\x08duration\x18\t\x20\x01(\x04R\x08duration\x12P\n\x04u128\
    \x18\n\x20\x01(\x0b2<.hw.trezor.messages.stellar.StellarSCVal.StellarUIn\
    t128PartsR\x04u128\x12O\n\x04i128\x18\x0b\x20\x01(\x0b2;.hw.trezor.messa\
    ges.stellar.StellarSCVal.StellarInt128PartsR\x04i128\x12P\n\x04u256\x18\
    \x0c\x20\x01(\x0b2<.hw.trezor.messages.stellar.StellarSCVal.StellarUInt2\
    56PartsR\x04u256\x12O\n\x04i256\x18\r\x20\x01(\x0b2;.hw.trezor.messages.\
    stellar.StellarSCVal.StellarInt256PartsR\x04i256\x12\x14\n\x05bytes\x18\
    \x0e\x20\x01(\x0cR\x05bytes\x12\x16\n\x06string\x18\x0f\x20\x01(\tR\x06s\
    tring\x12\x16\n\x06symbol\x18\x10\x20\x01(\tR\x06symbol\x12:\n\x03vec\
    \x18\x11\x20\x03(\x0b2(.hw.trezor.messages.stellar.StellarSCValR\x03vec\
    \x12O\n\x03map\x18\x12\x20\x03(\x0b2=.hw.trezor.messages.stellar.Stellar\
    SCVal.StellarSCValMapEntryR\x03map\x12S\n\x07address\x18\x13\x20\x01(\
    \x0b29.hw.trezor.messages.stellar.StellarSCVal.StellarSCAddressR\x07addr\
    ess\x1a5\n\x13StellarUInt128Parts\x12\x0e\n\x02hi\x18\x01\x20\x02(\x04R\
    \x02hi\x12\x0e\n\x02lo\x18\x02\x20\x02(\x04R\x02lo\x1a4\n\x12StellarInt1\
    28Parts\x12\x0e\n\x02hi\x18\x01\x20\x02(\x12R\x02hi\x12\x0e\n\x02lo\x18\
    \x02\x20\x02(\x04R\x02lo\x1ai\n\x13StellarUInt256Parts\x12\x13\n\x05hi_h\
    i\x18\x01\x20\x02(\x04R\x04hiHi\x12\x13\n\x05hi_lo\x18\x02\x20\x02(\x04R\
    \x04hiLo\x12\x13\n\x05lo_hi\x18\x03\x20\x02(\x04R\x04loHi\x12\x13\n\x05l\
    o_lo\x18\x04\x20\x02(\x04R\x04loLo\x1ah\n\x12StellarInt256Parts\x12\x13\
    \n\x05hi_hi\x18\x01\x20\x02(\x12R\x04hiHi\x12\x13\n\x05hi_lo\x18\x02\x20\
    \x02(\x04R\x04hiLo\x12\x13\n\x05lo_hi\x18\x03\x20\x02(\x04R\x04loHi\x12\
    \x13\n\x05lo_lo\x18\x04\x20\x02(\x04R\x04loLo\x1a\xe3\x01\n\x10StellarSC\
    Address\x12b\n\x04type\x18\x01\x20\x02(\x0e2N.hw.trezor.messages.stellar\
    .StellarSCVal.StellarSCAddress.StellarSCAddressTypeR\x04type\x12\x18\n\
    \x07address\x18\x02\x20\x02(\tR\x07address\"Q\n\x14StellarSCAddressType\
    \x12\x1b\n\x17SC_ADDRESS_TYPE_ACCOUNT\x10\0\x12\x1c\n\x18SC_ADDRESS_TYPE\
    _CONTRACT\x10\x01\x1a\x92\x01\n\x14StellarSCValMapEntry\x12:\n\x03key\
    \x18\x01\x20\x01(\x0b2(.hw.trezor.messages.stellar.StellarSCValR\x03key\
    \x12>\n\x05value\x18\x02\x20\x01(\x0b2(.hw.trezor.messages.stellar.Stell\
    arSCValR\x05value\"\xb1\x02\n\x10StellarSCValType\x12\x0c\n\x08SCV_BOOL\
    \x10\0\x12\x0c\n\x08SCV_VOID\x10\x01\x12\x0b\n\x07SCV_U32\x10\x03\x12\
    \x0b\n\x07SCV_I32\x10\x04\x12\x0b\n\x07SCV_U64\x10\x05\x12\x0b\n\x07SCV_\
    I64\x10\x06\x12\x11\n\rSCV_TIMEPOINT\x10\x07\x12\x10\n\x0cSCV_DURATION\
    \x10\x08\x12\x0c\n\x08SCV_U128\x10\t\x12\x0c\n\x08SCV_I128\x10\n\x12\x0c\
    \n\x08SCV_U256\x10\x0b\x12\x0c\n\x08SCV_I256\x10\x0c\x12\r\n\tSCV_BYTES\
    \x10\r\x12\x0e\n\nSCV_STRING\x10\x0e\x12\x0e\n\nSCV_SYMBOL\x10\x0f\x12\
    \x0b\n\x07SCV_VEC\x10\x10\x12\x0b\n\x07SCV_MAP\x10\x11\x12\x0f\n\x0bSCV_\
    ADDRESS\x10\x12\"\x04\x08\x02\x10\x02\"\x04\x08\x13\x10\x13\"\x04\x08\
    \x14\x10\x14\"\x04\x08\x15\x10\x15J\x04\x08\x03\x10\x04J\x04\x08\x14\x10\
    \x15J\x04\x08\x15\x10\x16\"\xe4\x01\n\x19StellarInvokeContractArgs\x12d\
    \n\x10contract_address\x18\x01\x20\x02(\x0b29.hw.trezor.messages.stellar\
    .StellarSCVal.StellarSCAddressR\x0fcontractAddress\x12#\n\rfunction_name\
    \x18\x02\x20\x02(\tR\x0cfunctionName\x12<\n\x04args\x18\x03\x20\x03(\x0b\
    2(.hw.trezor.messages.stellar.StellarSCValR\x04args\"\x8a\x03\n\x20Stell\
    arSorobanAuthorizedFunction\x12u\n\x04type\x18\x01\x20\x02(\x0e2a.hw.tre\
    zor.messages.stellar.StellarSorobanAuthorizedFunction.StellarSorobanAuth\
    orizedFunctionTypeR\x04type\x12V\n\x0bcontract_fn\x18\x02\x20\x01(\x0b25\
    .hw.trezor.messages.stellar.StellarInvokeContractArgsR\ncontractFn\"\x96\
    \x01\n$StellarSorobanAuthorizedFunctionType\x120\n,SOROBAN_AUTHORIZED_FU\
    NCTION_TYPE_CONTRACT_FN\x10\0\x12<\n8SOROBAN_AUTHORIZED_FUNCTION_TYPE_CR\
    EATE_CONTRACT_HOST_FN\x10\x01\"\xe7\x01\n\"StellarSorobanAuthorizedInvoc\
    ation\x12X\n\x08function\x18\x01\x20\x02(\x0b2<.hw.trezor.messages.stell\
    ar.StellarSorobanAuthorizedFunctionR\x08function\x12g\n\x0fsub_invocatio\
    ns\x18\x02\x20\x03(\x0b2>.hw.trezor.messages.stellar.StellarSorobanAutho\
    rizedInvocationR\x0esubInvocations\"\xeb\x02\n\x13StellarHostFunction\
    \x12[\n\x04type\x18\x01\x20\x02(\x0e2G.hw.trezor.messages.stellar.Stella\
    rHostFunction.StellarHostFunctionTypeR\x04type\x12^\n\x0finvoke_contract\
    \x18\x02\x20\x01(\x0b25.hw.trezor.messages.stellar.StellarInvokeContract\
    ArgsR\x0einvokeContract\"\x96\x01\n\x17StellarHostFunctionType\x12&\n\"H\
    OST_FUNCTION_TYPE_INVOKE_CONTRACT\x10\0\x12&\n\"HOST_FUNCTION_TYPE_CREAT\
    E_CONTRACT\x10\x01\x12+\n'HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM\x10\
    \x02\"\x95\x02\n\x20StellarSorobanAddressCredentials\x12S\n\x07address\
    \x18\x01\x20\x02(\x0b29.hw.trezor.messages.stellar.StellarSCVal.StellarS\
    CAddressR\x07address\x12\x14\n\x05nonce\x18\x02\x20\x02(\x12R\x05nonce\
    \x12>\n\x1bsignature_expiration_ledger\x18\x03\x20\x02(\rR\x19signatureE\
    xpirationLedger\x12F\n\tsignature\x18\x04\x20\x02(\x0b2(.hw.trezor.messa\
    ges.stellar.StellarSCValR\tsignature\"\xc6\x02\n\x19StellarSorobanCreden\
    tials\x12g\n\x04type\x18\x01\x20\x02(\x0e2S.hw.trezor.messages.stellar.S\
    tellarSorobanCredentials.StellarSorobanCredentialsTypeR\x04type\x12V\n\
    \x07address\x18\x02\x20\x01(\x0b2<.hw.trezor.messages.stellar.StellarSor\
    obanAddressCredentialsR\x07address\"h\n\x1dStellarSorobanCredentialsType\
    \x12&\n\"SOROBAN_CREDENTIALS_SOURCE_ACCOUNT\x10\0\x12\x1f\n\x1bSOROBAN_C\
    REDENTIALS_ADDRESS\x10\x01\"\xe4\x01\n\x20StellarSorobanAuthorizationEnt\
    ry\x12W\n\x0bcredentials\x18\x01\x20\x02(\x0b25.hw.trezor.messages.stell\
    ar.StellarSorobanCredentialsR\x0bcredentials\x12g\n\x0froot_invocation\
    \x18\x02\x20\x02(\x0b2>.hw.trezor.messages.stellar.StellarSorobanAuthori\
    zedInvocationR\x0erootInvocation\"\xe3\x01\n\x1bStellarInvokeHostFunctio\
    nOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12K\n\
    \x08function\x18\x02\x20\x02(\x0b2/.hw.trezor.messages.stellar.StellarHo\
    stFunctionR\x08function\x12P\n\x04auth\x18\x03\x20\x03(\x0b2<.hw.trezor.\
    messages.stellar.StellarSorobanAuthorizationEntryR\x04auth\"\x15\n\x13St\
    ellarTxExtRequest\"?\n\x0cStellarTxExt\x12\x0c\n\x01v\x18\x01\x20\x02(\
    \x11R\x01v\x12!\n\x0csoroban_data\x18\x02\x20\x01(\x0cR\x0bsorobanData\"\
    \xa3\x02\n\x1fStellarSignSorobanAuthorization\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12-\n\x12network_passphrase\x18\x02\x20\
    \x02(\tR\x11networkPassphrase\x12\x14\n\x05nonce\x18\x03\x20\x02(\x12R\
    \x05nonce\x12>\n\x1bsignature_expiration_ledger\x18\x04\x20\x02(\rR\x19s\
    ignatureExpirationLedger\x12^\n\ninvocation\x18\x05\x20\x02(\x0b2>.hw.tr\
    ezor.messages.stellar.StellarSorobanAuthorizedInvocationR\ninvocation*=\
    \n\x10StellarAssetType\x12\n\n\x06NATIVE\x10\0\x12\r\n\tALPHANUM4\x10\
    \x01\x12\x0e\n\nALPHANUM12\x10\x02B;\n#com.satoshilabs.trezor.lib.protob\
    ufB\x14TrezorMessageStellar\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(38);
            messages.push(StellarAsset::generated_message_descriptor_data());
            messages.push(StellarGetAddress::generated_message_descriptor_data());
            messages.push(StellarAddress::generated_message_descriptor_data());
            messages.push(StellarSignTx::generated_message_descriptor_data());
            messages.push(StellarTxOpRequest::generated_message_descriptor_data());
            messages.push(StellarPaymentOp::generated_message_descriptor_data());
            messages.push(StellarCreateAccountOp::generated_message_descriptor_data());
            messages.push(StellarPathPaymentStrictReceiveOp::generated_message_descriptor_data());
            messages.push(StellarPathPaymentStrictSendOp::generated_message_descriptor_data());
            messages.push(StellarManageSellOfferOp::generated_message_descriptor_data());
            messages.push(StellarManageBuyOfferOp::generated_message_descriptor_data());
            messages.push(StellarCreatePassiveSellOfferOp::generated_message_descriptor_data());
            messages.push(StellarSetOptionsOp::generated_message_descriptor_data());
            messages.push(StellarChangeTrustOp::generated_message_descriptor_data());
            messages.push(StellarAllowTrustOp::generated_message_descriptor_data());
            messages.push(StellarAccountMergeOp::generated_message_descriptor_data());
            messages.push(StellarManageDataOp::generated_message_descriptor_data());
            messages.push(StellarBumpSequenceOp::generated_message_descriptor_data());
            messages.push(StellarClaimClaimableBalanceOp::generated_message_descriptor_data());
            messages.push(StellarSignedTx::generated_message_descriptor_data());
            messages.push(StellarSCVal::generated_message_descriptor_data());
            messages.push(StellarInvokeContractArgs::generated_message_descriptor_data());
            messages.push(StellarSorobanAuthorizedFunction::generated_message_descriptor_data());
            messages.push(StellarSorobanAuthorizedInvocation::generated_message_descriptor_data());
            messages.push(StellarHostFunction::generated_message_descriptor_data());
            messages.push(StellarSorobanAddressCredentials::generated_message_descriptor_data());
            messages.push(StellarSorobanCredentials::generated_message_descriptor_data());
            messages.push(StellarSorobanAuthorizationEntry::generated_message_descriptor_data());
            messages.push(StellarInvokeHostFunctionOp::generated_message_descriptor_data());
            messages.push(StellarTxExtRequest::generated_message_descriptor_data());
            messages.push(StellarTxExt::generated_message_descriptor_data());
            messages.push(StellarSignSorobanAuthorization::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarUInt128Parts::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarInt128Parts::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarUInt256Parts::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarInt256Parts::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarSCAddress::generated_message_descriptor_data());
            messages.push(stellar_scval::StellarSCValMapEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(8);
            enums.push(StellarAssetType::generated_enum_descriptor_data());
            enums.push(stellar_sign_tx::StellarMemoType::generated_enum_descriptor_data());
            enums.push(stellar_set_options_op::StellarSignerType::generated_enum_descriptor_data());
            enums.push(stellar_scval::StellarSCValType::generated_enum_descriptor_data());
            enums.push(stellar_scval::stellar_scaddress::StellarSCAddressType::generated_enum_descriptor_data());
            enums.push(stellar_soroban_authorized_function::StellarSorobanAuthorizedFunctionType::generated_enum_descriptor_data());
            enums.push(stellar_host_function::StellarHostFunctionType::generated_enum_descriptor_data());
            enums.push(stellar_soroban_credentials::StellarSorobanCredentialsType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
