// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-evolu.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluGetNode)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluGetNode {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluGetNode.proof_of_delegated_identity)
    pub proof_of_delegated_identity: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluGetNode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluGetNode {
    fn default() -> &'a EvoluGetNode {
        <EvoluGetNode as ::protobuf::Message>::default_instance()
    }
}

impl EvoluGetNode {
    pub fn new() -> EvoluGetNode {
        ::std::default::Default::default()
    }

    // optional bytes proof_of_delegated_identity = 1;

    pub fn proof_of_delegated_identity(&self) -> &[u8] {
        match self.proof_of_delegated_identity.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_proof_of_delegated_identity(&mut self) {
        self.proof_of_delegated_identity = ::std::option::Option::None;
    }

    pub fn has_proof_of_delegated_identity(&self) -> bool {
        self.proof_of_delegated_identity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_of_delegated_identity(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_of_delegated_identity = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_of_delegated_identity(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.proof_of_delegated_identity.is_none() {
            self.proof_of_delegated_identity = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.proof_of_delegated_identity.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_of_delegated_identity(&mut self) -> ::std::vec::Vec<u8> {
        self.proof_of_delegated_identity.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proof_of_delegated_identity",
            |m: &EvoluGetNode| { &m.proof_of_delegated_identity },
            |m: &mut EvoluGetNode| { &mut m.proof_of_delegated_identity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluGetNode>(
            "EvoluGetNode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluGetNode {
    const NAME: &'static str = "EvoluGetNode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proof_of_delegated_identity = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.proof_of_delegated_identity.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.proof_of_delegated_identity.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluGetNode {
        EvoluGetNode::new()
    }

    fn clear(&mut self) {
        self.proof_of_delegated_identity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluGetNode {
        static instance: EvoluGetNode = EvoluGetNode {
            proof_of_delegated_identity: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluGetNode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluGetNode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluGetNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluGetNode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluNode)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluNode {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluNode.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluNode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluNode {
    fn default() -> &'a EvoluNode {
        <EvoluNode as ::protobuf::Message>::default_instance()
    }
}

impl EvoluNode {
    pub fn new() -> EvoluNode {
        ::std::default::Default::default()
    }

    // required bytes data = 1;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &EvoluNode| { &m.data },
            |m: &mut EvoluNode| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluNode>(
            "EvoluNode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluNode {
    const NAME: &'static str = "EvoluNode";

    fn is_initialized(&self) -> bool {
        if self.data.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluNode {
        EvoluNode::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluNode {
        static instance: EvoluNode = EvoluNode {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluNode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluNode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluNode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluSignRegistrationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluSignRegistrationRequest {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluSignRegistrationRequest.challenge_from_server)
    pub challenge_from_server: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluSignRegistrationRequest.size_to_acquire)
    pub size_to_acquire: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluSignRegistrationRequest.proof_of_delegated_identity)
    pub proof_of_delegated_identity: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluSignRegistrationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluSignRegistrationRequest {
    fn default() -> &'a EvoluSignRegistrationRequest {
        <EvoluSignRegistrationRequest as ::protobuf::Message>::default_instance()
    }
}

impl EvoluSignRegistrationRequest {
    pub fn new() -> EvoluSignRegistrationRequest {
        ::std::default::Default::default()
    }

    // required bytes challenge_from_server = 1;

    pub fn challenge_from_server(&self) -> &[u8] {
        match self.challenge_from_server.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_challenge_from_server(&mut self) {
        self.challenge_from_server = ::std::option::Option::None;
    }

    pub fn has_challenge_from_server(&self) -> bool {
        self.challenge_from_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_from_server(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge_from_server = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge_from_server(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.challenge_from_server.is_none() {
            self.challenge_from_server = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.challenge_from_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge_from_server(&mut self) -> ::std::vec::Vec<u8> {
        self.challenge_from_server.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 size_to_acquire = 2;

    pub fn size_to_acquire(&self) -> u32 {
        self.size_to_acquire.unwrap_or(0)
    }

    pub fn clear_size_to_acquire(&mut self) {
        self.size_to_acquire = ::std::option::Option::None;
    }

    pub fn has_size_to_acquire(&self) -> bool {
        self.size_to_acquire.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size_to_acquire(&mut self, v: u32) {
        self.size_to_acquire = ::std::option::Option::Some(v);
    }

    // required bytes proof_of_delegated_identity = 3;

    pub fn proof_of_delegated_identity(&self) -> &[u8] {
        match self.proof_of_delegated_identity.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_proof_of_delegated_identity(&mut self) {
        self.proof_of_delegated_identity = ::std::option::Option::None;
    }

    pub fn has_proof_of_delegated_identity(&self) -> bool {
        self.proof_of_delegated_identity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof_of_delegated_identity(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_of_delegated_identity = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_of_delegated_identity(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.proof_of_delegated_identity.is_none() {
            self.proof_of_delegated_identity = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.proof_of_delegated_identity.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof_of_delegated_identity(&mut self) -> ::std::vec::Vec<u8> {
        self.proof_of_delegated_identity.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_from_server",
            |m: &EvoluSignRegistrationRequest| { &m.challenge_from_server },
            |m: &mut EvoluSignRegistrationRequest| { &mut m.challenge_from_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "size_to_acquire",
            |m: &EvoluSignRegistrationRequest| { &m.size_to_acquire },
            |m: &mut EvoluSignRegistrationRequest| { &mut m.size_to_acquire },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proof_of_delegated_identity",
            |m: &EvoluSignRegistrationRequest| { &m.proof_of_delegated_identity },
            |m: &mut EvoluSignRegistrationRequest| { &mut m.proof_of_delegated_identity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluSignRegistrationRequest>(
            "EvoluSignRegistrationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluSignRegistrationRequest {
    const NAME: &'static str = "EvoluSignRegistrationRequest";

    fn is_initialized(&self) -> bool {
        if self.challenge_from_server.is_none() {
            return false;
        }
        if self.size_to_acquire.is_none() {
            return false;
        }
        if self.proof_of_delegated_identity.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.challenge_from_server = ::std::option::Option::Some(is.read_bytes()?);
                },
                16 => {
                    self.size_to_acquire = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.proof_of_delegated_identity = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_from_server.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.size_to_acquire {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.proof_of_delegated_identity.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.challenge_from_server.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.size_to_acquire {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.proof_of_delegated_identity.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluSignRegistrationRequest {
        EvoluSignRegistrationRequest::new()
    }

    fn clear(&mut self) {
        self.challenge_from_server = ::std::option::Option::None;
        self.size_to_acquire = ::std::option::Option::None;
        self.proof_of_delegated_identity = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluSignRegistrationRequest {
        static instance: EvoluSignRegistrationRequest = EvoluSignRegistrationRequest {
            challenge_from_server: ::std::option::Option::None,
            size_to_acquire: ::std::option::Option::None,
            proof_of_delegated_identity: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluSignRegistrationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluSignRegistrationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluSignRegistrationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluSignRegistrationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluRegistrationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluRegistrationRequest {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluRegistrationRequest.certificate_chain)
    pub certificate_chain: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluRegistrationRequest.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluRegistrationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluRegistrationRequest {
    fn default() -> &'a EvoluRegistrationRequest {
        <EvoluRegistrationRequest as ::protobuf::Message>::default_instance()
    }
}

impl EvoluRegistrationRequest {
    pub fn new() -> EvoluRegistrationRequest {
        ::std::default::Default::default()
    }

    // required bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "certificate_chain",
            |m: &EvoluRegistrationRequest| { &m.certificate_chain },
            |m: &mut EvoluRegistrationRequest| { &mut m.certificate_chain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &EvoluRegistrationRequest| { &m.signature },
            |m: &mut EvoluRegistrationRequest| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluRegistrationRequest>(
            "EvoluRegistrationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluRegistrationRequest {
    const NAME: &'static str = "EvoluRegistrationRequest";

    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.certificate_chain.push(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.certificate_chain {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.certificate_chain {
            os.write_bytes(1, &v)?;
        };
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluRegistrationRequest {
        EvoluRegistrationRequest::new()
    }

    fn clear(&mut self) {
        self.certificate_chain.clear();
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluRegistrationRequest {
        static instance: EvoluRegistrationRequest = EvoluRegistrationRequest {
            certificate_chain: ::std::vec::Vec::new(),
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluRegistrationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluRegistrationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluRegistrationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluRegistrationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluGetDelegatedIdentityKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluGetDelegatedIdentityKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluGetDelegatedIdentityKey.thp_credential)
    pub thp_credential: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluGetDelegatedIdentityKey.host_static_public_key)
    pub host_static_public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluGetDelegatedIdentityKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluGetDelegatedIdentityKey {
    fn default() -> &'a EvoluGetDelegatedIdentityKey {
        <EvoluGetDelegatedIdentityKey as ::protobuf::Message>::default_instance()
    }
}

impl EvoluGetDelegatedIdentityKey {
    pub fn new() -> EvoluGetDelegatedIdentityKey {
        ::std::default::Default::default()
    }

    // optional bytes thp_credential = 1;

    pub fn thp_credential(&self) -> &[u8] {
        match self.thp_credential.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_thp_credential(&mut self) {
        self.thp_credential = ::std::option::Option::None;
    }

    pub fn has_thp_credential(&self) -> bool {
        self.thp_credential.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thp_credential(&mut self, v: ::std::vec::Vec<u8>) {
        self.thp_credential = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thp_credential(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.thp_credential.is_none() {
            self.thp_credential = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.thp_credential.as_mut().unwrap()
    }

    // Take field
    pub fn take_thp_credential(&mut self) -> ::std::vec::Vec<u8> {
        self.thp_credential.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes host_static_public_key = 2;

    pub fn host_static_public_key(&self) -> &[u8] {
        match self.host_static_public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_host_static_public_key(&mut self) {
        self.host_static_public_key = ::std::option::Option::None;
    }

    pub fn has_host_static_public_key(&self) -> bool {
        self.host_static_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_static_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.host_static_public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_static_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.host_static_public_key.is_none() {
            self.host_static_public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.host_static_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_static_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.host_static_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "thp_credential",
            |m: &EvoluGetDelegatedIdentityKey| { &m.thp_credential },
            |m: &mut EvoluGetDelegatedIdentityKey| { &mut m.thp_credential },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "host_static_public_key",
            |m: &EvoluGetDelegatedIdentityKey| { &m.host_static_public_key },
            |m: &mut EvoluGetDelegatedIdentityKey| { &mut m.host_static_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluGetDelegatedIdentityKey>(
            "EvoluGetDelegatedIdentityKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluGetDelegatedIdentityKey {
    const NAME: &'static str = "EvoluGetDelegatedIdentityKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.thp_credential = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.host_static_public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.thp_credential.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.host_static_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.thp_credential.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.host_static_public_key.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluGetDelegatedIdentityKey {
        EvoluGetDelegatedIdentityKey::new()
    }

    fn clear(&mut self) {
        self.thp_credential = ::std::option::Option::None;
        self.host_static_public_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluGetDelegatedIdentityKey {
        static instance: EvoluGetDelegatedIdentityKey = EvoluGetDelegatedIdentityKey {
            thp_credential: ::std::option::Option::None,
            host_static_public_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluGetDelegatedIdentityKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluGetDelegatedIdentityKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluGetDelegatedIdentityKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluGetDelegatedIdentityKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluDelegatedIdentityKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluDelegatedIdentityKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluDelegatedIdentityKey.private_key)
    pub private_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluDelegatedIdentityKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluDelegatedIdentityKey {
    fn default() -> &'a EvoluDelegatedIdentityKey {
        <EvoluDelegatedIdentityKey as ::protobuf::Message>::default_instance()
    }
}

impl EvoluDelegatedIdentityKey {
    pub fn new() -> EvoluDelegatedIdentityKey {
        ::std::default::Default::default()
    }

    // required bytes private_key = 1;

    pub fn private_key(&self) -> &[u8] {
        match self.private_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_private_key(&mut self) {
        self.private_key = ::std::option::Option::None;
    }

    pub fn has_private_key(&self) -> bool {
        self.private_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.private_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.private_key.is_none() {
            self.private_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.private_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::vec::Vec<u8> {
        self.private_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "private_key",
            |m: &EvoluDelegatedIdentityKey| { &m.private_key },
            |m: &mut EvoluDelegatedIdentityKey| { &mut m.private_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluDelegatedIdentityKey>(
            "EvoluDelegatedIdentityKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluDelegatedIdentityKey {
    const NAME: &'static str = "EvoluDelegatedIdentityKey";

    fn is_initialized(&self) -> bool {
        if self.private_key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.private_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.private_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.private_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluDelegatedIdentityKey {
        EvoluDelegatedIdentityKey::new()
    }

    fn clear(&mut self) {
        self.private_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluDelegatedIdentityKey {
        static instance: EvoluDelegatedIdentityKey = EvoluDelegatedIdentityKey {
            private_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluDelegatedIdentityKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluDelegatedIdentityKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluDelegatedIdentityKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluDelegatedIdentityKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14messages-evolu.proto\x12\x18hw.trezor.messages.evolu\x1a\roptions.\
    proto\"M\n\x0cEvoluGetNode\x12=\n\x1bproof_of_delegated_identity\x18\x01\
    \x20\x01(\x0cR\x18proofOfDelegatedIdentity\"\x1f\n\tEvoluNode\x12\x12\n\
    \x04data\x18\x01\x20\x02(\x0cR\x04data\"\xb9\x01\n\x1cEvoluSignRegistrat\
    ionRequest\x122\n\x15challenge_from_server\x18\x01\x20\x02(\x0cR\x13chal\
    lengeFromServer\x12&\n\x0fsize_to_acquire\x18\x02\x20\x02(\rR\rsizeToAcq\
    uire\x12=\n\x1bproof_of_delegated_identity\x18\x03\x20\x02(\x0cR\x18proo\
    fOfDelegatedIdentity\"e\n\x18EvoluRegistrationRequest\x12+\n\x11certific\
    ate_chain\x18\x01\x20\x03(\x0cR\x10certificateChain\x12\x1c\n\tsignature\
    \x18\x02\x20\x02(\x0cR\tsignature\"z\n\x1cEvoluGetDelegatedIdentityKey\
    \x12%\n\x0ethp_credential\x18\x01\x20\x01(\x0cR\rthpCredential\x123\n\
    \x16host_static_public_key\x18\x02\x20\x01(\x0cR\x13hostStaticPublicKey\
    \"<\n\x19EvoluDelegatedIdentityKey\x12\x1f\n\x0bprivate_key\x18\x01\x20\
    \x02(\x0cR\nprivateKeyB=\n#com.satoshilabs.trezor.lib.protobufB\x12Trezo\
    rMessageEvolu\x80\xa6\x1d\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::options::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(EvoluGetNode::generated_message_descriptor_data());
            messages.push(EvoluNode::generated_message_descriptor_data());
            messages.push(EvoluSignRegistrationRequest::generated_message_descriptor_data());
            messages.push(EvoluRegistrationRequest::generated_message_descriptor_data());
            messages.push(EvoluGetDelegatedIdentityKey::generated_message_descriptor_data());
            messages.push(EvoluDelegatedIdentityKey::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
