// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-git.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:hw.trezor.messages.git.GitCommitUpdate)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GitCommitUpdate {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.git.GitCommitUpdate.commit_hash)
    pub commit_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.git.GitCommitUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GitCommitUpdate {
    fn default() -> &'a GitCommitUpdate {
        <GitCommitUpdate as ::protobuf::Message>::default_instance()
    }
}

impl GitCommitUpdate {
    pub fn new() -> GitCommitUpdate {
        ::std::default::Default::default()
    }

    // optional bytes commit_hash = 1;

    pub fn commit_hash(&self) -> &[u8] {
        match self.commit_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_commit_hash(&mut self) {
        self.commit_hash = ::std::option::Option::None;
    }

    pub fn has_commit_hash(&self) -> bool {
        self.commit_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.commit_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commit_hash.is_none() {
            self.commit_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.commit_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.commit_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commit_hash",
            |m: &GitCommitUpdate| { &m.commit_hash },
            |m: &mut GitCommitUpdate| { &mut m.commit_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GitCommitUpdate>(
            "GitCommitUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GitCommitUpdate {
    const NAME: &'static str = "GitCommitUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.commit_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.commit_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.commit_hash.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GitCommitUpdate {
        GitCommitUpdate::new()
    }

    fn clear(&mut self) {
        self.commit_hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GitCommitUpdate {
        static instance: GitCommitUpdate = GitCommitUpdate {
            commit_hash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GitCommitUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GitCommitUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GitCommitUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GitCommitUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.git.GitVerify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GitVerify {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.git.GitVerify.commit)
    pub commit: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.git.GitVerify.trees)
    pub trees: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.git.GitVerify.path)
    pub path: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.git.GitVerify.blob)
    pub blob: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.git.GitVerify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GitVerify {
    fn default() -> &'a GitVerify {
        <GitVerify as ::protobuf::Message>::default_instance()
    }
}

impl GitVerify {
    pub fn new() -> GitVerify {
        ::std::default::Default::default()
    }

    // optional bytes commit = 1;

    pub fn commit(&self) -> &[u8] {
        match self.commit.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_commit(&mut self) {
        self.commit = ::std::option::Option::None;
    }

    pub fn has_commit(&self) -> bool {
        self.commit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: ::std::vec::Vec<u8>) {
        self.commit = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commit.is_none() {
            self.commit = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.commit.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit(&mut self) -> ::std::vec::Vec<u8> {
        self.commit.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes blob = 4;

    pub fn blob(&self) -> &[u8] {
        match self.blob.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_blob(&mut self) {
        self.blob = ::std::option::Option::None;
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: ::std::vec::Vec<u8>) {
        self.blob = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blob.is_none() {
            self.blob = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> ::std::vec::Vec<u8> {
        self.blob.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commit",
            |m: &GitVerify| { &m.commit },
            |m: &mut GitVerify| { &mut m.commit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "trees",
            |m: &GitVerify| { &m.trees },
            |m: &mut GitVerify| { &mut m.trees },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "path",
            |m: &GitVerify| { &m.path },
            |m: &mut GitVerify| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "blob",
            |m: &GitVerify| { &m.blob },
            |m: &mut GitVerify| { &mut m.blob },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GitVerify>(
            "GitVerify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GitVerify {
    const NAME: &'static str = "GitVerify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.commit = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.trees.push(is.read_bytes()?);
                },
                26 => {
                    self.path.push(is.read_string()?);
                },
                34 => {
                    self.blob = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.commit.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.trees {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let Some(v) = self.blob.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.commit.as_ref() {
            os.write_bytes(1, v)?;
        }
        for v in &self.trees {
            os.write_bytes(2, &v)?;
        };
        for v in &self.path {
            os.write_string(3, &v)?;
        };
        if let Some(v) = self.blob.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GitVerify {
        GitVerify::new()
    }

    fn clear(&mut self) {
        self.commit = ::std::option::Option::None;
        self.trees.clear();
        self.path.clear();
        self.blob = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GitVerify {
        static instance: GitVerify = GitVerify {
            commit: ::std::option::Option::None,
            trees: ::std::vec::Vec::new(),
            path: ::std::vec::Vec::new(),
            blob: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GitVerify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GitVerify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GitVerify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GitVerify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12messages-git.proto\x12\x16hw.trezor.messages.git\"2\n\x0fGitCommit\
    Update\x12\x1f\n\x0bcommit_hash\x18\x01\x20\x01(\x0cR\ncommitHash\"a\n\t\
    GitVerify\x12\x16\n\x06commit\x18\x01\x20\x01(\x0cR\x06commit\x12\x14\n\
    \x05trees\x18\x02\x20\x03(\x0cR\x05trees\x12\x12\n\x04path\x18\x03\x20\
    \x03(\tR\x04path\x12\x12\n\x04blob\x18\x04\x20\x01(\x0cR\x04blobB7\n#com\
    .satoshilabs.trezor.lib.protobufB\x10TrezorMessageGit\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(GitCommitUpdate::generated_message_descriptor_data());
            messages.push(GitVerify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
