syntax = "proto2";
package hw.trezor.messages.cardano;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageCardano";

import "messages-common.proto";

enum CardanoAddressType {
    BASE_ADDRESS = 0;
    POINTER_ADDRESS = 1;
    ENTERPRISE_ADDRESS = 2;
    BOOTSTRAP_ADDRESS = 3;
    // todo: add other type
}

/**
 * Structure representing cardano PointerAddress pointer,
 * which points to a staking key registration certificate.
 */
message CardanoCertificatePointerType {
    required uint32 block_index = 1;
    required uint32 tx_index = 2;
    required uint32 certificate_index = 3;
}

/**
 * Structure to represent address parameters so they can be later
 * reused in CardanoGetAddress and CardanoTxOutputType.
 * NetworkId isn't a part of the parameters, because in a transaction
 * this will be included separately in the transaction itself, so it
 * shouldn't be duplicated here.
 */
message CardanoAddressParametersType {
    optional CardanoAddressType address_type = 1;                   // one of the CardanoAddressType-s
    repeated uint32 address_n = 2;                                  // BIP-32-style path to derive the key from master node
    optional CardanoCertificatePointerType certificate_pointer = 3; // a pointer to the staking key registration certificate
    optional bytes staking_key_hash = 4;                            // staking key can be derived from address path, or
                                                                    // can be sent directly e.g. if it doesn't belong to
                                                                    // the same account as address path
}

/**
 * Request: Ask device for Cardano address
 * @start
 * @next CardanoAddress
 * @next Failure
 */
message CardanoGetAddress {
    optional CardanoAddressParametersType address_parameters = 1;   // parameters used to derive the address
    optional bool show_display = 2;                                 // optionally prompt for confirmation on trezor display
    optional uint32 network_id = 3;                                 // mainnet or testnet
}

/**
 * Request: Ask device for Cardano address
 * @end
 */
message CardanoAddress {
    optional string address = 1;    // Base58 cardano address
}

/**
 * Request: Ask device for public key corresponding to address_n path
 * @start
 * @next CardanoPublicKey
 * @next Failure
 */
message CardanoGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains public key derived from device private seed
 * @end
 */
message CardanoPublicKey {
    optional string xpub = 1;                               // Xpub key
    optional hw.trezor.messages.common.HDNodeType node = 2; // BIP-32 public node
}

// todo: GK - set correct next messages
/**
 * Request: Ask device to sign Cardano transaction
 * @start
 * @next CardanoSignedTx
 * @next CardanoTxRequest
 * @next Failure
 */
message CardanoSignTx {
    repeated CardanoTxInputType inputs = 1;         // inputs to be used in transaction
    repeated CardanoTxOutputType outputs = 2;       // outputs to be used in transaction
    optional uint32 transactions_count = 3;         // transactions count
    optional uint32 protocol_magic = 5;             // network's protocol magic
    optional uint32 fee = 6;                        // transaction fee - added in shelley
    optional uint32 ttl = 7;                        // transaction ttl - added in shelley
    repeated CardanoTxCertificate certificates = 8;// transaction certificates - added in shelley
    // todo: GK - add certificates, withdrawals, update, metadata and metadata hash?
    /**
     * Structure representing cardano transaction input
     */
    message CardanoTxInputType {
        repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
        optional bytes prev_hash = 2;   // hash of previous transaction output to spend by this input
        optional uint32 prev_index = 3; // index of previous output to spend
        optional uint32 type = 4;       // input type, defaults to 0
    }
    /**
     * Structure representing cardano transaction output
     */
    message CardanoTxOutputType {
        optional string address = 1;                                    // target coin address in Base58 encoding
        optional CardanoAddressParametersType address_parameters = 2;   // parameters used to derive the address
        optional uint64 amount = 3;                                     // amount to spend
    }

    message CardanoTxCertificate {
        optional string type = 1;       // certificate type
        repeated uint32 path = 2;       // BIP-32 path to derive (staking) key
        optional string pool = 3;       // pool hash
    }
}

/**
 * Response: Serialised signed cardano transaction if tx_index is not specified.
 *              If tx_index is specified, trezor will wait for transaction
 * @next CardanoTxAck
 */
message CardanoTxRequest {
    optional uint32 tx_index = 1;   // index of requested transaction
    optional bytes tx_hash = 2;     // hash of the signed transaction
    optional bytes tx_body = 3;     // serialised body of the signed transaction
}

/**
 * Request: Reported transaction data
 * @next CardanoSignedTx
 * @next CardanoTxRequest
 */
message CardanoTxAck {
    optional bytes transaction = 1;
}

/**
 * Response: Serialised signed cardano transaction
 * @end
 */
message CardanoSignedTx {
    optional bytes tx_hash = 1; // hash of the signed transaction
    optional bytes tx_body = 2; // serialised body of the signed transaction
}
