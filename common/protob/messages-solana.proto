syntax = "proto2";
package hw.trezor.messages.solana;

import "messages-common.proto";

/**
 * Request: Ask device for public key corresponding to address_n path
 * @start
 * @next SolanaPublicKey
 * @next Failure
 */
message SolanaGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains public key derived from device private seed
 * @end
 */
message SolanaPublicKey {
    required string xpub = 1;                               // Xpub key
    required hw.trezor.messages.common.HDNodeType node = 2; // BIP-32 public node
}

/**
 * Request: Ask device for Solana address
 * @start
 * @next SolanaAddress
 * @next Failure
 */
message SolanaGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains a Solana address derived from device private seed
 * @end
 */
message SolanaAddress {
    required string address = 1; // Solana address as Base58 encoded string
}

/**
 * Request: Ask device to sign a Solana transaction
 * @start
 * @next SolanaSignedTx
 * @next Failure
 */
message SolanaSignTx {
    repeated uint32 signer_path_n = 1;     // BIP-32 path to derive the key to sign with
    required bytes serialized_tx = 2;  // serialized tx to be signed
}

/**
 * Response: Contains the hash of the signed transaction and the signature
 * @end
 */
message SolanaSignedTx {
    required bytes serialized_tx = 1;   // the tx which has been signed (the same data which was passed to SolanaSignTx)
    required bytes signature = 2;       // tx signature
}

/**
 * Request: Ask device to sign a Solana off-chain message
 * @start
 * @next SolanaOffChainMessageSignature
 * @next Failure
 */
message SolanaSignOffChainMessage {
    repeated uint32 signer_path_n = 1;      // BIP-32 path to derive the key to sign with
    required bytes serialized_message = 2;  // serialized off-chain message to be signed
}

/**
 * Response: Contains a off-chain message signature
 * @end
 */
message SolanaOffChainMessageSignature {
    required bytes signature = 1; // off-chain message signature
}
